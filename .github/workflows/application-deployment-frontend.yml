name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    concurrency:
      group: production-deployment
      cancel-in-progress: false
    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.DEPLOY_APP_ID }}
          private-key: ${{ secrets.DEPLOY_APP_PRIVATE_KEY }}

      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Setup node
        uses: ./.github/actions/node-setup

      - name: Generate routes and types
        working-directory: ./frontend
        run: pnpm gen

      - name: Build for production
        working-directory: ./frontend
        run: pnpm build production

      - name: Create 404.html for SPA routing
        working-directory: ./frontend
        run: cp build/index.html build/404.html

      - name: Copy CNAME file to build directory
        working-directory: ./frontend
        run: cp CNAME build/CNAME

      - name: Prepare deployment artifacts
        run: |
          # Store build artifacts in a temporary location outside the repo
          mkdir -p /tmp/deployment
          cp -r frontend/build/* /tmp/deployment/

      - name: Deploy to production branch
        run: |
          # Configure git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Check if production branch exists
          if git ls-remote --exit-code --heads origin production >/dev/null 2>&1; then
            echo "Production branch exists, checking it out..."
            git fetch origin production
            git checkout production
          else
            echo "Production branch doesn't exist, creating orphan branch..."
            git checkout --orphan production
          fi

          # Clear everything except .git
          find . -maxdepth 1 -not -name '.git' -not -name '.' -not -name '..' -exec rm -rf {} + 2>/dev/null || true

          # Copy build files from temp location
          echo "Copying build artifacts..."
          cp -r /tmp/deployment/* .

          # Create .nojekyll file for GitHub Pages
          touch .nojekyll

          # Create release identification file
          echo "${GITHUB_SHA}" > .release-sha
          echo "Source commit: ${GITHUB_SHA}" >> .release-sha
          echo "Created by: ${{ github.workflow }}" >> .release-sha
          echo "Branch: ${GITHUB_REF_NAME}" >> .release-sha
          echo "Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> .release-sha

          # Stage all changes
          git add -A

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to deploy - build artifacts are identical to production"
            exit 0
          fi

          # Commit and push
          echo "Committing changes..."
          git commit -m "Deploy from ${GITHUB_SHA:0:7}

          Source: ${GITHUB_REF_NAME}@${GITHUB_SHA}
          Workflow: ${{ github.workflow }}
          Run: ${{ github.run_number }}
          Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"

          echo "Pushing to production branch..."
          git push origin production

          echo "✅ Successfully deployed to production branch"

          # Return to main branch for cleanup
          git checkout main

      - name: Comment on commit
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `✅ **Deployed to production**

              This commit has been successfully deployed to the production branch.

              **Deployment details:**
              - Workflow run: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              - Production branch: [\`production\`](${{ github.server_url }}/${{ github.repository }}/tree/production)

              _Automated deployment completed at ${new Date().toISOString()}_`
            });
