name: Create Production Deploy PR

on:
  push:
    branches: [erik/DeployPR]
  workflow_dispatch:

jobs:
  build-and-create-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup node
        uses: ./.github/actions/node-setup

      - name: Generate routes and types
        working-directory: ./frontend
        run: pnpm gen

      - name: Build for production
        working-directory: ./frontend
        run: pnpm build production

      - name: Create 404.html for SPA routing
        working-directory: ./frontend
        run: cp build/index.html build/404.html

      - name: Copy CNAME file to build directory
        working-directory: ./frontend
        run: cp CNAME build/CNAME

      - name: Prepare deployment files
        run: |
          # Create a temporary directory for deployment files in the root
          mkdir -p temp-deploy

          # Copy all build files from frontend/build
          echo "Copying build files..."
          if [ -d "frontend/build" ]; then
            cp -rv frontend/build/* temp-deploy/ || {
              echo "Error: No build files found in frontend/build/"
              ls -la frontend/build/
              exit 1
            }
            
            # Copy any hidden files from build directory
            if ls frontend/build/.* 1> /dev/null 2>&1; then
              cp -v frontend/build/.* temp-deploy/ 2>/dev/null || true
            fi
          else
            echo "Error: frontend/build directory does not exist"
            ls -la frontend/
            exit 1
          fi

          # Copy entire .github directory if it exists
          if [ -d ".github" ]; then
            cp -rv .github temp-deploy/
            echo ".github directory copied (includes CODEOWNERS, workflows, etc.)"
          else
            echo "No .github directory found"
          fi

          # List what we're deploying
          echo "Files prepared for deployment:"
          find temp-deploy -type f | head -20
          echo "Total files: $(find temp-deploy -type f | wc -l)"

          # Verify we have content
          if [ -z "$(ls -A temp-deploy)" ]; then
            echo "Error: temp-deploy directory is empty after copying"
            exit 1
          fi

      - name: Create deployment branch and PR
        run: |
          # Configure git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Create a unique branch name for this deployment
          BRANCH_NAME="deploy/production-$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA:0:7}"

          # Fetch production branch to ensure we have the latest
          git fetch origin production:production 2>/dev/null || {
            echo "Production branch doesn't exist, creating it..."
            git checkout --orphan production
            git rm -rf . 2>/dev/null || true
            echo "# Production Branch" > README.md
            echo "This branch contains the built artifacts for production deployment." >> README.md
            git add README.md
            git commit -m "Initialize production branch"
            git push origin production
            echo "Production branch created and pushed"
          }

          # Create deployment branch from production branch to maintain history
          echo "Creating deployment branch: $BRANCH_NAME"
          git checkout production
          git checkout -b "$BRANCH_NAME"

          # Remove all files except .git to start fresh
          echo "Clearing deployment branch..."
          find . -maxdepth 1 -not -name '.git' -not -name '.' -not -name '..' -exec rm -rf {} + 2>/dev/null || true

          # Verify temp-deploy directory exists and has content
          if [ ! -d "temp-deploy" ] || [ -z "$(ls -A temp-deploy)" ]; then
            echo "Error: temp-deploy directory is empty or doesn't exist"
            ls -la
            exit 1
          fi

          # Copy build files to root of deployment branch
          echo "Copying files to deployment branch..."
          cp -rv temp-deploy/* . 2>/dev/null || true

          # Copy hidden files if they exist
          if ls temp-deploy/.* 1> /dev/null 2>&1; then
            cp -v temp-deploy/.* . 2>/dev/null || true
          fi

          # Copy .github directory if it exists in temp-deploy
          if [ -d "temp-deploy/.github" ]; then
            cp -rv temp-deploy/.github .
            echo ".github directory copied"
          fi

          # Clean up temp directory
          rm -rf temp-deploy

          # Show what's in the deployment branch
          echo "Files in deployment branch:"
          ls -la

          # Add and commit all build files
          git add -A

          # Check if there are any changes to commit
          if git diff --staged --quiet; then
            echo "No changes to deploy - build artifacts are identical"
            exit 0
          fi

          echo "Committing changes..."
          git commit -m "Production build from commit ${GITHUB_SHA}

          Built from: ${GITHUB_REF_NAME}@${GITHUB_SHA}
          Workflow: ${{ github.workflow }}
          Run: ${{ github.run_number }}

          Files included:
          $(git diff --staged --name-only | head -10)
          $([ $(git diff --staged --name-only | wc -l) -gt 10 ] && echo "... and $(($(git diff --staged --name-only | wc -l) - 10)) more files")"

          # Push the deployment branch
          echo "Pushing deployment branch..."
          git push origin "$BRANCH_NAME"

          # Store branch name for next step
          echo "DEPLOY_BRANCH=$BRANCH_NAME" >> $GITHUB_ENV
          echo "Deployment branch created: $BRANCH_NAME"

      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Check if we have a deployment branch (might not exist if no changes)
            if (!process.env.DEPLOY_BRANCH) {
              console.log('No deployment branch created - no changes to deploy');
              return;
            }

            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Production Deployment from ${context.ref.replace('refs/heads/', '')} üöÄ`,
              head: process.env.DEPLOY_BRANCH,
              base: 'production',
              body: `## Production Deployment Request

            **Source:** \`${context.ref.replace('refs/heads/', '')}\`@\`${context.sha.substring(0, 7)}\`
            **Workflow:** ${context.workflow}
            **Run:** #${context.runNumber}

            ### üì¶ Build Details
            - Built from commit: ${context.sha}
            - Build artifacts ready for production deployment
            - Includes optimized assets, 404.html for SPA routing, and CNAME file
            - CODEOWNERS file included for proper review process

            ### üîç Review Checklist
            - [ ] Build artifacts look correct
            - [ ] No sensitive information exposed
            - [ ] CNAME file is present and correct
            - [ ] 404.html exists for SPA routing
            - [ ] All required assets are included

            ### üöÄ Deployment
            Once this PR is approved and merged, the production site will be updated.

            ---
            *This PR was automatically created by GitHub Actions*`,
              draft: false
            });

            console.log(`Created PR #${pr.number}: ${pr.html_url}`);

      - name: Comment on source commit
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if (!process.env.DEPLOY_BRANCH) {
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: `‚ÑπÔ∏è **No deployment needed**

                No changes detected in build artifacts - production is already up to date.

                *Generated by workflow: ${context.workflow}*`
              });
              return;
            }

            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `üöÄ **Production deployment PR created**

            A pull request has been automatically created to deploy this commit to production.

            **Deployment Branch:** \`${process.env.DEPLOY_BRANCH}\`

            **Next steps:**
            1. Review the generated build artifacts in the PR
            2. Approve and merge the PR to deploy to production

            *Generated by workflow: ${context.workflow}*`
            });

            console.log('Added comment to source commit');
