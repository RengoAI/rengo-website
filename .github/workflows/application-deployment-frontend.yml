name: Create Production Deploy PR

on:
  push:
    branches: [erik/DeployPR]
  workflow_dispatch:

jobs:
  build-and-create-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup node
        uses: ./.github/actions/node-setup

      - name: Generate routes and types
        working-directory: ./frontend
        run: pnpm gen

      - name: Build for production
        working-directory: ./frontend
        run: pnpm build production

      - name: Create 404.html for SPA routing
        working-directory: ./frontend
        run: cp build/index.html build/404.html

      - name: Copy CNAME file to build directory
        working-directory: ./frontend
        run: cp CNAME build/CNAME

      - name: Prepare deployment files
        working-directory: ./frontend
        run: |
          # Create a temporary directory for deployment files
          mkdir -p ../temp-deploy
          cp -r build/* ../temp-deploy/

          # Also copy any hidden files if they exist
          cp build/.* ../temp-deploy/ 2>/dev/null || true

      - name: Create deployment branch and PR
        run: |
          # Configure git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Create a unique branch name for this deployment
          BRANCH_NAME="deploy/production-$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA:0:7}"

          # Fetch production branch to ensure we have the latest
          git fetch origin production:production 2>/dev/null || {
            echo "Production branch doesn't exist, creating it..."
            git checkout --orphan production
            git rm -rf . 2>/dev/null || true
            echo "# Production Branch" > README.md
            git add README.md
            git commit -m "Initialize production branch"
            git push origin production
          }

          # Create deployment branch from production branch to maintain history
          git checkout production
          git checkout -b "$BRANCH_NAME"

          # Remove all files except .git
          find . -not -path './.git/*' -not -name '.git' -delete 2>/dev/null || true

          # Copy build files to root
          cp -r temp-deploy/* . 2>/dev/null || true
          cp temp-deploy/.* . 2>/dev/null || true

          # Clean up temp directory
          rm -rf temp-deploy

          # Add and commit all build files
          git add -A

          # Check if there are any changes to commit
          if git diff --staged --quiet; then
            echo "No changes to deploy"
            exit 0
          fi

          git commit -m "Production build from commit ${GITHUB_SHA}

          Built from: ${GITHUB_REF_NAME}@${GITHUB_SHA}
          Workflow: ${{ github.workflow }}
          Run: ${{ github.run_number }}"

          # Push the deployment branch
          git push origin "$BRANCH_NAME"

          # Store branch name for next step
          echo "DEPLOY_BRANCH=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Check if we have a deployment branch (might not exist if no changes)
            if (!process.env.DEPLOY_BRANCH) {
              console.log('No deployment branch created - no changes to deploy');
              return;
            }

            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üöÄ Production Deployment from ${context.ref.replace('refs/heads/', '')}`,
              head: process.env.DEPLOY_BRANCH,
              base: 'production',
              body: `## Production Deployment Request

            **Source:** \`${context.ref.replace('refs/heads/', '')}\`@\`${context.sha.substring(0, 7)}\`
            **Workflow:** ${context.workflow}
            **Run:** #${context.runNumber}

            ### üì¶ Build Details
            - Built from commit: ${context.sha}
            - Build artifacts ready for production deployment
            - Includes optimized assets, 404.html for SPA routing, and CNAME file

            ### üîç Review Checklist
            - [ ] Build artifacts look correct
            - [ ] No sensitive information exposed
            - [ ] CNAME file is present and correct
            - [ ] 404.html exists for SPA routing

            ### üöÄ Deployment
            Once this PR is approved and merged, the production site will be updated.

            ---
            *This PR was automatically created by GitHub Actions*`,
              draft: false
            });

            console.log(`Created PR #${pr.number}: ${pr.html_url}`);

      - name: Comment on source commit
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if (!process.env.DEPLOY_BRANCH) {
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: `‚ÑπÔ∏è **No deployment needed**

                No changes detected in build artifacts - production is already up to date.

                *Generated by workflow: ${context.workflow}*`
              });
              return;
            }

            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `üöÄ **Production deployment PR created**

            A pull request has been automatically created to deploy this commit to production.

            **Next steps:**
            1. Review the generated build artifacts in the PR
            2. Approve and merge the PR to deploy to production

            *Generated by workflow: ${context.workflow}*`
            });

            console.log('Added comment to source commit');
