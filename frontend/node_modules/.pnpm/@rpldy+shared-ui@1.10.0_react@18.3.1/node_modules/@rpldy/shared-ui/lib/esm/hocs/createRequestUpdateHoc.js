function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import React, { useLayoutEffect, useState } from "react";
import useUploadyContext from "../hooks/useUploadyContext";
const createRequestUpdateHoc = ({
  eventType,
  getIsValidEventData,
  getRequestData
}) => Component => props => {
  const context = useUploadyContext();
  const [updater, setUpdater] = useState({
    updateRequest: null,
    requestData: null
  });
  const {
    id
  } = props;
  useLayoutEffect(() => {
    const handleEvent = (...params) => getIsValidEventData(id, ...params) === true ? new Promise(resolve => {
      setUpdater({
        updateRequest: data => {
          context.off(eventType, handleEvent);
          resolve(data);
        },
        requestData: getRequestData(...params)
      });
    }) : undefined;
    if (id) {
      context.on(eventType, handleEvent);
    }
    return () => {
      if (id) {
        context.off(eventType, handleEvent);
      }
    };
  }, [context, id]);
  return /*#__PURE__*/React.createElement(Component, _extends({}, props, updater));
};
export { createRequestUpdateHoc };