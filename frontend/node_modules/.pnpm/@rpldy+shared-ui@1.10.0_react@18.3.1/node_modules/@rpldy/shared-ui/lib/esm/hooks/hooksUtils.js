import { useState, useCallback, useEffect } from "react";
import { isFunction } from "@rpldy/shared";
import useUploadyContext from "./useUploadyContext";
const useEventEffect = (event, fn) => {
  const context = useUploadyContext();
  const {
    on,
    off
  } = context;
  useEffect(() => {
    on(event, fn);
    return () => {
      off(event, fn);
    };
  }, [event, fn, on, off]);
};
const generateUploaderEventHookWithState = (event, stateCalculator) => (fn, id) => {
  const [eventState, setEventState] = useState(null);
  let cbFn = fn;
  let usedId = id;
  if (fn && !isFunction(fn)) {
    usedId = fn;
    cbFn = undefined;
  }
  const eventCallback = useCallback((eventObj, ...args) => {
    if (!usedId || eventObj.id === usedId) {
      setEventState(stateCalculator(eventObj, ...args));
      if (isFunction(cbFn)) {
        cbFn(eventObj, ...args);
      }
    }
  }, [cbFn, usedId]);
  useEventEffect(event, eventCallback);
  return eventState;
};
const generateUploaderEventHook = (event, canScope = true) => (fn, id) => {
  const eventCallback = useCallback((eventObj, ...args) => {
    return fn && (!canScope || !id || eventObj.id === id) ? fn(eventObj, ...args) : undefined;
  }, [fn, id]);
  useEventEffect(event, eventCallback);
};
export { generateUploaderEventHook, generateUploaderEventHookWithState };