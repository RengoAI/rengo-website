"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateUploaderEventHookWithState = exports.generateUploaderEventHook = void 0;
var _react = require("react");
var _shared = require("@rpldy/shared");
var _useUploadyContext = _interopRequireDefault(require("./useUploadyContext"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const useEventEffect = (event, fn) => {
  const context = (0, _useUploadyContext.default)();
  const {
    on,
    off
  } = context;
  (0, _react.useEffect)(() => {
    on(event, fn);
    return () => {
      off(event, fn);
    };
  }, [event, fn, on, off]);
};
const generateUploaderEventHookWithState = (event, stateCalculator) => (fn, id) => {
  const [eventState, setEventState] = (0, _react.useState)(null);
  let cbFn = fn;
  let usedId = id;
  if (fn && !(0, _shared.isFunction)(fn)) {
    usedId = fn;
    cbFn = undefined;
  }
  const eventCallback = (0, _react.useCallback)((eventObj, ...args) => {
    if (!usedId || eventObj.id === usedId) {
      setEventState(stateCalculator(eventObj, ...args));
      if ((0, _shared.isFunction)(cbFn)) {
        cbFn(eventObj, ...args);
      }
    }
  }, [cbFn, usedId]);
  useEventEffect(event, eventCallback);
  return eventState;
};
exports.generateUploaderEventHookWithState = generateUploaderEventHookWithState;
const generateUploaderEventHook = (event, canScope = true) => (fn, id) => {
  const eventCallback = (0, _react.useCallback)((eventObj, ...args) => {
    return fn && (!canScope || !id || eventObj.id === id) ? fn(eventObj, ...args) : undefined;
  }, [fn, id]);
  useEventEffect(event, eventCallback);
};
exports.generateUploaderEventHook = generateUploaderEventHook;