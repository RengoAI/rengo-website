"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRequestPreSend = exports.useItemStartListener = exports.useItemProgressListener = exports.useItemFinishListener = exports.useItemFinalizeListener = exports.useItemErrorListener = exports.useItemCancelListener = exports.useItemAbortListener = exports.useBatchStartListener = exports.useBatchProgressListener = exports.useBatchFinishListener = exports.useBatchFinalizeListener = exports.useBatchErrorListener = exports.useBatchCancelledListener = exports.useBatchAddListener = exports.useBatchAbortListener = exports.useAllAbortListener = void 0;
var _uploader = require("@rpldy/uploader");
var _hooksUtils = require("./hooksUtils");
const useBatchAddListener = exports.useBatchAddListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.BATCH_ADD, false);
const useBatchStartListener = exports.useBatchStartListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.BATCH_START);
const useBatchFinishListener = exports.useBatchFinishListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.BATCH_FINISH);
const useBatchCancelledListener = exports.useBatchCancelledListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.BATCH_CANCEL);
const useBatchErrorListener = exports.useBatchErrorListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.BATCH_ERROR);
const useBatchFinalizeListener = exports.useBatchFinalizeListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.BATCH_FINALIZE);
const useBatchAbortListener = exports.useBatchAbortListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.BATCH_ABORT);
const useBatchProgressListener = exports.useBatchProgressListener = (0, _hooksUtils.generateUploaderEventHookWithState)(_uploader.UPLOADER_EVENTS.BATCH_PROGRESS, batch => ({
  ...batch
}));
const useItemStartListener = exports.useItemStartListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.ITEM_START);
const useItemFinishListener = exports.useItemFinishListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.ITEM_FINISH);
const useItemCancelListener = exports.useItemCancelListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.ITEM_CANCEL);
const useItemErrorListener = exports.useItemErrorListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.ITEM_ERROR);
const useItemAbortListener = exports.useItemAbortListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.ITEM_ABORT);
const useItemFinalizeListener = exports.useItemFinalizeListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.ITEM_FINALIZE);
const useItemProgressListener = exports.useItemProgressListener = (0, _hooksUtils.generateUploaderEventHookWithState)(_uploader.UPLOADER_EVENTS.ITEM_PROGRESS, item => ({
  ...item
}));
const useRequestPreSend = exports.useRequestPreSend = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.REQUEST_PRE_SEND, false);
const useAllAbortListener = exports.useAllAbortListener = (0, _hooksUtils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.ALL_ABORT, false);