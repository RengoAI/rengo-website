'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var StytchB2BContext = require('../StytchB2BContext-f7acf57f.js');
var useIsomorphicLayoutEffect = require('../useIsomorphicLayoutEffect-672e4b66.js');
var StytchSSRProxy = require('../StytchSSRProxy-86bc42b3.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

/**
 * The Stytch B2B UI component.
 * This component can only be used with a Stytch B2B UI Client
 * passed into the StytchB2BProvider.
 *
 * See the {@link https://stytch.com/docs/b2b/sdks online reference}
 *
 * @example
 * <StytchB2B
 *   config={{
 *     authFlowType: "Organization",
 *     emailMagicLinksOptions: {
 *       loginRedirectURL: 'https://example.com/authenticate',
 *       signupRedirectURL: 'https://example.com/authenticate',
 *     },
 *     ssoOptions: {
 *       loginRedirectURL: 'https://example.com/authenticate',
 *       signupRedirectURL: 'https://example.com/authenticate',
 *     },
 *     sessionOptions: {
 *       sessionDurationMinutes: 60,
 *     }
 *   }}
 *   styles={{
 *     fontFamily: '"Helvetica New", Helvetica, sans-serif',
 *     primaryColor: '#0577CA',
 *     width: '321px',
 *   }}
 *   callbacks={{
 *     onEvent: (event) => console.log(event)
 *   }}
 * />
 */
const StytchB2B = ({ styles, callbacks, config, }) => {
    useIsomorphicLayoutEffect.invariant(StytchB2BContext.useIsMounted__INTERNAL(), StytchSSRProxy.noProviderError('<StytchB2B />', 'StytchB2BProvider'));
    const stytchClient = StytchB2BContext.useStytchB2BClient();
    const containerEl = React.useRef(null);
    useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        if (!StytchB2BContext.isUIClient(stytchClient)) {
            throw Error(StytchSSRProxy.noHeadlessClientError);
        }
        if (!containerEl.current) {
            return;
        }
        if (!containerEl.current.id) {
            const randId = Math.floor(Math.random() * 1e6);
            containerEl.current.id = `stytch-b2b-ui-${randId}`;
        }
        stytchClient.mount({
            callbacks,
            config,
            elementId: `#${containerEl.current.id}`,
            styles,
        });
        // eslint-disable-next-line react-hooks/exhaustive-deps -- SDK-1354
    }, [stytchClient, styles, callbacks]);
    return React__default["default"].createElement("div", { ref: containerEl });
};
/**
 * The Stytch B2B IDP component.
 * Parses OAuth Authorization params (client_id, scope, nonce, etc.) out of the page URL.
 * Requires the user to be logged in.
 * This component can only be used with a Stytch B2B UI Client
 * passed into the StytchB2BProvider.
 *
 * See the {@link https://stytch.com/docs/b2b/sdks online reference}
 *
 * @example
 * const styles = {
 *   container: {
 *     backgroundColor: '#e11e1e',
 *   },
 *   colors: {
 *     primary: '#ff00f7',
 *     secondary: '#5C727D',
 *   },
 * }
 *
 * <B2BIdentityProvider
 *   styles={styles}
 *   callbacks={{
 *     onEvent: (event) => console.log(event)
 *   }}
 * />
 */
const B2BIdentityProvider = ({ styles, callbacks, getIDPConsentManifest }) => {
    useIsomorphicLayoutEffect.invariant(StytchB2BContext.useIsMounted__INTERNAL(), StytchSSRProxy.noProviderError('<IdentityProvider />'));
    const stytchClient = StytchB2BContext.useStytchB2BClient();
    const { member } = StytchB2BContext.useStytchMember();
    const containerEl = React.useRef(null);
    useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        if (!StytchB2BContext.isUIClient(stytchClient)) {
            throw Error(StytchSSRProxy.noHeadlessClientError);
        }
        if (!containerEl.current) {
            return;
        }
        if (!containerEl.current.id) {
            const randId = Math.floor(Math.random() * 1e6);
            containerEl.current.id = `stytch-b2b-idp-${randId}`;
        }
        stytchClient.mountIdentityProvider({
            callbacks,
            elementId: `#${containerEl.current.id}`,
            styles,
            getIDPConsentManifest,
        });
    }, [stytchClient, styles, callbacks, member, getIDPConsentManifest]);
    return React__default["default"].createElement("div", { ref: containerEl });
};

/**
 * Returns the active Member.
 * The Stytch SDKs are used for client-side authentication and session management.
 * Check the isInitialized property to determine if the SDK has completed initialization.
 * Check the fromCache property to determine if the member data is from persistent storage.
 * @example
 * const {member, isInitialized, fromCache} = useStytchMember();
 * if (!isInitialized) {
 *     return <p>Loading...</p>;
 * }
 * return (<h1>Welcome, {member.name}</h1>);
 */
const useStytchMember = StytchB2BContext.useStytchMember;
/**
 * Returns the active member's Stytch member session.
 * The Stytch SDKs are used for client-side authentication and session management.
 * Check the isInitialized property to determine if the SDK has completed initialization.
 * Check the fromCache property to determine if the session data is from persistent storage.
 * @example
 * const {session, isInitialized, fromCache} = useStytchMemberSession();
 * useEffect(() => {
 *   if (!isInitialized) {
 *     return;
 *   }
 *   if (!session) {
 *     router.replace('/login')
 *   }
 * }, [session, isInitialized]);
 */
const useStytchMemberSession = StytchB2BContext.useStytchMemberSession;
/**
 * Returns the active Stytch organization.
 * The Stytch SDKs are used for client-side authentication and session management.
 * Check the isInitialized property to determine if the SDK has completed initialization.
 * Check the fromCache property to determine if the organization data is from persistent storage.
 * @example
 * const {organization, isInitialized, fromCache} = useStytchOrganization();
 * if (!isInitialized) {
 *     return <p>Loading...</p>;
 * }
 * return (<p>Welcome to {organization.organization_name}</p>);
 */
const useStytchOrganization = StytchB2BContext.useStytchOrganization;
/**
 * Determines whether the logged-in member is allowed to perform the specified action on the specified resource.
 * Returns `true` if the member can perform the action, `false` otherwise.
 *
 * If the member is not logged in, this method will always return false.
 * If the resource or action provided are not valid for the configured RBAC policy, this method will return false.
 *
 * Remember - authorization checks for sensitive actions should always occur on the backend as well.
 * @example
 * const { isAuthorized } = useStytchIsAuthorized<Permissions>('documents', 'edit');
 * return <button disabled={!isAuthorized}>Edit</button>
 */
const useStytchIsAuthorized = StytchB2BContext.useStytchIsAuthorized;
const withStytchMember = StytchB2BContext.withStytchMember;
const withStytchMemberSession = StytchB2BContext.withStytchMemberSession;
const withStytchOrganization = StytchB2BContext.withStytchOrganization;
/**
 * The Stytch Context Provider.
 * Wrap your application with this component in order to use Stytch everywhere in your app.
 * @example
 * const stytch = createStytchB2BHeadlessClient('public-token-<find yours in the stytch dashboard>')
 *
 * ReactDOM.render(
 *   <StytchB2BProvider stytch={stytch}>
 *     <App />
 *   </StytchProvider>,
 *   document.getElementById('root'),
 * )
 */
const StytchB2BProvider = ({ stytch, children, assumeHydrated = true, }) => {
    return (React__default["default"].createElement(StytchB2BContext.StytchB2BProvider, { stytch: stytch, assumeHydrated: assumeHydrated }, children));
};

exports.useStytchB2BClient = StytchB2BContext.useStytchB2BClient;
exports.withStytchB2BClient = StytchB2BContext.withStytchB2BClient;
exports.withStytchPermissions = StytchB2BContext.withStytchPermissions;
exports.B2BIdentityProvider = B2BIdentityProvider;
exports.StytchB2B = StytchB2B;
exports.StytchB2BProvider = StytchB2BProvider;
exports.useStytchIsAuthorized = useStytchIsAuthorized;
exports.useStytchMember = useStytchMember;
exports.useStytchMemberSession = useStytchMemberSession;
exports.useStytchOrganization = useStytchOrganization;
exports.withStytchMember = withStytchMember;
exports.withStytchMemberSession = withStytchMemberSession;
exports.withStytchOrganization = withStytchOrganization;
