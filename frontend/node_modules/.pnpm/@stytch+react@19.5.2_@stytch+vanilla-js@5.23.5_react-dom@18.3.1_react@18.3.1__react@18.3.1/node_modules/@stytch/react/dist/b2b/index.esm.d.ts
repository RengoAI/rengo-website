/// <reference types="react" />
import React from "react";
import { ReactNode } from "react";
import { Member, MemberSession, Organization, StytchB2BUIClient, IDPConsentScreenManifest } from "@stytch/vanilla-js/b2b";
import { StytchB2BHeadlessClient, StytchProjectConfigurationInput } from "@stytch/vanilla-js/b2b/headless";
import { Callbacks, StyleConfig, StytchB2BUIConfig } from "@stytch/vanilla-js";
import { StytchProjectConfigurationInput as StytchProjectConfigurationInput$0 } from "@stytch/vanilla-js";
interface StytchB2BProps<TProjectConfiguration extends StytchProjectConfigurationInput$0 = Stytch.DefaultProjectConfiguration> {
    /**
     * An optional {@link StyleConfig} to customize the look and feel of the screen.
     *
     * @example
     * {
     *    fontFamily: 'Arial, Helvetica, sans-serif',
     *    width: '360px',
     *    primaryColor: '#19303D',
     * }
     */
    styles?: StyleConfig;
    /**
     * An optional {@link Callbacks} object.
     *
     * @example
     * {
     *   onError: ({message}) => {
     *      console.error('Stytch error', message)
     *   }
     * }
     *
     * @example
     * {
     *   onEvent: ({type, data}) => {
     *     if(type === StytchEventType.B2BMagicLinkAuthenticate) {
     *       console.log('Logged in with', data);
     *     }
     *   }
     * }
     */
    callbacks?: Callbacks<TProjectConfiguration>;
    /**
     * A {@link StytchB2BUIConfig} object. Add products and product-specific config to this object to change the login methods shown.
     *
     *
     * @example
     * {
     *   products: ['emailMagicLinks'],
     *   authFlowType: "Discovery",
     *   emailMagicLinksOptions: {
     *     discoveryRedirectURL: 'https://example.com/authenticate',
     *   },
     *   sessionOptions: {
     *     sessionDurationMinutes: 60,
     *   },
     * }
     *
     * @example
     * {
     *   products: ['emailMagicLinks', 'sso'],
     *   authFlowType: "Organization",
     *   emailMagicLinksOptions: {
     *     loginRedirectURL: 'https://example.com/authenticate',
     *     signupRedirectURL: 'https://example.com/authenticate',
     *   },
     *   ssoOptions: {
     *     loginRedirectURL: 'https://example.com/authenticate',
     *     signupRedirectURL: 'https://example.com/authenticate',
     *   },
     *   sessionOptions: {
     *     sessionDurationMinutes: 60,
     *   },
     * }
     */
    config: StytchB2BUIConfig;
}
type B2BIDPConsentManifestGenerator = (input: {
    scopes: string[];
    clientName: string;
}) => IDPConsentScreenManifest;
type B2BIdentityProviderProps = Omit<StytchB2BProps, "config"> & {
    /**
     * Optional {@link B2BIDPConsentManifestGenerator} to customize the consent screen.
     */
    getIDPConsentManifest?: B2BIDPConsentManifestGenerator;
};
/**
 * The Stytch B2B UI component.
 * This component can only be used with a Stytch B2B UI Client
 * passed into the StytchB2BProvider.
 *
 * See the {@link https://stytch.com/docs/b2b/sdks online reference}
 *
 * @example
 * <StytchB2B
 *   config={{
 *     authFlowType: "Organization",
 *     emailMagicLinksOptions: {
 *       loginRedirectURL: 'https://example.com/authenticate',
 *       signupRedirectURL: 'https://example.com/authenticate',
 *     },
 *     ssoOptions: {
 *       loginRedirectURL: 'https://example.com/authenticate',
 *       signupRedirectURL: 'https://example.com/authenticate',
 *     },
 *     sessionOptions: {
 *       sessionDurationMinutes: 60,
 *     }
 *   }}
 *   styles={{
 *     fontFamily: '"Helvetica New", Helvetica, sans-serif',
 *     primaryColor: '#0577CA',
 *     width: '321px',
 *   }}
 *   callbacks={{
 *     onEvent: (event) => console.log(event)
 *   }}
 * />
 */
declare const StytchB2B: <TProjectConfiguration extends Partial<import("@stytch/core/public").StytchProjectConfiguration> = Stytch.DefaultProjectConfiguration>({ styles, callbacks, config }: StytchB2BProps<TProjectConfiguration>) => React.JSX.Element;
/**
 * The Stytch B2B IDP component.
 * Parses OAuth Authorization params (client_id, scope, nonce, etc.) out of the page URL.
 * Requires the user to be logged in.
 * This component can only be used with a Stytch B2B UI Client
 * passed into the StytchB2BProvider.
 *
 * See the {@link https://stytch.com/docs/b2b/sdks online reference}
 *
 * @example
 * const styles = {
 *   container: {
 *     backgroundColor: '#e11e1e',
 *   },
 *   colors: {
 *     primary: '#ff00f7',
 *     secondary: '#5C727D',
 *   },
 * }
 *
 * <B2BIdentityProvider
 *   styles={styles}
 *   callbacks={{
 *     onEvent: (event) => console.log(event)
 *   }}
 * />
 */
declare const B2BIdentityProvider: ({ styles, callbacks, getIDPConsentManifest }: B2BIdentityProviderProps) => React.JSX.Element;
/**
 * The Stytch Client object passed in to <StytchB2BProvider /> in your application root.
 * Either a StytchB2BUIClient or StytchB2BHeadlessClient.
 */
type StytchB2BClient<TProjectConfiguration extends StytchProjectConfigurationInput> = StytchB2BHeadlessClient<TProjectConfiguration> | StytchB2BUIClient<TProjectConfiguration>;
/**
 * Returns the active Member.
 * The Stytch SDKs are used for client-side authentication and session management.
 * Check the isInitialized property to determine if the SDK has completed initialization.
 * Check the fromCache property to determine if the member data is from persistent storage.
 * @example
 * const {member, isInitialized, fromCache} = useStytchMember();
 * if (!isInitialized) {
 *     return <p>Loading...</p>;
 * }
 * return (<h1>Welcome, {member.name}</h1>);
 */
declare const useStytchMember: <TAssumeHydrated extends boolean = true>() => TAssumeHydrated extends true ? {
    member: Member | null;
    fromCache: boolean;
    isInitialized: true;
} : {
    member: null;
    fromCache: false;
    isInitialized: false;
} | {
    member: Member | null;
    fromCache: boolean;
    isInitialized: true;
};
/**
 * Returns the active member's Stytch member session.
 * The Stytch SDKs are used for client-side authentication and session management.
 * Check the isInitialized property to determine if the SDK has completed initialization.
 * Check the fromCache property to determine if the session data is from persistent storage.
 * @example
 * const {session, isInitialized, fromCache} = useStytchMemberSession();
 * useEffect(() => {
 *   if (!isInitialized) {
 *     return;
 *   }
 *   if (!session) {
 *     router.replace('/login')
 *   }
 * }, [session, isInitialized]);
 */
declare const useStytchMemberSession: <TAssumeHydrated extends boolean = true>() => TAssumeHydrated extends true ? {
    session: MemberSession | null;
    fromCache: boolean;
    isInitialized: true;
} : {
    session: null;
    fromCache: false;
    isInitialized: false;
} | {
    session: MemberSession | null;
    fromCache: boolean;
    isInitialized: true;
};
/**
 * Returns the active Stytch organization.
 * The Stytch SDKs are used for client-side authentication and session management.
 * Check the isInitialized property to determine if the SDK has completed initialization.
 * Check the fromCache property to determine if the organization data is from persistent storage.
 * @example
 * const {organization, isInitialized, fromCache} = useStytchOrganization();
 * if (!isInitialized) {
 *     return <p>Loading...</p>;
 * }
 * return (<p>Welcome to {organization.organization_name}</p>);
 */
declare const useStytchOrganization: <TAssumeHydrated extends boolean = true>() => TAssumeHydrated extends true ? {
    organization: Organization | null;
    fromCache: boolean;
    isInitialized: true;
} : {
    organization: null;
    fromCache: false;
    isInitialized: false;
} | {
    organization: Organization | null;
    fromCache: boolean;
    isInitialized: true;
};
/**
 * Determines whether the logged-in member is allowed to perform the specified action on the specified resource.
 * Returns `true` if the member can perform the action, `false` otherwise.
 *
 * If the member is not logged in, this method will always return false.
 * If the resource or action provided are not valid for the configured RBAC policy, this method will return false.
 *
 * Remember - authorization checks for sensitive actions should always occur on the backend as well.
 * @example
 * const { isAuthorized } = useStytchIsAuthorized<Permissions>('documents', 'edit');
 * return <button disabled={!isAuthorized}>Edit</button>
 */
declare const useStytchIsAuthorized: <TAssumeHydrated extends boolean = false>(resourceId: string, action: string) => TAssumeHydrated extends true ? {
    isAuthorized: boolean;
    fromCache: boolean;
    isInitialized: boolean;
} : {
    isAuthorized: false;
    fromCache: false;
    isInitialized: false;
} | {
    isAuthorized: boolean;
    fromCache: boolean;
    isInitialized: boolean;
};
declare const withStytchMember: <T extends object, TAssumeHydrated extends boolean = false>(Component: React.ComponentType<T & {
    stytchMember: Member | null;
    stytchMemberIsInitialized: boolean;
    stytchMemberIsFromCache: boolean;
}>) => React.ComponentType<T>;
declare const withStytchMemberSession: <T extends object, TAssumeHydrated extends boolean = false>(Component: React.ComponentType<T & {
    stytchMemberSession: MemberSession | null;
    stytchMemberSessionIsInitialized: boolean;
    stytchMemberSessionIsFromCache: boolean;
}>) => React.ComponentType<T>;
declare const withStytchOrganization: <T extends object, TAssumeHydrated extends boolean = false>(Component: React.ComponentType<T & {
    stytchOrganization: Organization | null;
    stytchOrganizationIsInitialized: boolean;
    stytchOrganizationIsFromCache: boolean;
}>) => React.ComponentType<T>;
interface StytchB2BProviderProps<TProjectConfiguration extends StytchProjectConfigurationInput = Stytch.DefaultProjectConfiguration> {
    /**
     * A Stytch client instance, either a {@link StytchB2BUIClient} or {@link StytchB2BHeadlessClient}
     */
    stytch: StytchB2BClient<TProjectConfiguration>;
    /**
     * When true, the provider will assume that the component will only be
     * rendered in a browser environment, either in a single-page application or
     * after completing hydration of a server-rendered application. This allows
     * cached values to be retrieved from the browser on the first render, meaning
     * that the `isInitialized` value returned from Stytch hooks will be `true`
     * starting from the first render.
     *
     * When `false`, the provider will defer initialization until after the first
     * render, and `isInitialized` will initially be `false`.
     *
     * If you encounter hydration errors relating to the use of this component,
     * set this to `false`.
     *
     * This value defaults to `true` in `@stytch/react`.
     */
    assumeHydrated?: boolean;
    children?: ReactNode;
}
/**
 * The Stytch Context Provider.
 * Wrap your application with this component in order to use Stytch everywhere in your app.
 * @example
 * const stytch = createStytchB2BHeadlessClient('public-token-<find yours in the stytch dashboard>')
 *
 * ReactDOM.render(
 *   <StytchB2BProvider stytch={stytch}>
 *     <App />
 *   </StytchProvider>,
 *   document.getElementById('root'),
 * )
 */
declare const StytchB2BProvider: <TProjectConfiguration extends Partial<import("@stytch/core/public").StytchProjectConfiguration> = Stytch.DefaultProjectConfiguration>({ stytch, children, assumeHydrated }: StytchB2BProviderProps<TProjectConfiguration>) => JSX.Element;
export { useStytchB2BClient, withStytchB2BClient, withStytchPermissions } from "../StytchB2BContext-4afdf6a8.js";
export { StytchB2BProvider, useStytchMemberSession, useStytchMember, useStytchIsAuthorized, useStytchOrganization, withStytchMemberSession, withStytchMember, withStytchOrganization, StytchB2B, B2BIdentityProvider };
export type { StytchB2BProviderProps, StytchB2BProps, B2BIdentityProviderProps };
