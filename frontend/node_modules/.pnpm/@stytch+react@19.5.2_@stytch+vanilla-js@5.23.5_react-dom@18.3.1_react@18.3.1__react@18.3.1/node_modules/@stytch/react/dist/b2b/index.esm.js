import React, { useRef } from 'react';
import { u as useIsMounted__INTERNAL, a as useStytchB2BClient, i as isUIClient, b as useStytchMember$1, c as useStytchMemberSession$1, d as useStytchOrganization$1, e as useStytchIsAuthorized$1, w as withStytchMember$1, f as withStytchMemberSession$1, g as withStytchOrganization$1, S as StytchB2BProvider$1 } from '../StytchB2BContext-4afdf6a8.js';
export { a as useStytchB2BClient, h as withStytchB2BClient, j as withStytchPermissions } from '../StytchB2BContext-4afdf6a8.js';
import { i as invariant, a as useIsomorphicLayoutEffect } from '../useIsomorphicLayoutEffect-681e2138.js';
import { a as noHeadlessClientError, n as noProviderError } from '../StytchSSRProxy-34c789b5.js';

/**
 * The Stytch B2B UI component.
 * This component can only be used with a Stytch B2B UI Client
 * passed into the StytchB2BProvider.
 *
 * See the {@link https://stytch.com/docs/b2b/sdks online reference}
 *
 * @example
 * <StytchB2B
 *   config={{
 *     authFlowType: "Organization",
 *     emailMagicLinksOptions: {
 *       loginRedirectURL: 'https://example.com/authenticate',
 *       signupRedirectURL: 'https://example.com/authenticate',
 *     },
 *     ssoOptions: {
 *       loginRedirectURL: 'https://example.com/authenticate',
 *       signupRedirectURL: 'https://example.com/authenticate',
 *     },
 *     sessionOptions: {
 *       sessionDurationMinutes: 60,
 *     }
 *   }}
 *   styles={{
 *     fontFamily: '"Helvetica New", Helvetica, sans-serif',
 *     primaryColor: '#0577CA',
 *     width: '321px',
 *   }}
 *   callbacks={{
 *     onEvent: (event) => console.log(event)
 *   }}
 * />
 */
const StytchB2B = ({ styles, callbacks, config, }) => {
    invariant(useIsMounted__INTERNAL(), noProviderError('<StytchB2B />', 'StytchB2BProvider'));
    const stytchClient = useStytchB2BClient();
    const containerEl = useRef(null);
    useIsomorphicLayoutEffect(() => {
        if (!isUIClient(stytchClient)) {
            throw Error(noHeadlessClientError);
        }
        if (!containerEl.current) {
            return;
        }
        if (!containerEl.current.id) {
            const randId = Math.floor(Math.random() * 1e6);
            containerEl.current.id = `stytch-b2b-ui-${randId}`;
        }
        stytchClient.mount({
            callbacks,
            config,
            elementId: `#${containerEl.current.id}`,
            styles,
        });
        // eslint-disable-next-line react-hooks/exhaustive-deps -- SDK-1354
    }, [stytchClient, styles, callbacks]);
    return React.createElement("div", { ref: containerEl });
};
/**
 * The Stytch B2B IDP component.
 * Parses OAuth Authorization params (client_id, scope, nonce, etc.) out of the page URL.
 * Requires the user to be logged in.
 * This component can only be used with a Stytch B2B UI Client
 * passed into the StytchB2BProvider.
 *
 * See the {@link https://stytch.com/docs/b2b/sdks online reference}
 *
 * @example
 * const styles = {
 *   container: {
 *     backgroundColor: '#e11e1e',
 *   },
 *   colors: {
 *     primary: '#ff00f7',
 *     secondary: '#5C727D',
 *   },
 * }
 *
 * <B2BIdentityProvider
 *   styles={styles}
 *   callbacks={{
 *     onEvent: (event) => console.log(event)
 *   }}
 * />
 */
const B2BIdentityProvider = ({ styles, callbacks, getIDPConsentManifest }) => {
    invariant(useIsMounted__INTERNAL(), noProviderError('<IdentityProvider />'));
    const stytchClient = useStytchB2BClient();
    const { member } = useStytchMember$1();
    const containerEl = useRef(null);
    useIsomorphicLayoutEffect(() => {
        if (!isUIClient(stytchClient)) {
            throw Error(noHeadlessClientError);
        }
        if (!containerEl.current) {
            return;
        }
        if (!containerEl.current.id) {
            const randId = Math.floor(Math.random() * 1e6);
            containerEl.current.id = `stytch-b2b-idp-${randId}`;
        }
        stytchClient.mountIdentityProvider({
            callbacks,
            elementId: `#${containerEl.current.id}`,
            styles,
            getIDPConsentManifest,
        });
    }, [stytchClient, styles, callbacks, member, getIDPConsentManifest]);
    return React.createElement("div", { ref: containerEl });
};

/**
 * Returns the active Member.
 * The Stytch SDKs are used for client-side authentication and session management.
 * Check the isInitialized property to determine if the SDK has completed initialization.
 * Check the fromCache property to determine if the member data is from persistent storage.
 * @example
 * const {member, isInitialized, fromCache} = useStytchMember();
 * if (!isInitialized) {
 *     return <p>Loading...</p>;
 * }
 * return (<h1>Welcome, {member.name}</h1>);
 */
const useStytchMember = useStytchMember$1;
/**
 * Returns the active member's Stytch member session.
 * The Stytch SDKs are used for client-side authentication and session management.
 * Check the isInitialized property to determine if the SDK has completed initialization.
 * Check the fromCache property to determine if the session data is from persistent storage.
 * @example
 * const {session, isInitialized, fromCache} = useStytchMemberSession();
 * useEffect(() => {
 *   if (!isInitialized) {
 *     return;
 *   }
 *   if (!session) {
 *     router.replace('/login')
 *   }
 * }, [session, isInitialized]);
 */
const useStytchMemberSession = useStytchMemberSession$1;
/**
 * Returns the active Stytch organization.
 * The Stytch SDKs are used for client-side authentication and session management.
 * Check the isInitialized property to determine if the SDK has completed initialization.
 * Check the fromCache property to determine if the organization data is from persistent storage.
 * @example
 * const {organization, isInitialized, fromCache} = useStytchOrganization();
 * if (!isInitialized) {
 *     return <p>Loading...</p>;
 * }
 * return (<p>Welcome to {organization.organization_name}</p>);
 */
const useStytchOrganization = useStytchOrganization$1;
/**
 * Determines whether the logged-in member is allowed to perform the specified action on the specified resource.
 * Returns `true` if the member can perform the action, `false` otherwise.
 *
 * If the member is not logged in, this method will always return false.
 * If the resource or action provided are not valid for the configured RBAC policy, this method will return false.
 *
 * Remember - authorization checks for sensitive actions should always occur on the backend as well.
 * @example
 * const { isAuthorized } = useStytchIsAuthorized<Permissions>('documents', 'edit');
 * return <button disabled={!isAuthorized}>Edit</button>
 */
const useStytchIsAuthorized = useStytchIsAuthorized$1;
const withStytchMember = withStytchMember$1;
const withStytchMemberSession = withStytchMemberSession$1;
const withStytchOrganization = withStytchOrganization$1;
/**
 * The Stytch Context Provider.
 * Wrap your application with this component in order to use Stytch everywhere in your app.
 * @example
 * const stytch = createStytchB2BHeadlessClient('public-token-<find yours in the stytch dashboard>')
 *
 * ReactDOM.render(
 *   <StytchB2BProvider stytch={stytch}>
 *     <App />
 *   </StytchProvider>,
 *   document.getElementById('root'),
 * )
 */
const StytchB2BProvider = ({ stytch, children, assumeHydrated = true, }) => {
    return (React.createElement(StytchB2BProvider$1, { stytch: stytch, assumeHydrated: assumeHydrated }, children));
};

export { B2BIdentityProvider, StytchB2B, StytchB2BProvider, useStytchIsAuthorized, useStytchMember, useStytchMemberSession, useStytchOrganization, withStytchMember, withStytchMemberSession, withStytchOrganization };
