/// <reference types="react" />
import React from "react";
import { ReactNode } from "react";
import { StytchProjectConfigurationInput, StytchUIClient, Callbacks, StytchLoginConfig, StyleConfig } from "@stytch/vanilla-js";
import { StytchHeadlessClient } from "@stytch/vanilla-js/headless";
import { Session as Session$0 } from "@stytch/vanilla-js/headless";
import { User as User$0 } from "@stytch/vanilla-js/headless";
/**
 * The Stytch Client object passed in to <StytchProvider /> in your application root.
 * Either a StytchUIClient or StytchHeadlessClient.
 */
type StytchClient<TProjectConfiguration extends StytchProjectConfigurationInput> = StytchUIClient<TProjectConfiguration> | StytchHeadlessClient<TProjectConfiguration>;
/**
 * Returns the Stytch client stored in the Stytch context.
 *
 * @example
 * const stytch = useStytch();
 * useEffect(() => {
 *   stytch.magicLinks.authenticate('...')
 * }, [stytch]);
 */
declare const useStytch: <TProjectConfiguration extends Partial<import("@stytch/core/public").StytchProjectConfiguration> = Stytch.DefaultProjectConfiguration>() => StytchClient<TProjectConfiguration>;
declare const withStytch: <T extends object, TProjectConfiguration extends Partial<import("@stytch/core/public").StytchProjectConfiguration> = Stytch.DefaultProjectConfiguration>(Component: React.ComponentType<T & {
    stytch: StytchClient<TProjectConfiguration>;
}>) => React.ComponentType<T>;
interface StytchProps<TProjectConfiguration extends StytchProjectConfigurationInput = Stytch.DefaultProjectConfiguration> {
    /**
     * A {@link StytchLoginConfig} object. Add products and product-specific config to this object to change the login methods shown.
     *
     * @example
     * {
     *   products: ['crypto', 'otps']
     * }
     *
     * @example
     * {
     *   products: ['emailMagicLinks'>]
     *   emailMagicLinksOptions: {
     *     loginRedirectURL: 'https://example.com/authenticate',
     *     signupRedirectURL: 'https://example.com/authenticate',
     *   }
     * }
     *
     * @example
     * {
     *   products: ['oauth'>]
     *   oauthOptions: {
     *   providers: [
     *       { type: 'google', one_tap: true, position: 'embedded' },
     *       { type: 'microsoft' },
     *       { type: 'apple' },
     *       { type: 'facebook' },
     *     ],
     *   }
     * }
     */
    config: StytchLoginConfig;
    /**
     * An optional {@link StyleConfig} to customize the look and feel of the screen.
     *
     * @example
     * {
     *    fontFamily: 'Arial, Helvetica, sans-serif',
     *    width: '360px',
     *    primaryColor: '#19303D',
     * }
     */
    styles?: StyleConfig;
    /**
     * An optional {@link Callbacks} object.
     *
     * @example
     * {
     *   onError: ({message}) => {
     *      console.error('Stytch login screen error', message)
     *   }
     * }
     *
     * @example
     * {
     *   onEvent: ({type, data}) => {
     *     if(type === StytchEventType.CryptoWalletAuthenticate) {
     *       console.log('Logged in with crypto wallet', data);
     *     }
     *   }
     * }
     */
    callbacks?: Callbacks<TProjectConfiguration>;
}
/**
 * The Stytch Login Screen component.
 * This component can only be used with a Stytch UI Client
 * passed into the StytchProvider.
 *
 * See the {@link https://stytch.com/docs/sdks online reference}
 *
 * @example
 * <StytchLogin
 *   config={{
 *     products: ['emailMagicLinks', 'oauth'],
 *     emailMagicLinksOptions: {
 *       loginRedirectURL: 'https://example.com/authenticate',
 *       signupRedirectURL: 'https://example.com/authenticate',
 *     },
 *     oauthOptions: {
 *      providers: [{ type: OAuthProviders.Google }, { type: OAuthProviders.Microsoft }],
 *    },
 *   }}
 *   styles={{
 *     fontFamily: '"Helvetica New", Helvetica, sans-serif',
 *     primaryColor: '#0577CA',
 *     width: '321px',
 *   }}
 *   callbacks={{
 *     onEvent: (event) => console.log(event)
 *   }}
 * />
 */
declare const StytchLogin: <TProjectConfiguration extends Partial<import("@stytch/core/public").StytchProjectConfiguration> = Stytch.DefaultProjectConfiguration>({ config, styles, callbacks }: StytchProps<TProjectConfiguration>) => React.JSX.Element;
interface StytchResetPasswordProps<TProjectConfiguration extends StytchProjectConfigurationInput = Stytch.DefaultProjectConfiguration> extends StytchProps<TProjectConfiguration> {
    /**
     * A Stytch password reset token.
     */
    passwordResetToken: string;
}
type IdentityProviderProps = Omit<StytchProps, "config">;
/**
 * The Stytch Reset Password component.
 * This component can only be used with a Stytch UI Client
 * passed into the StytchProvider.
 *
 * See the {@link https://stytch.com/docs/sdks online reference}
 *
 * @example
 * <StytchPasswordReset
 *   config={{
 *     products: ['emailMagicLinks', 'oauth'],
 *     emailMagicLinksOptions: {
 *       loginRedirectURL: 'https://example.com/authenticate',
 *       signupRedirectURL: 'https://example.com/authenticate',
 *     },
 *     oauthOptions: {
 *      providers: [{ type: OAuthProviders.Google }, { type: OAuthProviders.Microsoft }],
 *    },
 *   }}
 *   passwordResetToken="PvC5UudZ7TPZbELt95yXAQ-8MeEUCRob8bUQ-g52fIJs"
 *   styles={{
 *     fontFamily: '"Helvetica New", Helvetica, sans-serif',
 *     primaryColor: '#0577CA',
 *     width: '321px',
 *   }}
 *   callbacks={{
 *     onEvent: (event) => console.log(event)
 *   }}
 * />
 */
declare const StytchPasswordReset: <TProjectConfiguration extends Partial<import("@stytch/core/public").StytchProjectConfiguration> = Stytch.DefaultProjectConfiguration>({ config, styles, callbacks, passwordResetToken }: StytchResetPasswordProps<TProjectConfiguration>) => React.JSX.Element;
/**
 * The Stytch Passkey Registration component.
 * This component can only be used with a Stytch UI Client
 * passed into the StytchProvider.
 *
 * See the {@link https://stytch.com/docs/sdks online reference}
 *
 * @example
 * const styles = {
 *     container: {
 *       backgroundColor: '#e11e1e',
 *     },
 *     colors: {
 *       primary: '#ff00f7',
 *       secondary: '#5C727D',
 *     },
 *    }
 *
 * <StytchPasskeyRegistration
 *   styles={styles}
 *   callbacks={{
 *     onEvent: (event) => console.log(event)
 *   }}
 * />
 */
declare const StytchPasskeyRegistration: <TProjectConfiguration extends Partial<import("@stytch/core/public").StytchProjectConfiguration> = Stytch.DefaultProjectConfiguration>({ config, styles, callbacks }: StytchProps<TProjectConfiguration>) => React.JSX.Element;
/**
 * The Stytch IDP component.
 * Parses OAuth Authorization params (client_id, scope, nonce, etc.) out of the page URL.
 * Requires the user to be logged in.
 * This component can only be used with a Stytch UI Client
 * passed into the StytchProvider.
 *
 * See the {@link https://stytch.com/docs/sdks online reference}
 *
 * @example
 * const styles = {
 *   container: {
 *     backgroundColor: '#e11e1e',
 *   },
 *   colors: {
 *     primary: '#ff00f7',
 *     secondary: '#5C727D',
 *   },
 * }
 *
 * <IdentityProvider
 *   styles={styles}
 *   callbacks={{
 *     onEvent: (event) => console.log(event)
 *   }}
 * />
 */
declare const IdentityProvider: ({ styles, callbacks }: IdentityProviderProps) => React.JSX.Element;
/**
 * Returns the active User.
 * The Stytch SDKs are used for client-side authentication and session management.
 * Check the isInitialized property to determine if the SDK has completed initialization.
 * Check the fromCache property to determine if the user data is from persistent storage.
 * @example
 * const {user, isInitialized, fromCache} = useStytchUser();
 * if (!isInitialized) {
 *     return <p>Loading...</p>;
 * }
 * return (<h1>Welcome, {user.name.first_name}</h1>);
 */
declare const useStytchUser$0: <TAssumeHydrated extends boolean = true>() => TAssumeHydrated extends true ? {
    user: User$0 | null;
    fromCache: boolean;
    isInitialized: true;
} : {
    user: null;
    fromCache: false;
    isInitialized: false;
} | {
    user: User$0 | null;
    fromCache: boolean;
    isInitialized: true;
};
/**
 * Returns the active user's Stytch session.
 * The Stytch SDKs are used for client-side authentication and session management.
 * Check the isInitialized property to determine if the SDK has completed initialization.
 * Check the fromCache property to determine if the session data is from persistent storage.
 * @example
 * const {session, isInitialized, fromCache} = useStytchSession();
 * useEffect(() => {
 *   if (!isInitialized) {
 *     return;
 *   }
 *   if (!session) {
 *     router.replace('/login')
 *   }
 * }, [session, isInitialized]);
 */
declare const useStytchSession$0: <TAssumeHydrated extends boolean = true>() => TAssumeHydrated extends true ? {
    session: Session$0 | null;
    fromCache: boolean;
    isInitialized: true;
} : {
    session: null;
    fromCache: false;
    isInitialized: false;
} | {
    session: Session$0 | null;
    fromCache: boolean;
    isInitialized: true;
};
declare const withStytchUser$0: <T extends object, TAssumeHydrated extends boolean = true>(Component: React.ComponentType<T & {
    stytchUser: User$0 | null;
    stytchUserIsInitialized: boolean;
    stytchUserIsFromCache: boolean;
}>) => React.ComponentType<T>;
declare const withStytchSession$0: <T extends object, TAssumeHydrated extends boolean = true>(Component: React.ComponentType<T & {
    stytchSession: Session$0 | null;
    stytchSessionIsInitialized: boolean;
    stytchSessionIsFromCache: boolean;
}>) => React.ComponentType<T>;
/**
 * The Stytch Client object passed in to <StytchProvider /> in your application root.
 * Either a StytchUIClient or StytchHeadlessClient.
 */
type StytchClient$0<TProjectConfiguration extends StytchProjectConfigurationInput> = StytchUIClient<TProjectConfiguration> | StytchHeadlessClient<TProjectConfiguration>;
interface StytchProviderProps$0<TProjectConfiguration extends StytchProjectConfigurationInput = Stytch.DefaultProjectConfiguration> {
    /**
     * A Stytch client instance, either a {@link StytchUIClient} or {@link StytchHeadlessClient}
     */
    stytch: StytchClient$0<TProjectConfiguration>;
    /**
     * When true, the provider will assume that the component will only be
     * rendered in a browser environment, either in a single-page application or
     * after completing hydration of a server-rendered application. This allows
     * cached values to be retrieved from the browser on the first render, meaning
     * that the `isInitialized` value returned from Stytch hooks will be `true`
     * starting from the first render.
     *
     * When `false`, the provider will defer initialization until after the first
     * render, and `isInitialized` will initially be `false`.
     *
     * If you encounter hydration errors relating to the use of this component,
     * set this to `false`.
     *
     * This value defaults to `true` in `@stytch/react`.
     */
    assumeHydrated?: boolean;
    children?: ReactNode;
}
/**
 * The Stytch Context Provider.
 * Wrap your application with this component in order to use Stytch everywhere in your app.
 * @example
 * const stytch = createStytchHeadlessClient('public-token-<find yours in the stytch dashboard>')
 *
 * ReactDOM.render(
 *   <StytchProvider stytch={stytch}>
 *     <App />
 *   </StytchProvider>,
 *   document.getElementById('root'),
 * )
 */
declare const StytchProvider$0: <TProjectConfiguration extends Partial<import("@stytch/core/public").StytchProjectConfiguration> = Stytch.DefaultProjectConfiguration>({ stytch, children, assumeHydrated }: StytchProviderProps$0<TProjectConfiguration>) => JSX.Element;
export { StytchLogin, StytchPasswordReset, StytchPasskeyRegistration, IdentityProvider, StytchProvider$0 as StytchProvider, useStytch, useStytchSession$0 as useStytchSession, useStytchUser$0 as useStytchUser, withStytch, withStytchSession$0 as withStytchSession, withStytchUser$0 as withStytchUser };
export type { StytchProviderProps$0 as StytchProviderProps, StytchProps, StytchResetPasswordProps, IdentityProviderProps };
