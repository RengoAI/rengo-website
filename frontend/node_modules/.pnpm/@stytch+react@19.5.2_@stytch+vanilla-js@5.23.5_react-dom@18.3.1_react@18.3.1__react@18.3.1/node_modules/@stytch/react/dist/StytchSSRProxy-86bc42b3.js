'use strict';

const noProviderError = (item, provider = 'StytchProvider') => `${item} can only be used inside <${provider}>.`;
const providerMustBeUniqueError = 'You cannot render a <StytchProvider> inside another <StytchProvider>.';
const noHeadlessClientError = `Tried to create a Stytch Login UI element using the Stytch Headless SDK.
You must use the UI SDK to use UI elements.
Please make sure you are using a Stytch UI client, not a Stytch Headless client.`;
const cannotInvokeMethodOnServerError = (path) => `[Stytch] Invalid serverside function call to ${path}.
The Stytch Javascript SDK is intended to ony be used on the client side.
Make sure to wrap your API calls in a hook to ensure they are executed on the client.
\`\`\`
const myComponent = () => {
  const stytch = useStytch();
  // This will error out on the server.
  stytch.magicLinks.authenticate(...);
  useEffect(() => {
    // This will work well
    stytch.magicLinks.authenticate(...);
  }, []);
}
\`\`\`

If you want to make API calls from server environments, please use the Stytch Node Library
https://www.npmjs.com/package/stytch.
`;

const SSRStubKey = Symbol('__stytch_SSRStubKey');
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const isStytchSSRProxy = (proxy) => {
    return !!proxy[SSRStubKey];
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const createProxy = (path) => {
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    const noop = () => { };
    return new Proxy(noop, {
        get(target, p) {
            if (p === SSRStubKey) {
                return true;
            }
            return createProxy(path + '.' + String(p));
        },
        apply() {
            throw new Error(cannotInvokeMethodOnServerError(path));
        },
    });
};
const createStytchSSRProxy = () => createProxy('stytch');

exports.createStytchSSRProxy = createStytchSSRProxy;
exports.isStytchSSRProxy = isStytchSSRProxy;
exports.noHeadlessClientError = noHeadlessClientError;
exports.noProviderError = noProviderError;
exports.providerMustBeUniqueError = providerMustBeUniqueError;
