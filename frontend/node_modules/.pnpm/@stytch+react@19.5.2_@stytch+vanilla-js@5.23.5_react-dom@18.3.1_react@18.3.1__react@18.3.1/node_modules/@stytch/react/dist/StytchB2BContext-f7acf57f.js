'use strict';

var React = require('react');
var useIsomorphicLayoutEffect = require('./useIsomorphicLayoutEffect-672e4b66.js');
var StytchSSRProxy = require('./StytchSSRProxy-86bc42b3.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const initialMember = {
    member: null,
    fromCache: false,
    isInitialized: false,
};
const initialMemberSession = {
    session: null,
    fromCache: false,
    isInitialized: false,
};
const initialOrganization = {
    organization: null,
    fromCache: false,
    isInitialized: false,
};
const StytchB2BContext = React.createContext({ isMounted: false });
const StytchMemberContext = React.createContext(initialMember);
const StytchMemberSessionContext = React.createContext(initialMemberSession);
const StytchOrganizationContext = React.createContext(initialOrganization);
const useIsMounted__INTERNAL = () => React.useContext(StytchB2BContext).isMounted;
const isUIClient = (client) => {
    return client.mount !== undefined;
};
/**
 * Returns the active Member.
 * The Stytch SDKs are used for client-side authentication and session management.
 * Check the isInitialized property to determine if the SDK has completed initialization.
 * Check the fromCache property to determine if the member data is from persistent storage.
 * @example
 * const {member, isInitialized, fromCache} = useStytchMember();
 * if (!isInitialized) {
 *     return <p>Loading...</p>;
 * }
 * return (<h1>Welcome, {member.name}</h1>);
 */
const useStytchMember = () => {
    useIsomorphicLayoutEffect.invariant(useIsMounted__INTERNAL(), StytchSSRProxy.noProviderError('useStytchMember', 'StytchB2BProvider'));
    return React.useContext(StytchMemberContext);
};
/**
 * Returns the active member's Stytch member session.
 * The Stytch SDKs are used for client-side authentication and session management.
 * Check the isInitialized property to determine if the SDK has completed initialization.
 * Check the fromCache property to determine if the session data is from persistent storage.
 * @example
 * const {session, isInitialized, fromCache} = useStytchMemberSession();
 * useEffect(() => {
 *   if (!isInitialized) {
 *     return;
 *   }
 *   if (!session) {
 *     router.replace('/login')
 *   }
 * }, [session, isInitialized]);
 */
const useStytchMemberSession = () => {
    useIsomorphicLayoutEffect.invariant(useIsMounted__INTERNAL(), StytchSSRProxy.noProviderError('useStytchMemberSession', 'StytchB2BProvider'));
    return React.useContext(StytchMemberSessionContext);
};
/**
 * Returns the active Stytch organization.
 * The Stytch SDKs are used for client-side authentication and session management.
 * Check the isInitialized property to determine if the SDK has completed initialization.
 * Check the fromCache property to determine if the organization data is from persistent storage.
 * @example
 * const {organization, isInitialized, fromCache} = useStytchOrganization();
 * if (!isInitialized) {
 *     return <p>Loading...</p>;
 * }
 * return (<p>Welcome to {organization.organization_name}</p>);
 */
const useStytchOrganization = () => {
    useIsomorphicLayoutEffect.invariant(useIsMounted__INTERNAL(), StytchSSRProxy.noProviderError('useStytchOrganization', 'StytchB2BProvider'));
    return React.useContext(StytchOrganizationContext);
};
/**
 * Determines whether the logged-in member is allowed to perform the specified action on the specified resource.
 * Returns `true` if the member can perform the action, `false` otherwise.
 *
 * If the member is not logged in, this method will always return false.
 * If the resource or action provided are not valid for the configured RBAC policy, this method will return false.
 *
 * Remember - authorization checks for sensitive actions should always occur on the backend as well.
 * @example
 * const { isAuthorized } = useStytchIsAuthorized<Permissions>('documents', 'edit');
 * return <button disabled={!isAuthorized}>Edit</button>
 */
const useStytchIsAuthorized = (resourceId, action) => {
    useIsomorphicLayoutEffect.invariant(useIsMounted__INTERNAL(), StytchSSRProxy.noProviderError('useStytchIsAuthorized', 'StytchB2BProvider'));
    const client = useStytchB2BClient();
    const { session } = useStytchMemberSession();
    const [isAuthorized, setIsAuthorized] = useIsomorphicLayoutEffect.useAsyncState({
        isInitialized: false,
        fromCache: false,
        isAuthorized: false,
    });
    React.useEffect(() => {
        if (StytchSSRProxy.isStytchSSRProxy(client)) {
            return;
        }
        setIsAuthorized({
            isInitialized: true,
            fromCache: true,
            isAuthorized: client.rbac.isAuthorizedSync(resourceId, action),
        });
    }, [action, client, resourceId, setIsAuthorized]);
    React.useEffect(() => {
        if (StytchSSRProxy.isStytchSSRProxy(client)) {
            return;
        }
        client.rbac.isAuthorized(resourceId, action).then((isAuthorized) => {
            setIsAuthorized({ isAuthorized, fromCache: false, isInitialized: true });
        });
    }, [client, session === null || session === void 0 ? void 0 : session.roles, resourceId, action, setIsAuthorized]);
    return isAuthorized;
};
/**
 * Returns the Stytch B2B client stored in the Stytch context.
 *
 * @example
 * const stytch = useStytchB2BClient();
 * useEffect(() => {
 *   stytch.magicLinks.authenticate('...')
 * }, [stytch]);
 */
const useStytchB2BClient = () => {
    const ctx = React.useContext(StytchB2BContext);
    useIsomorphicLayoutEffect.invariant(ctx.isMounted, StytchSSRProxy.noProviderError('useStytchB2BClient', 'StytchB2BProvider'));
    return ctx.client;
};
const withStytchB2BClient = (Component) => {
    const WithStytch = (props) => {
        useIsomorphicLayoutEffect.invariant(useIsMounted__INTERNAL(), StytchSSRProxy.noProviderError('withStytchB2BClient', 'StytchB2BProvider'));
        return React__default["default"].createElement(Component, Object.assign({}, props, { stytch: useStytchB2BClient() }));
    };
    WithStytch.displayName = `withStytch(${Component.displayName || Component.name || 'Component'})`;
    return WithStytch;
};
const withStytchMember = (Component) => {
    const WithStytchUser = (props) => {
        useIsomorphicLayoutEffect.invariant(useIsMounted__INTERNAL(), StytchSSRProxy.noProviderError('withStytchMember', 'StytchB2BProvider'));
        const { member, isInitialized, fromCache } = useStytchMember();
        return (React__default["default"].createElement(Component, Object.assign({}, props, { stytchMember: member, stytchMemberIsInitialized: isInitialized, stytchMemberIsFromCache: fromCache })));
    };
    WithStytchUser.displayName = `withStytchMember(${Component.displayName || Component.name || 'Component'})`;
    return WithStytchUser;
};
const withStytchMemberSession = (Component) => {
    const WithStytchSession = (props) => {
        useIsomorphicLayoutEffect.invariant(useIsMounted__INTERNAL(), StytchSSRProxy.noProviderError('withStytchMemberSession', 'StytchB2BProvider'));
        const { session, isInitialized, fromCache } = useStytchMemberSession();
        return (React__default["default"].createElement(Component, Object.assign({}, props, { stytchMemberSession: session, stytchMemberSessionIsInitialized: isInitialized, stytchMemberSessionIsFromCache: fromCache })));
    };
    WithStytchSession.displayName = `withStytchMemberSession(${Component.displayName || Component.name || 'Component'})`;
    return WithStytchSession;
};
const withStytchOrganization = (Component) => {
    const WithStytchOrganization = (props) => {
        useIsomorphicLayoutEffect.invariant(useIsMounted__INTERNAL(), StytchSSRProxy.noProviderError('withStytchOrganization', 'StytchB2BProvider'));
        const { organization, isInitialized, fromCache } = useStytchOrganization();
        return (React__default["default"].createElement(Component, Object.assign({}, props, { stytchOrganization: organization, stytchOrganizationIsInitialized: isInitialized, stytchOrganizationIsFromCache: fromCache })));
    };
    WithStytchOrganization.displayName = `withStytchOrganization(${Component.displayName || Component.name || 'Component'})`;
    return WithStytchOrganization;
};
/**
 * Wrap your component with this HOC in order to receive the permissions for the logged-in member.
 * Evaluates all permissions granted to the logged-in member.
 * Returns a Record<RoleId, Record<Action, boolean>> response indicating the member's permissions.
 * Each boolean will be `true` if the member can perform the action, `false` otherwise.
 *
 * If the member is not logged in, all values will be false.
 *
 * Remember - authorization checks for sensitive actions should always occur on the backend as well.
 * @example
 * type Permissions = {
 *   document: 'create' | 'read' | 'write
 *   image: 'create' | 'read'
 * }
 *
 * const MyComponent = (props) => {
 *   const canEditDocuments = props.stytchPermissions.document.edit;
 *   const canReadImages = props.stytchPermissions.image.read;
 * }
 * return withStytchPermissions<Permissions>(MyComponent)
 */
const withStytchPermissions = (Component) => {
    const WithStytchPermissions = (props) => {
        useIsomorphicLayoutEffect.invariant(useIsMounted__INTERNAL(), StytchSSRProxy.noProviderError('useRBACPermissions', 'StytchB2BProvider'));
        const client = useStytchB2BClient();
        const { session } = useStytchMemberSession();
        const [permissions, setPermissions] = useIsomorphicLayoutEffect.useAsyncState({ loaded: false, value: null });
        React.useEffect(() => {
            client.rbac
                .allPermissions()
                .then((permissions) => setPermissions({ loaded: true, value: permissions }));
        }, [client, session === null || session === void 0 ? void 0 : session.roles, setPermissions]);
        if (!permissions.loaded) {
            return null;
        }
        return React__default["default"].createElement(Component, Object.assign({}, props, { stytchPermissions: permissions.value }));
    };
    WithStytchPermissions.displayName = `withStytchPermissions(${Component.displayName || Component.name || 'Component'})`;
    return WithStytchPermissions;
};
/**
 * The Stytch Context Provider.
 * Wrap your application with this component in order to use Stytch everywhere in your app.
 * @example
 * const stytch = createStytchB2BHeadlessClient('public-token-<find yours in the stytch dashboard>')
 *
 * return (
 *   <StytchB2BProvider stytch={stytch}>
 *     <App />
 *   </StytchB2BProvider>
 * )
 */
const StytchB2BProvider = ({ stytch, children, assumeHydrated = false, }) => {
    useIsomorphicLayoutEffect.invariant(!useIsMounted__INTERNAL(), 'You cannot render a <StytchB2BProvider> inside another <StytchB2BProvider>.');
    useIsomorphicLayoutEffect.invariant(!assumeHydrated || typeof window !== 'undefined', 'The `assumeHydrated` prop must be set to `false` when using StytchB2BProvider in a server environment.');
    const ctx = React.useMemo(() => ({ client: stytch, isMounted: true }), [stytch]);
    const getHydratedState = React.useCallback(() => {
        return {
            member: Object.assign(Object.assign({}, stytch.self.getInfo()), { isInitialized: true }),
            session: Object.assign(Object.assign({}, stytch.session.getInfo()), { isInitialized: true }),
            organization: Object.assign(Object.assign({}, stytch.organization.getInfo()), { isInitialized: true }),
        };
    }, [stytch]);
    const getInitialState = () => {
        return {
            member: initialMember,
            session: initialMemberSession,
            organization: initialOrganization,
        };
    };
    const [{ member, session, organization }, setClientState] = useIsomorphicLayoutEffect.useAsyncState(() => assumeHydrated ? getHydratedState() : getInitialState());
    // Store the initial value of `assumeHydrated` in a ref, because it is
    // logically only relevant for the first render
    const assumeHydratedRef = React.useRef(assumeHydrated);
    React.useEffect(() => {
        if (StytchSSRProxy.isStytchSSRProxy(stytch)) {
            return;
        }
        const updateState = () => {
            setClientState((oldState) => useIsomorphicLayoutEffect.mergeWithStableProps(oldState, getHydratedState()));
        };
        if (!assumeHydratedRef.current) {
            updateState();
        }
        return stytch.onStateChange(updateState);
    }, [getHydratedState, setClientState, stytch]);
    return (React__default["default"].createElement(StytchB2BContext.Provider, { value: ctx },
        React__default["default"].createElement(StytchOrganizationContext.Provider, { value: organization },
            React__default["default"].createElement(StytchMemberContext.Provider, { value: member },
                React__default["default"].createElement(StytchMemberSessionContext.Provider, { value: session }, children)))));
};

exports.StytchB2BProvider = StytchB2BProvider;
exports.isUIClient = isUIClient;
exports.useIsMounted__INTERNAL = useIsMounted__INTERNAL;
exports.useStytchB2BClient = useStytchB2BClient;
exports.useStytchIsAuthorized = useStytchIsAuthorized;
exports.useStytchMember = useStytchMember;
exports.useStytchMemberSession = useStytchMemberSession;
exports.useStytchOrganization = useStytchOrganization;
exports.withStytchB2BClient = withStytchB2BClient;
exports.withStytchMember = withStytchMember;
exports.withStytchMemberSession = withStytchMemberSession;
exports.withStytchOrganization = withStytchOrganization;
exports.withStytchPermissions = withStytchPermissions;
