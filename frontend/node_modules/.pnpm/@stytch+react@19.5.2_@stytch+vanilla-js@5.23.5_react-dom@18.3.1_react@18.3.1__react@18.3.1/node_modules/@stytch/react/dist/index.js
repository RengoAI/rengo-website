'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var useIsomorphicLayoutEffect = require('./useIsomorphicLayoutEffect-672e4b66.js');
var StytchSSRProxy = require('./StytchSSRProxy-86bc42b3.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const initialUser = {
    user: null,
    fromCache: false,
    isInitialized: false,
};
const initialSession = {
    session: null,
    fromCache: false,
    isInitialized: false,
};
const StytchContext = React.createContext({ isMounted: false });
const StytchUserContext = React.createContext(initialUser);
const StytchSessionContext = React.createContext(initialSession);
const useIsMounted__INTERNAL = () => React.useContext(StytchContext).isMounted;
const isUIClient = (client) => {
    return client.mountLogin !== undefined;
};
/**
 * Returns the active User.
 * The Stytch SDKs are used for client-side authentication and session management.
 * Check the isInitialized property to determine if the SDK has completed initialization.
 * Check the fromCache property to determine if the user data is from persistent storage.
 * @example
 * const {user, isInitialized, fromCache} = useStytchUser();
 * if (!isInitialized) {
 *     return <p>Loading...</p>;
 * }
 * return (<h1>Welcome, {user.name.first_name}</h1>);
 */
const useStytchUser$1 = () => {
    useIsomorphicLayoutEffect.invariant(useIsMounted__INTERNAL(), StytchSSRProxy.noProviderError('useStytchUser'));
    return React.useContext(StytchUserContext);
};
/**
 * Returns the active user's Stytch session.
 * The Stytch SDKs are used for client-side authentication and session management.
 * Check the isInitialized property to determine if the SDK has completed initialization.
 * Check the fromCache property to determine if the session data is from persistent storage.
 * @example
 * const {session, isInitialized, fromCache} = useStytchSession();
 * useEffect(() => {
 *   if (!isInitialized) {
 *     return;
 *   }
 *   if (!session) {
 *     router.replace('/login')
 *   }
 * }, [session, isInitialized]);
 */
const useStytchSession$1 = () => {
    useIsomorphicLayoutEffect.invariant(useIsMounted__INTERNAL(), StytchSSRProxy.noProviderError('useStytchSession'));
    return React.useContext(StytchSessionContext);
};
/**
 * Returns the Stytch client stored in the Stytch context.
 *
 * @example
 * const stytch = useStytch();
 * useEffect(() => {
 *   stytch.magicLinks.authenticate('...')
 * }, [stytch]);
 */
const useStytch = () => {
    const ctx = React.useContext(StytchContext);
    useIsomorphicLayoutEffect.invariant(ctx.isMounted, StytchSSRProxy.noProviderError('useStytch'));
    return ctx.client;
};
const withStytch = (Component) => {
    const WithStytch = (props) => {
        useIsomorphicLayoutEffect.invariant(useIsMounted__INTERNAL(), StytchSSRProxy.noProviderError('withStytch'));
        return React__default["default"].createElement(Component, Object.assign({}, props, { stytch: useStytch() }));
    };
    WithStytch.displayName = `withStytch(${Component.displayName || Component.name || 'Component'})`;
    return WithStytch;
};
const withStytchUser$1 = (Component) => {
    const WithStytchUser = (props) => {
        useIsomorphicLayoutEffect.invariant(useIsMounted__INTERNAL(), StytchSSRProxy.noProviderError('withStytchUser'));
        const { user, isInitialized, fromCache } = useStytchUser$1();
        return (React__default["default"].createElement(Component, Object.assign({}, props, { stytchUser: user, stytchUserIsInitialized: isInitialized, stytchUserIsFromCache: fromCache })));
    };
    WithStytchUser.displayName = `withStytchUser(${Component.displayName || Component.name || 'Component'})`;
    return WithStytchUser;
};
const withStytchSession$1 = (Component) => {
    const WithStytchSession = (props) => {
        useIsomorphicLayoutEffect.invariant(useIsMounted__INTERNAL(), StytchSSRProxy.noProviderError('withStytchSession'));
        const { session, isInitialized, fromCache } = useStytchSession$1();
        return (React__default["default"].createElement(Component, Object.assign({}, props, { stytchSession: session, stytchSessionIsInitialized: isInitialized, stytchSessionIsFromCache: fromCache })));
    };
    WithStytchSession.displayName = `withStytchSession(${Component.displayName || Component.name || 'Component'})`;
    return WithStytchSession;
};
/**
 * The Stytch Context Provider.
 * Wrap your application with this component in order to use Stytch everywhere in your app.
 * @example
 * const stytch = createStytchHeadlessClient('public-token-<find yours in the stytch dashboard>')
 *
 * return (
 *   <StytchProvider stytch={stytch}>
 *     <App />
 *   </StytchProvider>
 * )
 */
const StytchProvider$1 = ({ stytch, children, assumeHydrated = false, }) => {
    useIsomorphicLayoutEffect.invariant(!useIsMounted__INTERNAL(), StytchSSRProxy.providerMustBeUniqueError);
    useIsomorphicLayoutEffect.invariant(!assumeHydrated || typeof window !== 'undefined', 'The `assumeHydrated` prop must be set to `false` when using StytchProvider in a server environment.');
    const ctx = React.useMemo(() => ({ client: stytch, isMounted: true }), [stytch]);
    const getHydratedState = React.useCallback(() => {
        return {
            session: Object.assign(Object.assign({}, stytch.session.getInfo()), { isInitialized: true }),
            user: Object.assign(Object.assign({}, stytch.user.getInfo()), { isInitialized: true }),
        };
    }, [stytch]);
    const getInitialState = () => {
        return {
            session: initialSession,
            user: initialUser,
        };
    };
    const [{ user, session }, setClientState] = useIsomorphicLayoutEffect.useAsyncState(() => assumeHydrated ? getHydratedState() : getInitialState());
    // Store the initial value of `assumeHydrated` in a ref, because it is
    // logically only relevant for the first render
    const assumeHydratedRef = React.useRef(assumeHydrated);
    React.useEffect(() => {
        if (StytchSSRProxy.isStytchSSRProxy(stytch)) {
            return;
        }
        const updateState = () => {
            setClientState((oldState) => useIsomorphicLayoutEffect.mergeWithStableProps(oldState, getHydratedState()));
        };
        if (!assumeHydratedRef.current) {
            updateState();
        }
        return stytch.onStateChange(updateState);
    }, [getHydratedState, setClientState, stytch]);
    return (React__default["default"].createElement(StytchContext.Provider, { value: ctx },
        React__default["default"].createElement(StytchUserContext.Provider, { value: user },
            React__default["default"].createElement(StytchSessionContext.Provider, { value: session }, children))));
};

/**
 * The Stytch Login Screen component.
 * This component can only be used with a Stytch UI Client
 * passed into the StytchProvider.
 *
 * See the {@link https://stytch.com/docs/sdks online reference}
 *
 * @example
 * <StytchLogin
 *   config={{
 *     products: ['emailMagicLinks', 'oauth'],
 *     emailMagicLinksOptions: {
 *       loginRedirectURL: 'https://example.com/authenticate',
 *       signupRedirectURL: 'https://example.com/authenticate',
 *     },
 *     oauthOptions: {
 *      providers: [{ type: OAuthProviders.Google }, { type: OAuthProviders.Microsoft }],
 *    },
 *   }}
 *   styles={{
 *     fontFamily: '"Helvetica New", Helvetica, sans-serif',
 *     primaryColor: '#0577CA',
 *     width: '321px',
 *   }}
 *   callbacks={{
 *     onEvent: (event) => console.log(event)
 *   }}
 * />
 */
const StytchLogin = ({ config, styles, callbacks, }) => {
    useIsomorphicLayoutEffect.invariant(useIsMounted__INTERNAL(), StytchSSRProxy.noProviderError('<StytchLogin />'));
    const stytchClient = useStytch();
    const containerEl = React.useRef(null);
    useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        if (!isUIClient(stytchClient)) {
            throw Error(StytchSSRProxy.noHeadlessClientError);
        }
        if (!containerEl.current) {
            return;
        }
        if (!containerEl.current.id) {
            const randId = Math.floor(Math.random() * 1e6);
            containerEl.current.id = `stytch-magic-link-${randId}`;
        }
        stytchClient.mountLogin({
            config,
            callbacks,
            elementId: `#${containerEl.current.id}`,
            styles,
        });
    }, [stytchClient, config, styles, callbacks]);
    return React__default["default"].createElement("div", { ref: containerEl });
};
/**
 * The Stytch Reset Password component.
 * This component can only be used with a Stytch UI Client
 * passed into the StytchProvider.
 *
 * See the {@link https://stytch.com/docs/sdks online reference}
 *
 * @example
 * <StytchPasswordReset
 *   config={{
 *     products: ['emailMagicLinks', 'oauth'],
 *     emailMagicLinksOptions: {
 *       loginRedirectURL: 'https://example.com/authenticate',
 *       signupRedirectURL: 'https://example.com/authenticate',
 *     },
 *     oauthOptions: {
 *      providers: [{ type: OAuthProviders.Google }, { type: OAuthProviders.Microsoft }],
 *    },
 *   }}
 *   passwordResetToken="PvC5UudZ7TPZbELt95yXAQ-8MeEUCRob8bUQ-g52fIJs"
 *   styles={{
 *     fontFamily: '"Helvetica New", Helvetica, sans-serif',
 *     primaryColor: '#0577CA',
 *     width: '321px',
 *   }}
 *   callbacks={{
 *     onEvent: (event) => console.log(event)
 *   }}
 * />
 */
const StytchPasswordReset = ({ config, styles, callbacks, passwordResetToken, }) => {
    useIsomorphicLayoutEffect.invariant(useIsMounted__INTERNAL(), StytchSSRProxy.noProviderError('<StytchResetPassword />'));
    const stytchClient = useStytch();
    const containerEl = React.useRef(null);
    useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        if (!isUIClient(stytchClient)) {
            throw Error(StytchSSRProxy.noHeadlessClientError);
        }
        if (!containerEl.current) {
            return;
        }
        if (!containerEl.current.id) {
            const randId = Math.floor(Math.random() * 1e6);
            containerEl.current.id = `stytch-reset-password-${randId}`;
        }
        if (passwordResetToken) {
            stytchClient.mountResetPassword({
                config,
                callbacks,
                elementId: `#${containerEl.current.id}`,
                styles,
                passwordResetToken,
            });
        }
    }, [stytchClient, config, styles, callbacks, passwordResetToken]);
    return React__default["default"].createElement("div", { ref: containerEl });
};
/**
 * The Stytch Passkey Registration component.
 * This component can only be used with a Stytch UI Client
 * passed into the StytchProvider.
 *
 * See the {@link https://stytch.com/docs/sdks online reference}
 *
 * @example
 * const styles = {
 *     container: {
 *       backgroundColor: '#e11e1e',
 *     },
 *     colors: {
 *       primary: '#ff00f7',
 *       secondary: '#5C727D',
 *     },
 *    }
 *
 * <StytchPasskeyRegistration
 *   styles={styles}
 *   callbacks={{
 *     onEvent: (event) => console.log(event)
 *   }}
 * />
 */
const StytchPasskeyRegistration = ({ config, styles, callbacks, }) => {
    useIsomorphicLayoutEffect.invariant(useIsMounted__INTERNAL(), StytchSSRProxy.noProviderError('<StytchPasskeyRegistration />'));
    const stytchClient = useStytch();
    const user = useStytchUser$1();
    const containerEl = React.useRef(null);
    useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        if (!isUIClient(stytchClient)) {
            throw Error(StytchSSRProxy.noHeadlessClientError);
        }
        if (!containerEl.current) {
            return;
        }
        if (!containerEl.current.id) {
            const randId = Math.floor(Math.random() * 1e6);
            containerEl.current.id = `stytch-passkey-registration-${randId}`;
        }
        stytchClient.mountPasskeyRegistration({
            config,
            callbacks,
            elementId: `#${containerEl.current.id}`,
            styles,
        });
    }, [stytchClient, config, styles, callbacks, user]);
    return React__default["default"].createElement("div", { ref: containerEl });
};
/**
 * The Stytch IDP component.
 * Parses OAuth Authorization params (client_id, scope, nonce, etc.) out of the page URL.
 * Requires the user to be logged in.
 * This component can only be used with a Stytch UI Client
 * passed into the StytchProvider.
 *
 * See the {@link https://stytch.com/docs/sdks online reference}
 *
 * @example
 * const styles = {
 *   container: {
 *     backgroundColor: '#e11e1e',
 *   },
 *   colors: {
 *     primary: '#ff00f7',
 *     secondary: '#5C727D',
 *   },
 * }
 *
 * <IdentityProvider
 *   styles={styles}
 *   callbacks={{
 *     onEvent: (event) => console.log(event)
 *   }}
 * />
 */
const IdentityProvider = ({ styles, callbacks }) => {
    useIsomorphicLayoutEffect.invariant(useIsMounted__INTERNAL(), StytchSSRProxy.noProviderError('<IdentityProvider />'));
    const stytchClient = useStytch();
    const user = useStytchUser$1();
    const containerEl = React.useRef(null);
    useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        if (!isUIClient(stytchClient)) {
            throw Error(StytchSSRProxy.noHeadlessClientError);
        }
        if (!containerEl.current) {
            return;
        }
        if (!containerEl.current.id) {
            const randId = Math.floor(Math.random() * 1e6);
            containerEl.current.id = `stytch-idp-${randId}`;
        }
        stytchClient.mountIdentityProvider({
            callbacks,
            elementId: `#${containerEl.current.id}`,
            styles,
        });
    }, [stytchClient, styles, callbacks, user]);
    return React__default["default"].createElement("div", { ref: containerEl });
};

/**
 * Returns the active User.
 * The Stytch SDKs are used for client-side authentication and session management.
 * Check the isInitialized property to determine if the SDK has completed initialization.
 * Check the fromCache property to determine if the user data is from persistent storage.
 * @example
 * const {user, isInitialized, fromCache} = useStytchUser();
 * if (!isInitialized) {
 *     return <p>Loading...</p>;
 * }
 * return (<h1>Welcome, {user.name.first_name}</h1>);
 */
const useStytchUser = useStytchUser$1;
/**
 * Returns the active user's Stytch session.
 * The Stytch SDKs are used for client-side authentication and session management.
 * Check the isInitialized property to determine if the SDK has completed initialization.
 * Check the fromCache property to determine if the session data is from persistent storage.
 * @example
 * const {session, isInitialized, fromCache} = useStytchSession();
 * useEffect(() => {
 *   if (!isInitialized) {
 *     return;
 *   }
 *   if (!session) {
 *     router.replace('/login')
 *   }
 * }, [session, isInitialized]);
 */
const useStytchSession = useStytchSession$1;
const withStytchUser = withStytchUser$1;
const withStytchSession = withStytchSession$1;
/**
 * The Stytch Context Provider.
 * Wrap your application with this component in order to use Stytch everywhere in your app.
 * @example
 * const stytch = createStytchHeadlessClient('public-token-<find yours in the stytch dashboard>')
 *
 * ReactDOM.render(
 *   <StytchProvider stytch={stytch}>
 *     <App />
 *   </StytchProvider>,
 *   document.getElementById('root'),
 * )
 */
const StytchProvider = ({ stytch, children, assumeHydrated = true, }) => {
    return (React__default["default"].createElement(StytchProvider$1, { stytch: stytch, assumeHydrated: assumeHydrated }, children));
};

exports.IdentityProvider = IdentityProvider;
exports.StytchLogin = StytchLogin;
exports.StytchPasskeyRegistration = StytchPasskeyRegistration;
exports.StytchPasswordReset = StytchPasswordReset;
exports.StytchProvider = StytchProvider;
exports.useStytch = useStytch;
exports.useStytchSession = useStytchSession;
exports.useStytchUser = useStytchUser;
exports.withStytch = withStytch;
exports.withStytchSession = withStytchSession;
exports.withStytchUser = withStytchUser;
