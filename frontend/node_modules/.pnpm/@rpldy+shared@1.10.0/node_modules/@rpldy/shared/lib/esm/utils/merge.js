import isPlainObject from "./isPlainObject";
export const isMergeObj = obj => isPlainObject(obj) || Array.isArray(obj);
const getKeys = (obj, options) => {
  const keys = Object.keys(obj).filter(k => obj.hasOwnProperty(k) && k !== "__proto__");
  return options.withSymbols ? keys.concat(Object.getOwnPropertySymbols(obj)) : keys;
};
const getMerge = (options = {}) => {
  const merge = (target, ...sources) => {
    if (target && sources.length) {
      sources.forEach(source => {
        if (source) {
          getKeys(source, options).forEach(key => {
            const prop = source[key];
            if (!options.predicate || options.predicate(key, prop)) {
              if (typeof prop !== "undefined" || options.undefinedOverwrites) {
                if (isMergeObj(prop)) {
                  if (typeof target[key] === "undefined" || !isPlainObject(target[key])) {
                    target[key] = Array.isArray(prop) ? [] : {};
                  }
                  merge(target[key], prop);
                } else {
                  target[key] = prop;
                }
              }
            }
          });
        }
      });
    }
    return target;
  };
  return merge;
};
export default getMerge();
export { getMerge };