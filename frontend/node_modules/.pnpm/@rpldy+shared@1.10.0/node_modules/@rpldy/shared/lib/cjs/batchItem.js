"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getIsBatchItem = exports.default = void 0;
var _consts = require("./consts");
const BISYM = Symbol.for("__rpldy-bi__");
let iCounter = 0;
const getBatchItemWithUrl = (batchItem, url) => {
  batchItem.url = url;
  return batchItem;
};
const getBatchItemWithFile = (batchItem, file) => {
  batchItem.file = file;
  return batchItem;
};
const isLikeFile = f => f && (f instanceof File || f instanceof Blob || !!(typeof f === "object" && f.name && f.type));
const getIsBatchItem = obj => {
  return !!(typeof obj === "object" && obj.id && obj.batchId && obj[BISYM] === true);
};
exports.getIsBatchItem = getIsBatchItem;
const createBatchItem = (f, batchId, isPending = false) => {
  const isAlreadyBatchItem = getIsBatchItem(f);
  iCounter += isAlreadyBatchItem ? 0 : 1;
  const id = isAlreadyBatchItem && f.id && typeof f.id === "string" ? f.id : `${batchId}.item-${iCounter}`,
    state = isPending ? _consts.FILE_STATES.PENDING : _consts.FILE_STATES.ADDED;
  let batchItem = {
    id,
    batchId,
    state,
    uploadStatus: 0,
    total: 0,
    completed: 0,
    loaded: 0,
    recycled: isAlreadyBatchItem,
    previousBatch: isAlreadyBatchItem ? f.batchId : null
  };
  Object.defineProperty(batchItem, BISYM, {
    value: true,
    writable: true
  });
  const fileData = isAlreadyBatchItem ? f.file || f.url : f;
  if (typeof fileData === "string") {
    batchItem = getBatchItemWithUrl(batchItem, fileData);
  } else if (isLikeFile(fileData)) {
    batchItem = getBatchItemWithFile(batchItem, fileData);
  } else {
    throw new Error(`Unknown type of file added: ${typeof fileData}`);
  }
  return batchItem;
};
var _default = exports.default = createBatchItem;