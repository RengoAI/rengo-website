"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactDom = _interopRequireDefault(require("react-dom"));
var _shared = require("@rpldy/shared");
var _sharedUi = require("@rpldy/shared-ui");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
const NO_CONTAINER_ERROR_MSG = "Uploady - Container for file input must be a valid dom element";
const renderInput = (inputProps, instanceOptions, ref) => /*#__PURE__*/_react.default.createElement("input", _extends({}, inputProps, {
  name: instanceOptions.inputFieldName,
  type: "file",
  ref: ref
}));
const renderInPortal = (container, isValidContainer, inputProps, instanceOptions, ref) => container && isValidContainer ? /*#__PURE__*/_reactDom.default.createPortal(renderInput(inputProps, instanceOptions, ref), container) : null;
const FileInputField = /*#__PURE__*/(0, _react.memo)(/*#__PURE__*/(0, _react.forwardRef)(({
  container,
  noPortal,
  ...inputProps
}, ref) => {
  const instanceOptions = (0, _sharedUi.useUploadOptions)();
  const isValidContainer = container && container.nodeType === 1;
  (0, _shared.invariant)(isValidContainer || !(0, _shared.hasWindow)(), NO_CONTAINER_ERROR_MSG);
  return noPortal ? renderInput(inputProps, instanceOptions, ref) : renderInPortal(container, isValidContainer, inputProps, instanceOptions, ref);
}));
const Uploady = props => {
  const {
    multiple = true,
    capture,
    accept,
    webkitdirectory,
    children,
    inputFieldContainer,
    customInput,
    fileInputId,
    noPortal = false,
    ...noDomProps
  } = props;
  const container = !customInput ? inputFieldContainer || ((0, _shared.hasWindow)() ? document.body : null) : null;
  const internalInputFieldRef = (0, _react.useRef)();
  return /*#__PURE__*/_react.default.createElement(_sharedUi.NoDomUploady, _extends({}, noDomProps, {
    inputRef: internalInputFieldRef
  }), !customInput ? /*#__PURE__*/_react.default.createElement(FileInputField, {
    container: container,
    multiple: multiple,
    capture: capture,
    accept: accept,
    webkitdirectory: webkitdirectory?.toString(),
    style: {
      display: "none"
    },
    ref: internalInputFieldRef,
    id: fileInputId,
    noPortal: noPortal
  }) : null, children);
};
var _default = exports.default = Uploady;