function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import React, { forwardRef, memo, useRef } from "react";
import ReactDOM from "react-dom";
import { invariant, hasWindow } from "@rpldy/shared";
import { NoDomUploady, useUploadOptions } from "@rpldy/shared-ui";
const NO_CONTAINER_ERROR_MSG = "Uploady - Container for file input must be a valid dom element";
const renderInput = (inputProps, instanceOptions, ref) => /*#__PURE__*/React.createElement("input", _extends({}, inputProps, {
  name: instanceOptions.inputFieldName,
  type: "file",
  ref: ref
}));
const renderInPortal = (container, isValidContainer, inputProps, instanceOptions, ref) => container && isValidContainer ? /*#__PURE__*/ReactDOM.createPortal(renderInput(inputProps, instanceOptions, ref), container) : null;
const FileInputField = /*#__PURE__*/memo(/*#__PURE__*/forwardRef(({
  container,
  noPortal,
  ...inputProps
}, ref) => {
  const instanceOptions = useUploadOptions();
  const isValidContainer = container && container.nodeType === 1;
  invariant(isValidContainer || !hasWindow(), NO_CONTAINER_ERROR_MSG);
  return noPortal ? renderInput(inputProps, instanceOptions, ref) : renderInPortal(container, isValidContainer, inputProps, instanceOptions, ref);
}));
const Uploady = props => {
  const {
    multiple = true,
    capture,
    accept,
    webkitdirectory,
    children,
    inputFieldContainer,
    customInput,
    fileInputId,
    noPortal = false,
    ...noDomProps
  } = props;
  const container = !customInput ? inputFieldContainer || (hasWindow() ? document.body : null) : null;
  const internalInputFieldRef = useRef();
  return /*#__PURE__*/React.createElement(NoDomUploady, _extends({}, noDomProps, {
    inputRef: internalInputFieldRef
  }), !customInput ? /*#__PURE__*/React.createElement(FileInputField, {
    container: container,
    multiple: multiple,
    capture: capture,
    accept: accept,
    webkitdirectory: webkitdirectory?.toString(),
    style: {
      display: "none"
    },
    ref: internalInputFieldRef,
    id: fileInputId,
    noPortal: noPortal
  }) : null, children);
};
export default Uploady;