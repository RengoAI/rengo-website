{"version":3,"sources":["../src/hooks/usePrevious.ts","../src/hooks/useIsChanged.ts","../src/hooks/useIsClient.ts","../src/utils/noop.ts","../src/hooks/useTimeout.ts"],"sourcesContent":["import { useEffect, useRef } from 'react'\n\nexport const usePrevious = <TValue>(value: TValue): TValue => {\n  const ref = useRef<TValue>(value)\n\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n\n  return ref.current\n}\n","import { usePrevious } from './usePrevious'\n\nexport const useIsChanged = (value: unknown) => usePrevious(value) !== value\n","import { useSyncExternalStore } from 'react'\nimport { noop } from '../utils/noop'\n\nconst emptySubscribe = () => noop\nconst getSnapshot = () => true\nconst getServerSnapshot = () => false\nexport const useIsClient = () => useSyncExternalStore(emptySubscribe, getSnapshot, getServerSnapshot)\n","export const noop = (): void => {}\n","import { useCallback, useEffect, useRef } from 'react'\n\nexport const useTimeout = (fn: () => void, ms: number) => {\n  const fnRef = useRef(fn)\n  fnRef.current = fn\n  const fnPreserved = useCallback(() => fnRef.current(), [])\n  useEffect(() => {\n    const id = setTimeout(fnPreserved, ms)\n    return () => clearTimeout(id)\n  }, [fnPreserved, ms])\n}\n"],"mappings":";;;AAAA,SAAS,WAAW,cAAc;AAE3B,IAAM,cAAc,CAAS,UAA0B;AAC5D,QAAM,MAAM,OAAe,KAAK;AAEhC,YAAU,MAAM;AACd,QAAI,UAAU;AAAA,EAChB,GAAG,CAAC,KAAK,CAAC;AAEV,SAAO,IAAI;AACb;;;ACRO,IAAM,eAAe,CAAC,UAAmB,YAAY,KAAK,MAAM;;;ACFvE,SAAS,4BAA4B;;;ACA9B,IAAM,OAAO,MAAY;AAAC;;;ADGjC,IAAM,iBAAiB,MAAM;AAC7B,IAAM,cAAc,MAAM;AAC1B,IAAM,oBAAoB,MAAM;AACzB,IAAM,cAAc,MAAM,qBAAqB,gBAAgB,aAAa,iBAAiB;;;AENpG,SAAS,aAAa,aAAAA,YAAW,UAAAC,eAAc;AAExC,IAAM,aAAa,CAAC,IAAgB,OAAe;AACxD,QAAM,QAAQA,QAAO,EAAE;AACvB,QAAM,UAAU;AAChB,QAAM,cAAc,YAAY,MAAM,MAAM,QAAQ,GAAG,CAAC,CAAC;AACzD,EAAAD,WAAU,MAAM;AACd,UAAM,KAAK,WAAW,aAAa,EAAE;AACrC,WAAO,MAAM,aAAa,EAAE;AAAA,EAC9B,GAAG,CAAC,aAAa,EAAE,CAAC;AACtB;","names":["useEffect","useRef"]}