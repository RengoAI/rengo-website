import * as react_jsx_runtime from 'react/jsx-runtime';
import { ComponentProps, ComponentType } from 'react';
import { Delay } from './Delay.cjs';
import { ErrorBoundary } from './ErrorBoundary.cjs';
import { ErrorBoundaryGroup } from './ErrorBoundaryGroup.cjs';
import { Suspense } from './Suspense.cjs';
import { O as OmitKeyof } from './OmitKeyof-CFsZLI4k.cjs';
import './DevMode.cjs';

type WrapperItem<TWrapperComponent extends typeof Suspense | typeof ErrorBoundary | typeof ErrorBoundaryGroup | typeof Delay> = [TWrapperComponent, OmitKeyof<ComponentProps<TWrapperComponent>, 'children'>];
declare class Wrap {
    private wrappers;
    constructor(wrappers: (WrapperItem<typeof Suspense> | WrapperItem<typeof ErrorBoundary> | WrapperItem<typeof ErrorBoundaryGroup> | WrapperItem<typeof Delay>)[]);
    Suspense: (props?: OmitKeyof<ComponentProps<typeof Suspense>, "children">) => this;
    ErrorBoundary: (props: OmitKeyof<ComponentProps<typeof ErrorBoundary>, "children">) => this;
    ErrorBoundaryGroup: (props?: OmitKeyof<ComponentProps<typeof ErrorBoundaryGroup>, "children">) => this;
    Delay: (props?: OmitKeyof<ComponentProps<typeof Delay>, "children">) => this;
    on: <TProps extends ComponentProps<ComponentType>>(Component: ComponentType<TProps>) => {
        (props: TProps): react_jsx_runtime.JSX.Element;
        displayName: string;
    };
}
/**
 * A utility for wrapping components with Suspensive components (Suspense, ErrorBoundary, ErrorBoundaryGroup, Delay).
 *
 * @example
 * ```tsx
 * const Page = wrap
 *   .ErrorBoundaryGroup({ blockOutside: true })
 *   .ErrorBoundary({
 *     fallback: ({ error }) => <PageErrorFallback message={error.message} />,
 *   })
 *   .Suspense({ fallback: <PageSkeleton /> })
 *   .on(() => {
 *     const { data: postList } = useSuspenseQuery({
 *       queryKey: ['posts'],
 *       queryFn: () => fetch('/api/posts').then(res => res.json())
 *     })
 *
 *     return <PostList data={postList} />
 *   })
 * ```
 *
 * @see {@link https://suspensive.org/docs/react/wrap Suspensive Docs}
 */
declare const wrap: {
    Suspense: (props?: OmitKeyof<ComponentProps<typeof Suspense>, "children">) => Wrap;
    ErrorBoundary: (props: OmitKeyof<ComponentProps<typeof ErrorBoundary>, "children">) => Wrap;
    ErrorBoundaryGroup: (props: OmitKeyof<ComponentProps<typeof ErrorBoundaryGroup>, "children">) => Wrap;
    Delay: (props?: OmitKeyof<ComponentProps<typeof Delay>, "children">) => Wrap;
};

export { wrap };
