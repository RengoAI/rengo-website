"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/Suspense.tsx
var Suspense_exports = {};
__export(Suspense_exports, {
  Suspense: () => Suspense2
});
module.exports = __toCommonJS(Suspense_exports);
var import_react4 = require("react");

// src/contexts/DefaultPropsContexts.ts
var import_react = require("react");
var DelayDefaultPropsContext = (0, import_react.createContext)({
  ms: void 0,
  fallback: void 0
});
if (process.env.NODE_ENV === "development") {
  DelayDefaultPropsContext.displayName = "DelayDefaultPropsContext";
}
var SuspenseDefaultPropsContext = (0, import_react.createContext)({
  fallback: void 0,
  clientOnly: void 0
});
if (process.env.NODE_ENV === "development") {
  SuspenseDefaultPropsContext.displayName = "SuspenseDefaultPropsContext";
}

// src/utils/defineSuspense.tsx
var import_react3 = require("react");

// src/hooks/useIsClient.ts
var import_react2 = require("react");

// src/utils/noop.ts
var noop = () => {
};

// src/hooks/useIsClient.ts
var emptySubscribe = () => noop;
var getSnapshot = () => true;
var getServerSnapshot = () => false;
var useIsClient = () => (0, import_react2.useSyncExternalStore)(emptySubscribe, getSnapshot, getServerSnapshot);

// src/ClientOnly.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var ClientOnly = ({ children, fallback }) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: useIsClient() ? children : fallback });

// src/utils/defineSuspense.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
var SuspenseClientOnly = (props) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(ClientOnly, { fallback: props.fallback, children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_react3.Suspense, __spreadValues({}, props)) });
function defineSuspense({
  defaultPropsClientOnly,
  componentPropsClientOnly
}) {
  return (componentPropsClientOnly != null ? componentPropsClientOnly : defaultPropsClientOnly) ? SuspenseClientOnly : import_react3.Suspense;
}

// src/Suspense.tsx
var import_jsx_runtime3 = require("react/jsx-runtime");
var Suspense2 = ({ clientOnly, children, fallback }) => {
  const defaultProps = (0, import_react4.useContext)(SuspenseDefaultPropsContext);
  const DefinedSuspense = defineSuspense({
    defaultPropsClientOnly: defaultProps.clientOnly,
    componentPropsClientOnly: clientOnly
  });
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(DefinedSuspense, { fallback: fallback === void 0 ? defaultProps.fallback : fallback, children });
};
if (process.env.NODE_ENV === "development") {
  Suspense2.displayName = "Suspense";
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Suspense
});
//# sourceMappingURL=Suspense.cjs.map