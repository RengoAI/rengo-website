{"version":3,"sources":["../src/Suspense.tsx"],"sourcesContent":["import { type SuspenseProps as ReactSuspenseProps, useContext } from 'react'\nimport { SuspenseDefaultPropsContext } from './contexts'\nimport type { PropsWithDevMode } from './DevMode'\nimport { defineSuspense } from './utils'\n\nexport interface SuspenseProps\n  extends PropsWithDevMode<\n    ReactSuspenseProps,\n    {\n      /**\n       * @deprecated Use official react devtools instead\n       * @see https://react.dev/learn/react-developer-tools\n       */\n      showFallback?: boolean\n    }\n  > {\n  /**\n   * With clientOnly prop, `<Suspense/>` will return fallback in server but after mount return children in client. Since mount only happens on the client, `<Suspense/>` can be avoid server-side rendering.\n   * @see https://suspensive.org/docs/react/Suspense#avoid-server-side-rendering-clientonly\n   */\n  clientOnly?: boolean\n}\n\n/**\n * This component is just wrapping React's Suspense. to use Suspense easily in Server-side rendering environment like Next.js\n * @see {@link https://suspensive.org/docs/react/Suspense Suspensive Docs}\n */\nexport const Suspense = ({ clientOnly, children, fallback }: SuspenseProps) => {\n  const defaultProps = useContext(SuspenseDefaultPropsContext)\n  const DefinedSuspense = defineSuspense({\n    defaultPropsClientOnly: defaultProps.clientOnly,\n    componentPropsClientOnly: clientOnly,\n  })\n\n  return (\n    <DefinedSuspense fallback={fallback === undefined ? defaultProps.fallback : fallback}>{children}</DefinedSuspense>\n  )\n}\nif (process.env.NODE_ENV === 'development') {\n  Suspense.displayName = 'Suspense'\n}\n"],"mappings":";;;;;;;;;AAAA,SAAmD,kBAAkB;AAmCjE;AARG,IAAM,WAAW,CAAC,EAAE,YAAY,UAAU,SAAS,MAAqB;AAC7E,QAAM,eAAe,WAAW,2BAA2B;AAC3D,QAAM,kBAAkB,eAAe;AAAA,IACrC,wBAAwB,aAAa;AAAA,IACrC,0BAA0B;AAAA,EAC5B,CAAC;AAED,SACE,oBAAC,mBAAgB,UAAU,aAAa,SAAY,aAAa,WAAW,UAAW,UAAS;AAEpG;AACA,IAAI,QAAQ,IAAI,aAAa,eAAe;AAC1C,WAAS,cAAc;AACzB;","names":[]}