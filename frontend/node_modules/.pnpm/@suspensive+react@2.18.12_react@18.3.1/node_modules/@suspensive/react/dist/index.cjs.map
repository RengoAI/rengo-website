{"version":3,"sources":["../src/index.ts","../src/Suspensive.tsx","../src/contexts/DefaultPropsContexts.ts","../src/models/SuspensiveError.ts","../src/DefaultProps.tsx","../src/Suspense.tsx","../src/utils/hasResetKeysChanged.ts","../src/utils/defineSuspense.tsx","../src/hooks/usePrevious.ts","../src/hooks/useIsChanged.ts","../src/hooks/useIsClient.ts","../src/utils/noop.ts","../src/hooks/useTimeout.ts","../src/ClientOnly.tsx","../src/utils/increase.ts","../src/ErrorBoundary.tsx","../src/ErrorBoundaryGroup.tsx","../src/Delay.tsx","../src/wrap.tsx","../src/DevMode.tsx"],"sourcesContent":["export { SuspensiveProvider, Suspensive } from './Suspensive'\nexport { DefaultPropsProvider, DefaultProps } from './DefaultProps'\nexport { Suspense } from './Suspense'\nexport { ErrorBoundary, useErrorBoundary, useErrorBoundaryFallbackProps } from './ErrorBoundary'\nexport { ErrorBoundaryGroup, useErrorBoundaryGroup } from './ErrorBoundaryGroup'\nexport { Delay } from './Delay'\nexport { wrap } from './wrap'\nexport { DevMode } from './DevMode'\nexport { ClientOnly } from './ClientOnly'\n\nexport type { SuspenseProps } from './Suspense'\nexport type { ErrorBoundaryProps, ErrorBoundaryFallbackProps } from './ErrorBoundary'\nexport type { ErrorBoundaryGroupProps } from './ErrorBoundaryGroup'\nexport type { DelayProps } from './Delay'\nexport type { ClientOnlyProps } from './ClientOnly'\n","import { type PropsWithChildren, useMemo } from 'react'\nimport { DefaultProps, DefaultPropsProvider } from './DefaultProps'\nimport { Message_DefaultProp_delay_ms_should_be_greater_than_0, SuspensiveError } from './models/SuspensiveError'\n\ntype LowercaseFirstLetter<TString extends string> = TString extends `${infer TFirst}${infer TRest}`\n  ? `${Lowercase<TFirst>}${TRest}`\n  : TString\n\ntype LowercaseFirstDepthFieldOf<TObject> = {\n  [TKey in keyof TObject as LowercaseFirstLetter<Extract<TKey, string>>]: TObject[TKey]\n}\n\n/**\n * @deprecated Use DefaultProps instead\n */\nexport class Suspensive {\n  public defaultProps?: LowercaseFirstDepthFieldOf<DefaultProps>\n\n  constructor(\n    /**\n     * @deprecated Use DefaultProps instead\n     */\n    config: {\n      /**\n       * @deprecated Use DefaultProps instead\n       */\n      defaultProps?: LowercaseFirstDepthFieldOf<DefaultProps>\n    } = {}\n  ) {\n    // eslint-disable-next-line @typescript-eslint/no-deprecated\n    if (process.env.NODE_ENV === 'development' && typeof config.defaultProps?.delay?.ms === 'number') {\n      // eslint-disable-next-line @typescript-eslint/no-deprecated\n      SuspensiveError.assert(config.defaultProps.delay.ms > 0, Message_DefaultProp_delay_ms_should_be_greater_than_0)\n    }\n    // eslint-disable-next-line @typescript-eslint/no-deprecated\n    this.defaultProps = config.defaultProps\n  }\n}\n\n/**\n * @deprecated Use DefaultPropsProvider instead\n */\ninterface SuspensiveProviderProps extends PropsWithChildren {\n  /**\n   * @deprecated Use DefaultPropsProvider instead\n   */\n  // eslint-disable-next-line @typescript-eslint/no-deprecated\n  value: Suspensive\n}\n\n/**\n * @deprecated Use DefaultPropsProvider instead\n */\n// eslint-disable-next-line @typescript-eslint/no-deprecated\nexport const SuspensiveProvider = ({ value, children }: SuspensiveProviderProps) => {\n  const defaultProps = useMemo(\n    () => new DefaultProps({ Delay: value.defaultProps?.delay, Suspense: value.defaultProps?.suspense }),\n    [value.defaultProps?.delay, value.defaultProps?.suspense]\n  )\n\n  return value.defaultProps ? (\n    <DefaultPropsProvider defaultProps={defaultProps}>{children}</DefaultPropsProvider>\n  ) : (\n    <>{children}</>\n  )\n}\n","import { createContext } from 'react'\nimport type { DelayProps, SuspenseProps } from '..'\nimport type { OmitKeyof } from '../utility-types'\n\nexport const DelayDefaultPropsContext = createContext<OmitKeyof<DelayProps, 'children'>>({\n  ms: undefined,\n  fallback: undefined,\n})\nif (process.env.NODE_ENV === 'development') {\n  DelayDefaultPropsContext.displayName = 'DelayDefaultPropsContext'\n}\n\nexport const SuspenseDefaultPropsContext = createContext<OmitKeyof<SuspenseProps, 'children'>>({\n  fallback: undefined,\n  clientOnly: undefined,\n})\nif (process.env.NODE_ENV === 'development') {\n  SuspenseDefaultPropsContext.displayName = 'SuspenseDefaultPropsContext'\n}\n","export class SuspensiveError extends Error {\n  static assert(condition: boolean, message: string): asserts condition {\n    if (!condition) {\n      throw new SuspensiveError(message)\n    }\n  }\n}\n\nexport const Message_useErrorBoundary_this_hook_should_be_called_in_ErrorBoundary_props_children =\n  'useErrorBoundary: this hook should be called in ErrorBoundary.props.children'\n\nexport const Message_useErrorBoundaryFallbackProps_this_hook_should_be_called_in_ErrorBoundary_props_fallback =\n  'useErrorBoundaryFallbackProps: this hook should be called in ErrorBoundary.props.fallback'\n\nexport const Message_useErrorBoundaryGroup_this_hook_should_be_called_in_ErrorBoundary_props_children =\n  'useErrorBoundaryGroup: this hook should be called in ErrorBoundary.props.children'\n\nexport const Message_Delay_ms_prop_should_be_greater_than_or_equal_to_0 =\n  'Delay: ms prop should be greater than or equal to 0'\n\nexport const Message_DefaultProp_delay_ms_should_be_greater_than_0 = 'DefaultProps: delay.ms should be greater than 0'\n","import { type ContextType, type PropsWithChildren } from 'react'\nimport { DelayDefaultPropsContext, SuspenseDefaultPropsContext } from './contexts'\nimport { Message_DefaultProp_delay_ms_should_be_greater_than_0, SuspensiveError } from './models/SuspensiveError'\n\n/**\n * A class for configuring default props for Suspensive components.\n *\n * @example\n * ```tsx\n * const defaultProps = new DefaultProps({\n *   Delay: {\n *     ms: 1200,\n *     fallback: <LoadingMessage>Loading additional content...</LoadingMessage>\n *   },\n *   Suspense: {\n *     fallback: <Spinner>Fetching data...</Spinner>,\n *     clientOnly: false,\n *   },\n * })\n * ```\n */\nexport class DefaultProps {\n  Suspense?: ContextType<typeof SuspenseDefaultPropsContext>\n  Delay?: ContextType<typeof DelayDefaultPropsContext>\n\n  constructor(defaultProps: DefaultProps = {}) {\n    if (process.env.NODE_ENV === 'development' && typeof defaultProps.Delay?.ms === 'number') {\n      SuspensiveError.assert(defaultProps.Delay.ms > 0, Message_DefaultProp_delay_ms_should_be_greater_than_0)\n    }\n    this.Suspense = defaultProps.Suspense\n    this.Delay = defaultProps.Delay\n  }\n}\n\ninterface DefaultPropsProviderProps extends PropsWithChildren {\n  defaultProps: DefaultProps\n}\n\n/**\n * A provider component that controls the default settings of Suspensive components.\n * Use this to configure default props for Suspense, Delay, and other Suspensive components globally.\n *\n * @example\n * ```tsx\n * const defaultProps = new DefaultProps({\n *   Delay: {\n *     ms: 1000,\n *     fallback: <LoadingSpinner />\n *   },\n *   Suspense: {\n *     fallback: <Skeleton />,\n *     clientOnly: false,\n *   },\n * })\n *\n * function App() {\n *   return (\n *     <DefaultPropsProvider defaultProps={defaultProps}>\n *       <YourApp />\n *     </DefaultPropsProvider>\n *   )\n * }\n * ```\n *\n * @see {@link https://suspensive.org/docs/react/DefaultPropsProvider Suspensive Docs}\n */\nexport const DefaultPropsProvider = ({ defaultProps, children }: DefaultPropsProviderProps) => (\n  <DelayDefaultPropsContext.Provider value={defaultProps.Delay ?? {}}>\n    <SuspenseDefaultPropsContext.Provider value={defaultProps.Suspense ?? {}}>\n      {children}\n    </SuspenseDefaultPropsContext.Provider>\n  </DelayDefaultPropsContext.Provider>\n)\n","import { type SuspenseProps as ReactSuspenseProps, useContext } from 'react'\nimport { SuspenseDefaultPropsContext } from './contexts'\nimport type { PropsWithDevMode } from './DevMode'\nimport { defineSuspense } from './utils'\n\nexport interface SuspenseProps\n  extends PropsWithDevMode<\n    ReactSuspenseProps,\n    {\n      /**\n       * @deprecated Use official react devtools instead\n       * @see https://react.dev/learn/react-developer-tools\n       */\n      showFallback?: boolean\n    }\n  > {\n  /**\n   * With clientOnly prop, `<Suspense/>` will return fallback in server but after mount return children in client. Since mount only happens on the client, `<Suspense/>` can be avoid server-side rendering.\n   * @see https://suspensive.org/docs/react/Suspense#avoid-server-side-rendering-clientonly\n   */\n  clientOnly?: boolean\n}\n\n/**\n * This component is just wrapping React's Suspense. to use Suspense easily in Server-side rendering environment like Next.js\n * @see {@link https://suspensive.org/docs/react/Suspense Suspensive Docs}\n */\nexport const Suspense = ({ clientOnly, children, fallback }: SuspenseProps) => {\n  const defaultProps = useContext(SuspenseDefaultPropsContext)\n  const DefinedSuspense = defineSuspense({\n    defaultPropsClientOnly: defaultProps.clientOnly,\n    componentPropsClientOnly: clientOnly,\n  })\n\n  return (\n    <DefinedSuspense fallback={fallback === undefined ? defaultProps.fallback : fallback}>{children}</DefinedSuspense>\n  )\n}\nif (process.env.NODE_ENV === 'development') {\n  Suspense.displayName = 'Suspense'\n}\n","export const hasResetKeysChanged = (a: unknown[] = [], b: unknown[] = []) =>\n  a.length !== b.length || a.some((item, index) => !Object.is(item, b[index]))\n","import { Suspense, type SuspenseProps } from 'react'\nimport { ClientOnly } from '../ClientOnly'\n\nexport const SuspenseClientOnly = (props: SuspenseProps) => (\n  <ClientOnly fallback={props.fallback}>\n    <Suspense {...props} />\n  </ClientOnly>\n)\n\nexport function defineSuspense(\n  options:\n    | {\n        componentPropsClientOnly: true\n        defaultPropsClientOnly?: boolean\n      }\n    | {\n        componentPropsClientOnly?: undefined\n        defaultPropsClientOnly: true\n      }\n): typeof SuspenseClientOnly\n\nexport function defineSuspense(options: {\n  componentPropsClientOnly?: boolean\n  defaultPropsClientOnly?: boolean\n}): typeof Suspense\n\nexport function defineSuspense({\n  defaultPropsClientOnly,\n  componentPropsClientOnly,\n}: {\n  defaultPropsClientOnly?: boolean\n  componentPropsClientOnly?: boolean\n}): typeof SuspenseClientOnly | typeof Suspense {\n  return (componentPropsClientOnly ?? defaultPropsClientOnly) ? SuspenseClientOnly : Suspense\n}\n","import { useEffect, useRef } from 'react'\n\nexport const usePrevious = <TValue>(value: TValue): TValue => {\n  const ref = useRef<TValue>(value)\n\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n\n  return ref.current\n}\n","import { usePrevious } from './usePrevious'\n\nexport const useIsChanged = (value: unknown) => usePrevious(value) !== value\n","import { useSyncExternalStore } from 'react'\nimport { noop } from '../utils/noop'\n\nconst emptySubscribe = () => noop\nconst getSnapshot = () => true\nconst getServerSnapshot = () => false\nexport const useIsClient = () => useSyncExternalStore(emptySubscribe, getSnapshot, getServerSnapshot)\n","export const noop = (): void => {}\n","import { useCallback, useEffect, useRef } from 'react'\n\nexport const useTimeout = (fn: () => void, ms: number) => {\n  const fnRef = useRef(fn)\n  fnRef.current = fn\n  const fnPreserved = useCallback(() => fnRef.current(), [])\n  useEffect(() => {\n    const id = setTimeout(fnPreserved, ms)\n    return () => clearTimeout(id)\n  }, [fnPreserved, ms])\n}\n","import type { ReactNode } from 'react'\nimport { useIsClient } from './hooks'\n\nexport interface ClientOnlyProps {\n  children: ReactNode\n  fallback?: ReactNode\n}\n\n/**\n * This component ensures its children are only rendered on the client-side.\n * @see {@link https://suspensive.org/docs/react/ClientOnly Suspensive Docs}\n */\nexport const ClientOnly = ({ children, fallback }: ClientOnlyProps) => <>{useIsClient() ? children : fallback}</>\n","export const increase = (prev: number) => prev + 1\n","import {\n  Component,\n  type ErrorInfo,\n  type FunctionComponent,\n  type PropsWithChildren,\n  type ReactNode,\n  createContext,\n  forwardRef,\n  useContext,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport type { PropsWithDevMode } from './DevMode'\nimport { ErrorBoundaryGroupContext } from './ErrorBoundaryGroup'\nimport {\n  Message_useErrorBoundaryFallbackProps_this_hook_should_be_called_in_ErrorBoundary_props_fallback,\n  Message_useErrorBoundary_this_hook_should_be_called_in_ErrorBoundary_props_children,\n  SuspensiveError,\n} from './models/SuspensiveError'\nimport type { ConstructorType } from './utility-types'\nimport { hasResetKeysChanged } from './utils'\n\nexport interface ErrorBoundaryFallbackProps<TError extends Error = Error> {\n  /**\n   * when ErrorBoundary catch error, you can use this error\n   */\n  error: TError\n  /**\n   * when you want to reset caught error, you can use this reset\n   */\n  reset: () => void\n}\n\ntype ShouldCatchCallback = (error: Error) => boolean\ntype ShouldCatch = ConstructorType<Error> | ShouldCatchCallback | boolean\nconst checkErrorBoundary = (shouldCatch: ShouldCatch, error: Error) => {\n  if (typeof shouldCatch === 'boolean') {\n    return shouldCatch\n  }\n  if (shouldCatch.prototype instanceof Error) {\n    return error instanceof shouldCatch\n  }\n  return (shouldCatch as ShouldCatchCallback)(error)\n}\n\nexport type ErrorBoundaryProps = PropsWithDevMode<\n  PropsWithChildren<{\n    /**\n     * an array of elements for the ErrorBoundary to check each render. If any of those elements change between renders, then the ErrorBoundary will reset the state which will re-render the children\n     */\n    resetKeys?: unknown[]\n    /**\n     * when ErrorBoundary is reset by resetKeys or fallback's props.reset, onReset will be triggered\n     */\n    onReset?(): void\n    /**\n     * when ErrorBoundary catch error, onError will be triggered\n     */\n    onError?(error: Error, info: ErrorInfo): void\n    /**\n     * when ErrorBoundary catch error, fallback will be render instead of children\n     */\n    fallback: ReactNode | FunctionComponent<ErrorBoundaryFallbackProps>\n    /**\n     * determines whether the ErrorBoundary should catch errors based on conditions\n     * @default true\n     */\n    shouldCatch?: ShouldCatch | [ShouldCatch, ...ShouldCatch[]]\n  }>,\n  {\n    /**\n     * @deprecated Use official react devtools instead\n     * @see https://react.dev/learn/react-developer-tools\n     */\n    showFallback?:\n      | boolean\n      | {\n          /**\n           * @deprecated Use official react devtools instead\n           * @see https://react.dev/learn/react-developer-tools\n           */\n          errorMessage?: string\n          /**\n           * @deprecated Use official react devtools instead\n           * @see https://react.dev/learn/react-developer-tools\n           */\n          after?: number\n        }\n  }\n>\n\ntype ErrorBoundaryState<TError extends Error = Error> =\n  | { isError: true; error: TError }\n  | { isError: false; error: null }\n\nconst initialErrorBoundaryState: ErrorBoundaryState = {\n  isError: false,\n  error: null,\n}\nclass BaseErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return { isError: true, error }\n  }\n\n  state = initialErrorBoundaryState\n\n  componentDidUpdate(prevProps: ErrorBoundaryProps, prevState: ErrorBoundaryState) {\n    const { isError } = this.state\n    const { resetKeys } = this.props\n    if (isError && prevState.isError && hasResetKeysChanged(prevProps.resetKeys, resetKeys)) {\n      this.reset()\n    }\n  }\n\n  componentDidCatch(error: Error, info: ErrorInfo) {\n    this.props.onError?.(error, info)\n  }\n\n  reset = () => {\n    this.props.onReset?.()\n    this.setState(initialErrorBoundaryState)\n  }\n\n  render() {\n    const { children, fallback, shouldCatch = true } = this.props\n    const { isError, error } = this.state\n\n    let childrenOrFallback = children\n\n    if (isError) {\n      if (error instanceof SuspensiveError) {\n        throw error\n      }\n      const isCatch = Array.isArray(shouldCatch)\n        ? shouldCatch.some((shouldCatch) => checkErrorBoundary(shouldCatch, error))\n        : checkErrorBoundary(shouldCatch, error)\n      if (!isCatch) {\n        throw error\n      }\n\n      if (typeof fallback === 'undefined') {\n        if (process.env.NODE_ENV === 'development') {\n          console.error('ErrorBoundary of @suspensive/react requires a defined fallback')\n        }\n        throw error\n      }\n\n      if (typeof fallback === 'function') {\n        const FallbackComponent = fallback\n        childrenOrFallback = <FallbackComponent error={error} reset={this.reset} />\n      } else {\n        childrenOrFallback = fallback\n      }\n    }\n\n    return (\n      <ErrorBoundaryContext.Provider value={{ ...this.state, reset: this.reset }}>\n        {childrenOrFallback}\n      </ErrorBoundaryContext.Provider>\n    )\n  }\n}\n\n/**\n * This component provides a simple and reusable wrapper that you can use to wrap around your components. Any rendering errors in your components hierarchy can then be gracefully handled.\n * @see {@link https://suspensive.org/docs/react/ErrorBoundary Suspensive Docs}\n */\nexport const ErrorBoundary = Object.assign(\n  (() => {\n    const ErrorBoundary = forwardRef<{ reset(): void }, ErrorBoundaryProps>(\n      // TODO: remove this line\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      ({ fallback, children, onError, onReset, resetKeys, shouldCatch }, ref) => {\n        const group = useContext(ErrorBoundaryGroupContext) ?? { resetKey: 0 }\n        const baseErrorBoundaryRef = useRef<BaseErrorBoundary>(null)\n        useImperativeHandle(ref, () => ({\n          reset: () => baseErrorBoundaryRef.current?.reset(),\n        }))\n\n        return (\n          <BaseErrorBoundary\n            shouldCatch={shouldCatch}\n            fallback={fallback}\n            onError={onError}\n            onReset={onReset}\n            resetKeys={[group.resetKey, ...(resetKeys || [])]}\n            ref={baseErrorBoundaryRef}\n          >\n            {children}\n          </BaseErrorBoundary>\n        )\n      }\n    )\n\n    if (process.env.NODE_ENV === 'development') {\n      ErrorBoundary.displayName = 'ErrorBoundary'\n    }\n\n    return ErrorBoundary\n  })(),\n  {\n    Consumer: ({ children }: { children: (errorBoundary: ReturnType<typeof useErrorBoundary>) => ReactNode }) => (\n      <>{children(useErrorBoundary())}</>\n    ),\n  }\n)\n\nconst ErrorBoundaryContext = createContext<({ reset: () => void } & ErrorBoundaryState) | null>(null)\nif (process.env.NODE_ENV === 'development') {\n  ErrorBoundaryContext.displayName = 'ErrorBoundaryContext'\n}\n\n/**\n * This hook provides a simple and reusable wrapper that you can use to wrap around your components. Any rendering errors in your components hierarchy can then be gracefully handled.\n * @see {@link https://suspensive.org/docs/react/ErrorBoundary#useerrorboundary Suspensive Docs}\n */\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-parameters\nexport const useErrorBoundary = <TError extends Error = Error>() => {\n  const [state, setState] = useState<ErrorBoundaryState<TError>>({\n    isError: false,\n    error: null,\n  })\n  if (state.isError) {\n    throw state.error\n  }\n\n  const errorBoundary = useContext(ErrorBoundaryContext)\n  SuspensiveError.assert(\n    errorBoundary != null && !errorBoundary.isError,\n    Message_useErrorBoundary_this_hook_should_be_called_in_ErrorBoundary_props_children\n  )\n\n  return useMemo(\n    () => ({\n      setError: (error: TError) => setState({ isError: true, error }),\n    }),\n    []\n  )\n}\n\n/**\n * This hook allows you to access the reset method and error objects without prop drilling.\n * @see {@link https://suspensive.org/docs/react/ErrorBoundary#useerrorboundaryfallbackprops Suspensive Docs}\n */\nexport const useErrorBoundaryFallbackProps = <TError extends Error = Error>(): ErrorBoundaryFallbackProps<TError> => {\n  const errorBoundary = useContext(ErrorBoundaryContext)\n  SuspensiveError.assert(\n    errorBoundary != null && errorBoundary.isError,\n    Message_useErrorBoundaryFallbackProps_this_hook_should_be_called_in_ErrorBoundary_props_fallback\n  )\n\n  return useMemo(\n    () => ({\n      error: errorBoundary.error as TError,\n      reset: errorBoundary.reset,\n    }),\n    [errorBoundary.error, errorBoundary.reset]\n  )\n}\n","import {\n  type PropsWithChildren,\n  type ReactNode,\n  createContext,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n} from 'react'\nimport { useIsChanged } from './hooks'\nimport {\n  Message_useErrorBoundaryGroup_this_hook_should_be_called_in_ErrorBoundary_props_children,\n  SuspensiveError,\n} from './models/SuspensiveError'\nimport { increase } from './utils'\n\nexport const ErrorBoundaryGroupContext = createContext<{ reset: () => void; resetKey: number } | undefined>(undefined)\nif (process.env.NODE_ENV === 'development') {\n  ErrorBoundaryGroupContext.displayName = 'ErrorBoundaryGroupContext'\n}\n\nexport interface ErrorBoundaryGroupProps extends PropsWithChildren {\n  /**\n   * If you use blockOutside as true, ErrorBoundaryGroup will protect multiple ErrorBoundaries as its children from external ErrorBoundaryGroup's resetKey\n   * @default false\n   */\n  blockOutside?: boolean\n}\n\n/**\n * ErrorBoundaryGroup is a wrapper component that allows you to manage multiple ErrorBoundaries easily.\n * ErrorBoundaries as children of nested ErrorBoundaryGroup will also be reset by parent ErrorBoundaryGroup.Consumer.\n * @see {@link https://suspensive.org/docs/react/ErrorBoundaryGroup Suspensive Docs}\n */\nexport const ErrorBoundaryGroup = Object.assign(\n  (() => {\n    const ErrorBoundaryGroup = ({ blockOutside = false, children }: ErrorBoundaryGroupProps) => {\n      const [resetKey, reset] = useReducer(increase, 0)\n      const parentGroup = useContext(ErrorBoundaryGroupContext)\n      const isParentGroupResetKeyChanged = useIsChanged(parentGroup?.resetKey)\n\n      useEffect(() => {\n        if (!blockOutside && isParentGroupResetKeyChanged) {\n          reset()\n        }\n      }, [isParentGroupResetKeyChanged, blockOutside])\n\n      const value = useMemo(() => ({ reset, resetKey }), [resetKey])\n\n      return <ErrorBoundaryGroupContext.Provider value={value}>{children}</ErrorBoundaryGroupContext.Provider>\n    }\n    if (process.env.NODE_ENV === 'development') {\n      ErrorBoundaryGroup.displayName = 'ErrorBoundaryGroup'\n    }\n\n    return ErrorBoundaryGroup\n  })(),\n  {\n    Consumer: ({\n      children,\n    }: {\n      children: (errorBoundaryGroup: ReturnType<typeof useErrorBoundaryGroup>) => ReactNode\n    }) => <>{children(useErrorBoundaryGroup())}</>,\n  }\n)\n\n/**\n * This hook provides the reset method for the ErrorBoundaryGroup.\n * Must be used within an ErrorBoundaryGroup component.\n * @see {@link https://suspensive.org/docs/react/ErrorBoundaryGroup#useerrorboundarygroup Suspensive Docs}\n */\nexport const useErrorBoundaryGroup = (): { reset: () => void } => {\n  const group = useContext(ErrorBoundaryGroupContext)\n  SuspensiveError.assert(\n    group != null,\n    Message_useErrorBoundaryGroup_this_hook_should_be_called_in_ErrorBoundary_props_children\n  )\n  return useMemo(\n    () => ({\n      /**\n       * When you want to reset multiple ErrorBoundaries as children of ErrorBoundaryGroup, You can use this reset\n       */\n      reset: group.reset,\n    }),\n    [group.reset]\n  )\n}\n","import { type ReactNode, useContext, useState } from 'react'\nimport { DelayDefaultPropsContext } from './contexts'\nimport { useTimeout } from './hooks'\nimport { Message_Delay_ms_prop_should_be_greater_than_or_equal_to_0, SuspensiveError } from './models/SuspensiveError'\n\nexport type DelayProps =\n  | {\n      ms?: number\n      fallback?: never\n      /**\n       * @experimental This is experimental feature.\n       */\n      children?: ({ isDelayed }: { isDelayed: boolean }) => ReactNode\n    }\n  | {\n      ms?: number\n      fallback?: ReactNode\n      children?: ReactNode\n    }\n\n/**\n * This component delays the rendering of its children for a specified duration.\n *\n * The Delay component provides a way to introduce intentional delays in rendering,\n * which can be useful for loading states or animations.\n * @see {@link https://suspensive.org/docs/react/Delay Suspensive Docs}\n */\nexport const Delay = (props: DelayProps) => {\n  if (process.env.NODE_ENV === 'development' && typeof props.ms === 'number') {\n    SuspensiveError.assert(props.ms >= 0, Message_Delay_ms_prop_should_be_greater_than_or_equal_to_0)\n  }\n  const defaultProps = useContext(DelayDefaultPropsContext)\n  const ms = props.ms ?? defaultProps.ms ?? 0\n\n  const [isDelayed, setIsDelayed] = useState(ms <= 0)\n  useTimeout(() => setIsDelayed(true), ms)\n\n  if (typeof props.children === 'function') {\n    return <>{props.children({ isDelayed })}</>\n  }\n\n  if (isDelayed) {\n    return <>{props.children}</>\n  }\n  if (props.fallback === undefined) {\n    return <>{defaultProps.fallback}</>\n  }\n  return <>{props.fallback}</>\n}\nif (process.env.NODE_ENV === 'development') {\n  Delay.displayName = 'Delay'\n}\n","import type { ComponentProps, ComponentType } from 'react'\nimport { Delay } from './Delay'\nimport { ErrorBoundary } from './ErrorBoundary'\nimport { ErrorBoundaryGroup } from './ErrorBoundaryGroup'\nimport { Suspense } from './Suspense'\nimport type { OmitKeyof } from './utility-types'\n\ntype WrapperItem<\n  TWrapperComponent extends typeof Suspense | typeof ErrorBoundary | typeof ErrorBoundaryGroup | typeof Delay,\n> = [TWrapperComponent, OmitKeyof<ComponentProps<TWrapperComponent>, 'children'>]\n\nclass Wrap {\n  constructor(\n    private wrappers: (\n      | WrapperItem<typeof Suspense>\n      | WrapperItem<typeof ErrorBoundary>\n      | WrapperItem<typeof ErrorBoundaryGroup>\n      | WrapperItem<typeof Delay>\n    )[]\n  ) {}\n\n  Suspense = (props: OmitKeyof<ComponentProps<typeof Suspense>, 'children'> = {}) => {\n    this.wrappers.unshift([Suspense, props])\n    return this\n  }\n  ErrorBoundary = (props: OmitKeyof<ComponentProps<typeof ErrorBoundary>, 'children'>) => {\n    this.wrappers.unshift([ErrorBoundary, props])\n    return this\n  }\n  ErrorBoundaryGroup = (props: OmitKeyof<ComponentProps<typeof ErrorBoundaryGroup>, 'children'> = {}) => {\n    this.wrappers.unshift([ErrorBoundaryGroup, props])\n    return this\n  }\n  Delay = (props: OmitKeyof<ComponentProps<typeof Delay>, 'children'> = {}) => {\n    this.wrappers.unshift([Delay, props])\n    return this\n  }\n\n  on = <TProps extends ComponentProps<ComponentType>>(Component: ComponentType<TProps>) => {\n    const WrappedComponent = (props: TProps) =>\n      this.wrappers.reduce(\n        (acc, [WrapperComponent, wrapperProps]) => (\n          <WrapperComponent {...(wrapperProps as any)}>{acc}</WrapperComponent>\n        ),\n        <Component {...props} />\n      )\n\n    if (process.env.NODE_ENV === 'development') {\n      WrappedComponent.displayName = `wrap.${[...this.wrappers]\n        .reverse()\n        .map(([WrapperComponent]) => WrapperComponent.displayName)\n        .join('.')}.on(${Component.displayName || Component.name || 'Component'})`\n    }\n\n    return WrappedComponent\n  }\n}\n\n/**\n * A utility for wrapping components with Suspensive components (Suspense, ErrorBoundary, ErrorBoundaryGroup, Delay).\n *\n * @example\n * ```tsx\n * const Page = wrap\n *   .ErrorBoundaryGroup({ blockOutside: true })\n *   .ErrorBoundary({\n *     fallback: ({ error }) => <PageErrorFallback message={error.message} />,\n *   })\n *   .Suspense({ fallback: <PageSkeleton /> })\n *   .on(() => {\n *     const { data: postList } = useSuspenseQuery({\n *       queryKey: ['posts'],\n *       queryFn: () => fetch('/api/posts').then(res => res.json())\n *     })\n *\n *     return <PostList data={postList} />\n *   })\n * ```\n *\n * @see {@link https://suspensive.org/docs/react/wrap Suspensive Docs}\n */\nexport const wrap = {\n  Suspense: (props: OmitKeyof<ComponentProps<typeof Suspense>, 'children'> = {}) => new Wrap([[Suspense, props]]),\n  ErrorBoundary: (props: OmitKeyof<ComponentProps<typeof ErrorBoundary>, 'children'>) =>\n    new Wrap([[ErrorBoundary, props]]),\n  ErrorBoundaryGroup: (props: OmitKeyof<ComponentProps<typeof ErrorBoundaryGroup>, 'children'>) =>\n    new Wrap([[ErrorBoundaryGroup, props]]),\n  Delay: (props: OmitKeyof<ComponentProps<typeof Delay>, 'children'> = {}) => new Wrap([[Delay, props]]),\n}\n","import type { ComponentProps, ComponentType } from 'react'\n\nexport type PropsWithDevMode<\n  TProps extends ComponentProps<ComponentType>,\n  TDevModeProps extends Record<string, unknown>,\n> = TProps & {\n  /**\n   * @deprecated Use official react devtools instead\n   * @see https://react.dev/learn/react-developer-tools\n   */\n  devMode?: TDevModeProps\n}\n\ninterface DevModeProps {\n  /**\n   * @deprecated Use official react devtools instead\n   * @see https://react.dev/learn/react-developer-tools\n   */\n  position?: 'bottomLeft' | 'bottomRight' | 'topLeft' | 'topRight'\n}\n\n/**\n * @deprecated Use official react devtools instead\n * @see https://react.dev/learn/react-developer-tools\n */\nexport const DevMode = (\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  props: DevModeProps\n) => null\n"],"mappings":"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","names":["Suspense","import_react","import_jsx_runtime","_a","_b","import_react","import_react","import_react","import_react","import_react","import_jsx_runtime","import_jsx_runtime","import_jsx_runtime","Suspense","import_react","import_react","import_jsx_runtime","ErrorBoundaryGroup","import_jsx_runtime","shouldCatch","ErrorBoundary","_a","import_react","import_jsx_runtime","import_jsx_runtime","Suspense","Component"]}