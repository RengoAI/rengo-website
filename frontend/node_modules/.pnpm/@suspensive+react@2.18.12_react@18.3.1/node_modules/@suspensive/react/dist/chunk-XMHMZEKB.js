"use client"

// src/hooks/usePrevious.ts
import { useEffect, useRef } from "react";
var usePrevious = (value) => {
  const ref = useRef(value);
  useEffect(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
};

// src/hooks/useIsChanged.ts
var useIsChanged = (value) => usePrevious(value) !== value;

// src/hooks/useIsClient.ts
import { useSyncExternalStore } from "react";

// src/utils/noop.ts
var noop = () => {
};

// src/hooks/useIsClient.ts
var emptySubscribe = () => noop;
var getSnapshot = () => true;
var getServerSnapshot = () => false;
var useIsClient = () => useSyncExternalStore(emptySubscribe, getSnapshot, getServerSnapshot);

// src/hooks/useTimeout.ts
import { useCallback, useEffect as useEffect2, useRef as useRef2 } from "react";
var useTimeout = (fn, ms) => {
  const fnRef = useRef2(fn);
  fnRef.current = fn;
  const fnPreserved = useCallback(() => fnRef.current(), []);
  useEffect2(() => {
    const id = setTimeout(fnPreserved, ms);
    return () => clearTimeout(id);
  }, [fnPreserved, ms]);
};

export {
  useIsChanged,
  useIsClient,
  useTimeout
};
//# sourceMappingURL=chunk-XMHMZEKB.js.map