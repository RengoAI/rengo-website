import * as react_jsx_runtime from 'react/jsx-runtime';
import * as react from 'react';
import { PropsWithChildren, ReactNode } from 'react';

declare const ErrorBoundaryGroupContext: react.Context<{
    reset: () => void;
    resetKey: number;
} | undefined>;
interface ErrorBoundaryGroupProps extends PropsWithChildren {
    /**
     * If you use blockOutside as true, ErrorBoundaryGroup will protect multiple ErrorBoundaries as its children from external ErrorBoundaryGroup's resetKey
     * @default false
     */
    blockOutside?: boolean;
}
/**
 * ErrorBoundaryGroup is a wrapper component that allows you to manage multiple ErrorBoundaries easily.
 * ErrorBoundaries as children of nested ErrorBoundaryGroup will also be reset by parent ErrorBoundaryGroup.Consumer.
 * @see {@link https://suspensive.org/docs/react/ErrorBoundaryGroup Suspensive Docs}
 */
declare const ErrorBoundaryGroup: {
    ({ blockOutside, children }: ErrorBoundaryGroupProps): react_jsx_runtime.JSX.Element;
    displayName: string;
} & {
    Consumer: ({ children, }: {
        children: (errorBoundaryGroup: ReturnType<typeof useErrorBoundaryGroup>) => ReactNode;
    }) => react_jsx_runtime.JSX.Element;
};
/**
 * This hook provides the reset method for the ErrorBoundaryGroup.
 * Must be used within an ErrorBoundaryGroup component.
 * @see {@link https://suspensive.org/docs/react/ErrorBoundaryGroup#useerrorboundarygroup Suspensive Docs}
 */
declare const useErrorBoundaryGroup: () => {
    reset: () => void;
};

export { ErrorBoundaryGroup, ErrorBoundaryGroupContext, type ErrorBoundaryGroupProps, useErrorBoundaryGroup };
