{"version":3,"sources":["../src/utils/hasResetKeysChanged.ts","../src/utils/defineSuspense.tsx","../src/utils/increase.ts"],"sourcesContent":["export const hasResetKeysChanged = (a: unknown[] = [], b: unknown[] = []) =>\n  a.length !== b.length || a.some((item, index) => !Object.is(item, b[index]))\n","import { Suspense, type SuspenseProps } from 'react'\nimport { ClientOnly } from '../ClientOnly'\n\nexport const SuspenseClientOnly = (props: SuspenseProps) => (\n  <ClientOnly fallback={props.fallback}>\n    <Suspense {...props} />\n  </ClientOnly>\n)\n\nexport function defineSuspense(\n  options:\n    | {\n        componentPropsClientOnly: true\n        defaultPropsClientOnly?: boolean\n      }\n    | {\n        componentPropsClientOnly?: undefined\n        defaultPropsClientOnly: true\n      }\n): typeof SuspenseClientOnly\n\nexport function defineSuspense(options: {\n  componentPropsClientOnly?: boolean\n  defaultPropsClientOnly?: boolean\n}): typeof Suspense\n\nexport function defineSuspense({\n  defaultPropsClientOnly,\n  componentPropsClientOnly,\n}: {\n  defaultPropsClientOnly?: boolean\n  componentPropsClientOnly?: boolean\n}): typeof SuspenseClientOnly | typeof Suspense {\n  return (componentPropsClientOnly ?? defaultPropsClientOnly) ? SuspenseClientOnly : Suspense\n}\n","export const increase = (prev: number) => prev + 1\n"],"mappings":";;;;;;;;;AAAO,IAAM,sBAAsB,CAAC,IAAe,CAAC,GAAG,IAAe,CAAC,MACrE,EAAE,WAAW,EAAE,UAAU,EAAE,KAAK,CAAC,MAAM,UAAU,CAAC,OAAO,GAAG,MAAM,EAAE,KAAK,CAAC,CAAC;;;ACD7E,SAAS,gBAAoC;AAKzC;AAFG,IAAM,qBAAqB,CAAC,UACjC,oBAAC,cAAW,UAAU,MAAM,UAC1B,8BAAC,6BAAa,MAAO,GACvB;AAoBK,SAAS,eAAe;AAAA,EAC7B;AAAA,EACA;AACF,GAGgD;AAC9C,UAAQ,8DAA4B,0BAA0B,qBAAqB;AACrF;;;AClCO,IAAM,WAAW,CAAC,SAAiB,OAAO;","names":[]}