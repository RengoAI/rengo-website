"use client"
import {
  increase
} from "./chunk-ZJULBOVW.js";
import {
  useIsChanged
} from "./chunk-XMHMZEKB.js";
import {
  Message_useErrorBoundaryGroup_this_hook_should_be_called_in_ErrorBoundary_props_children,
  SuspensiveError
} from "./chunk-NF2UFYHD.js";

// src/ErrorBoundaryGroup.tsx
import {
  createContext,
  useContext,
  useEffect,
  useMemo,
  useReducer
} from "react";
import { Fragment, jsx } from "react/jsx-runtime";
var ErrorBoundaryGroupContext = createContext(void 0);
if (process.env.NODE_ENV === "development") {
  ErrorBoundaryGroupContext.displayName = "ErrorBoundaryGroupContext";
}
var ErrorBoundaryGroup = Object.assign(
  (() => {
    const ErrorBoundaryGroup2 = ({ blockOutside = false, children }) => {
      const [resetKey, reset] = useReducer(increase, 0);
      const parentGroup = useContext(ErrorBoundaryGroupContext);
      const isParentGroupResetKeyChanged = useIsChanged(parentGroup == null ? void 0 : parentGroup.resetKey);
      useEffect(() => {
        if (!blockOutside && isParentGroupResetKeyChanged) {
          reset();
        }
      }, [isParentGroupResetKeyChanged, blockOutside]);
      const value = useMemo(() => ({ reset, resetKey }), [resetKey]);
      return /* @__PURE__ */ jsx(ErrorBoundaryGroupContext.Provider, { value, children });
    };
    if (process.env.NODE_ENV === "development") {
      ErrorBoundaryGroup2.displayName = "ErrorBoundaryGroup";
    }
    return ErrorBoundaryGroup2;
  })(),
  {
    Consumer: ({
      children
    }) => /* @__PURE__ */ jsx(Fragment, { children: children(useErrorBoundaryGroup()) })
  }
);
var useErrorBoundaryGroup = () => {
  const group = useContext(ErrorBoundaryGroupContext);
  SuspensiveError.assert(
    group != null,
    Message_useErrorBoundaryGroup_this_hook_should_be_called_in_ErrorBoundary_props_children
  );
  return useMemo(
    () => ({
      /**
       * When you want to reset multiple ErrorBoundaries as children of ErrorBoundaryGroup, You can use this reset
       */
      reset: group.reset
    }),
    [group.reset]
  );
};

export {
  ErrorBoundaryGroupContext,
  ErrorBoundaryGroup,
  useErrorBoundaryGroup
};
//# sourceMappingURL=chunk-S5J6B5JD.js.map