"use client"
import {
  useTimeout
} from "./chunk-XMHMZEKB.js";
import {
  Message_Delay_ms_prop_should_be_greater_than_or_equal_to_0,
  SuspensiveError
} from "./chunk-NF2UFYHD.js";
import {
  DelayDefaultPropsContext
} from "./chunk-PJ6VIZI5.js";

// src/Delay.tsx
import { useContext, useState } from "react";
import { Fragment, jsx } from "react/jsx-runtime";
var Delay = (props) => {
  var _a, _b;
  if (process.env.NODE_ENV === "development" && typeof props.ms === "number") {
    SuspensiveError.assert(props.ms >= 0, Message_Delay_ms_prop_should_be_greater_than_or_equal_to_0);
  }
  const defaultProps = useContext(DelayDefaultPropsContext);
  const ms = (_b = (_a = props.ms) != null ? _a : defaultProps.ms) != null ? _b : 0;
  const [isDelayed, setIsDelayed] = useState(ms <= 0);
  useTimeout(() => setIsDelayed(true), ms);
  if (typeof props.children === "function") {
    return /* @__PURE__ */ jsx(Fragment, { children: props.children({ isDelayed }) });
  }
  if (isDelayed) {
    return /* @__PURE__ */ jsx(Fragment, { children: props.children });
  }
  if (props.fallback === void 0) {
    return /* @__PURE__ */ jsx(Fragment, { children: defaultProps.fallback });
  }
  return /* @__PURE__ */ jsx(Fragment, { children: props.fallback });
};
if (process.env.NODE_ENV === "development") {
  Delay.displayName = "Delay";
}

export {
  Delay
};
//# sourceMappingURL=chunk-YARTG4UY.js.map