{"version":3,"sources":["../src/ErrorBoundaryGroup.tsx","../src/hooks/usePrevious.ts","../src/hooks/useIsChanged.ts","../src/models/SuspensiveError.ts","../src/utils/increase.ts"],"sourcesContent":["import {\n  type PropsWithChildren,\n  type ReactNode,\n  createContext,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n} from 'react'\nimport { useIsChanged } from './hooks'\nimport {\n  Message_useErrorBoundaryGroup_this_hook_should_be_called_in_ErrorBoundary_props_children,\n  SuspensiveError,\n} from './models/SuspensiveError'\nimport { increase } from './utils'\n\nexport const ErrorBoundaryGroupContext = createContext<{ reset: () => void; resetKey: number } | undefined>(undefined)\nif (process.env.NODE_ENV === 'development') {\n  ErrorBoundaryGroupContext.displayName = 'ErrorBoundaryGroupContext'\n}\n\nexport interface ErrorBoundaryGroupProps extends PropsWithChildren {\n  /**\n   * If you use blockOutside as true, ErrorBoundaryGroup will protect multiple ErrorBoundaries as its children from external ErrorBoundaryGroup's resetKey\n   * @default false\n   */\n  blockOutside?: boolean\n}\n\n/**\n * ErrorBoundaryGroup is a wrapper component that allows you to manage multiple ErrorBoundaries easily.\n * ErrorBoundaries as children of nested ErrorBoundaryGroup will also be reset by parent ErrorBoundaryGroup.Consumer.\n * @see {@link https://suspensive.org/docs/react/ErrorBoundaryGroup Suspensive Docs}\n */\nexport const ErrorBoundaryGroup = Object.assign(\n  (() => {\n    const ErrorBoundaryGroup = ({ blockOutside = false, children }: ErrorBoundaryGroupProps) => {\n      const [resetKey, reset] = useReducer(increase, 0)\n      const parentGroup = useContext(ErrorBoundaryGroupContext)\n      const isParentGroupResetKeyChanged = useIsChanged(parentGroup?.resetKey)\n\n      useEffect(() => {\n        if (!blockOutside && isParentGroupResetKeyChanged) {\n          reset()\n        }\n      }, [isParentGroupResetKeyChanged, blockOutside])\n\n      const value = useMemo(() => ({ reset, resetKey }), [resetKey])\n\n      return <ErrorBoundaryGroupContext.Provider value={value}>{children}</ErrorBoundaryGroupContext.Provider>\n    }\n    if (process.env.NODE_ENV === 'development') {\n      ErrorBoundaryGroup.displayName = 'ErrorBoundaryGroup'\n    }\n\n    return ErrorBoundaryGroup\n  })(),\n  {\n    Consumer: ({\n      children,\n    }: {\n      children: (errorBoundaryGroup: ReturnType<typeof useErrorBoundaryGroup>) => ReactNode\n    }) => <>{children(useErrorBoundaryGroup())}</>,\n  }\n)\n\n/**\n * This hook provides the reset method for the ErrorBoundaryGroup.\n * Must be used within an ErrorBoundaryGroup component.\n * @see {@link https://suspensive.org/docs/react/ErrorBoundaryGroup#useerrorboundarygroup Suspensive Docs}\n */\nexport const useErrorBoundaryGroup = (): { reset: () => void } => {\n  const group = useContext(ErrorBoundaryGroupContext)\n  SuspensiveError.assert(\n    group != null,\n    Message_useErrorBoundaryGroup_this_hook_should_be_called_in_ErrorBoundary_props_children\n  )\n  return useMemo(\n    () => ({\n      /**\n       * When you want to reset multiple ErrorBoundaries as children of ErrorBoundaryGroup, You can use this reset\n       */\n      reset: group.reset,\n    }),\n    [group.reset]\n  )\n}\n","import { useEffect, useRef } from 'react'\n\nexport const usePrevious = <TValue>(value: TValue): TValue => {\n  const ref = useRef<TValue>(value)\n\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n\n  return ref.current\n}\n","import { usePrevious } from './usePrevious'\n\nexport const useIsChanged = (value: unknown) => usePrevious(value) !== value\n","export class SuspensiveError extends Error {\n  static assert(condition: boolean, message: string): asserts condition {\n    if (!condition) {\n      throw new SuspensiveError(message)\n    }\n  }\n}\n\nexport const Message_useErrorBoundary_this_hook_should_be_called_in_ErrorBoundary_props_children =\n  'useErrorBoundary: this hook should be called in ErrorBoundary.props.children'\n\nexport const Message_useErrorBoundaryFallbackProps_this_hook_should_be_called_in_ErrorBoundary_props_fallback =\n  'useErrorBoundaryFallbackProps: this hook should be called in ErrorBoundary.props.fallback'\n\nexport const Message_useErrorBoundaryGroup_this_hook_should_be_called_in_ErrorBoundary_props_children =\n  'useErrorBoundaryGroup: this hook should be called in ErrorBoundary.props.children'\n\nexport const Message_Delay_ms_prop_should_be_greater_than_or_equal_to_0 =\n  'Delay: ms prop should be greater than or equal to 0'\n\nexport const Message_DefaultProp_delay_ms_should_be_greater_than_0 = 'DefaultProps: delay.ms should be greater than 0'\n","export const increase = (prev: number) => prev + 1\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,gBAQO;;;ACRP,mBAAkC;AAE3B,IAAM,cAAc,CAAS,UAA0B;AAC5D,QAAM,UAAM,qBAAe,KAAK;AAEhC,8BAAU,MAAM;AACd,QAAI,UAAU;AAAA,EAChB,GAAG,CAAC,KAAK,CAAC;AAEV,SAAO,IAAI;AACb;;;ACRO,IAAM,eAAe,CAAC,UAAmB,YAAY,KAAK,MAAM;;;ACFhE,IAAM,kBAAN,MAAM,yBAAwB,MAAM;AAAA,EACzC,OAAO,OAAO,WAAoB,SAAoC;AACpE,QAAI,CAAC,WAAW;AACd,YAAM,IAAI,iBAAgB,OAAO;AAAA,IACnC;AAAA,EACF;AACF;AAQO,IAAM,2FACX;;;ACfK,IAAM,WAAW,CAAC,SAAiB,OAAO;;;AJiDpC;AAjCN,IAAM,gCAA4B,6BAAmE,MAAS;AACrH,IAAI,QAAQ,IAAI,aAAa,eAAe;AAC1C,4BAA0B,cAAc;AAC1C;AAeO,IAAM,qBAAqB,OAAO;AAAA,GACtC,MAAM;AACL,UAAMC,sBAAqB,CAAC,EAAE,eAAe,OAAO,SAAS,MAA+B;AAC1F,YAAM,CAAC,UAAU,KAAK,QAAI,0BAAW,UAAU,CAAC;AAChD,YAAM,kBAAc,0BAAW,yBAAyB;AACxD,YAAM,+BAA+B,aAAa,2CAAa,QAAQ;AAEvE,mCAAU,MAAM;AACd,YAAI,CAAC,gBAAgB,8BAA8B;AACjD,gBAAM;AAAA,QACR;AAAA,MACF,GAAG,CAAC,8BAA8B,YAAY,CAAC;AAE/C,YAAM,YAAQ,uBAAQ,OAAO,EAAE,OAAO,SAAS,IAAI,CAAC,QAAQ,CAAC;AAE7D,aAAO,4CAAC,0BAA0B,UAA1B,EAAmC,OAAe,UAAS;AAAA,IACrE;AACA,QAAI,QAAQ,IAAI,aAAa,eAAe;AAC1C,MAAAA,oBAAmB,cAAc;AAAA,IACnC;AAEA,WAAOA;AAAA,EACT,GAAG;AAAA,EACH;AAAA,IACE,UAAU,CAAC;AAAA,MACT;AAAA,IACF,MAEM,2EAAG,mBAAS,sBAAsB,CAAC,GAAE;AAAA,EAC7C;AACF;AAOO,IAAM,wBAAwB,MAA6B;AAChE,QAAM,YAAQ,0BAAW,yBAAyB;AAClD,kBAAgB;AAAA,IACd,SAAS;AAAA,IACT;AAAA,EACF;AACA,aAAO;AAAA,IACL,OAAO;AAAA;AAAA;AAAA;AAAA,MAIL,OAAO,MAAM;AAAA,IACf;AAAA,IACA,CAAC,MAAM,KAAK;AAAA,EACd;AACF;","names":["import_react","ErrorBoundaryGroup"]}