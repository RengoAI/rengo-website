"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/Suspensive.tsx
var Suspensive_exports = {};
__export(Suspensive_exports, {
  Suspensive: () => Suspensive,
  SuspensiveProvider: () => SuspensiveProvider
});
module.exports = __toCommonJS(Suspensive_exports);
var import_react2 = require("react");

// src/contexts/DefaultPropsContexts.ts
var import_react = require("react");
var DelayDefaultPropsContext = (0, import_react.createContext)({
  ms: void 0,
  fallback: void 0
});
if (process.env.NODE_ENV === "development") {
  DelayDefaultPropsContext.displayName = "DelayDefaultPropsContext";
}
var SuspenseDefaultPropsContext = (0, import_react.createContext)({
  fallback: void 0,
  clientOnly: void 0
});
if (process.env.NODE_ENV === "development") {
  SuspenseDefaultPropsContext.displayName = "SuspenseDefaultPropsContext";
}

// src/models/SuspensiveError.ts
var SuspensiveError = class _SuspensiveError extends Error {
  static assert(condition, message) {
    if (!condition) {
      throw new _SuspensiveError(message);
    }
  }
};
var Message_DefaultProp_delay_ms_should_be_greater_than_0 = "DefaultProps: delay.ms should be greater than 0";

// src/DefaultProps.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var DefaultProps = class {
  constructor(defaultProps = {}) {
    var _a;
    if (process.env.NODE_ENV === "development" && typeof ((_a = defaultProps.Delay) == null ? void 0 : _a.ms) === "number") {
      SuspensiveError.assert(defaultProps.Delay.ms > 0, Message_DefaultProp_delay_ms_should_be_greater_than_0);
    }
    this.Suspense = defaultProps.Suspense;
    this.Delay = defaultProps.Delay;
  }
};
var DefaultPropsProvider = ({ defaultProps, children }) => {
  var _a, _b;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DelayDefaultPropsContext.Provider, { value: (_a = defaultProps.Delay) != null ? _a : {}, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SuspenseDefaultPropsContext.Provider, { value: (_b = defaultProps.Suspense) != null ? _b : {}, children }) });
};

// src/Suspensive.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
var Suspensive = class {
  constructor(config = {}) {
    var _a, _b;
    if (process.env.NODE_ENV === "development" && typeof ((_b = (_a = config.defaultProps) == null ? void 0 : _a.delay) == null ? void 0 : _b.ms) === "number") {
      SuspensiveError.assert(config.defaultProps.delay.ms > 0, Message_DefaultProp_delay_ms_should_be_greater_than_0);
    }
    this.defaultProps = config.defaultProps;
  }
};
var SuspensiveProvider = ({ value, children }) => {
  var _a, _b;
  const defaultProps = (0, import_react2.useMemo)(
    () => {
      var _a2, _b2;
      return new DefaultProps({ Delay: (_a2 = value.defaultProps) == null ? void 0 : _a2.delay, Suspense: (_b2 = value.defaultProps) == null ? void 0 : _b2.suspense });
    },
    [(_a = value.defaultProps) == null ? void 0 : _a.delay, (_b = value.defaultProps) == null ? void 0 : _b.suspense]
  );
  return value.defaultProps ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(DefaultPropsProvider, { defaultProps, children }) : /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, { children });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Suspensive,
  SuspensiveProvider
});
//# sourceMappingURL=Suspensive.cjs.map