{"version":3,"sources":["../src/ClientOnly.tsx","../src/hooks/useIsClient.ts","../src/utils/noop.ts"],"sourcesContent":["import type { ReactNode } from 'react'\nimport { useIsClient } from './hooks'\n\nexport interface ClientOnlyProps {\n  children: ReactNode\n  fallback?: ReactNode\n}\n\n/**\n * This component ensures its children are only rendered on the client-side.\n * @see {@link https://suspensive.org/docs/react/ClientOnly Suspensive Docs}\n */\nexport const ClientOnly = ({ children, fallback }: ClientOnlyProps) => <>{useIsClient() ? children : fallback}</>\n","import { useSyncExternalStore } from 'react'\nimport { noop } from '../utils/noop'\n\nconst emptySubscribe = () => noop\nconst getSnapshot = () => true\nconst getServerSnapshot = () => false\nexport const useIsClient = () => useSyncExternalStore(emptySubscribe, getSnapshot, getServerSnapshot)\n","export const noop = (): void => {}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,mBAAqC;;;ACA9B,IAAM,OAAO,MAAY;AAAC;;;ADGjC,IAAM,iBAAiB,MAAM;AAC7B,IAAM,cAAc,MAAM;AAC1B,IAAM,oBAAoB,MAAM;AACzB,IAAM,cAAc,UAAM,mCAAqB,gBAAgB,aAAa,iBAAiB;;;ADM7B;AAAhE,IAAM,aAAa,CAAC,EAAE,UAAU,SAAS,MAAuB,2EAAG,sBAAY,IAAI,WAAW,UAAS;","names":[]}