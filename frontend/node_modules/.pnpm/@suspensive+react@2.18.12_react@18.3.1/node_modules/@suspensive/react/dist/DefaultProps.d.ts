import * as react_jsx_runtime from 'react/jsx-runtime';
import * as react from 'react';
import { ContextType, PropsWithChildren } from 'react';
import { O as OmitKeyof } from './OmitKeyof-CFsZLI4k.js';
import { SuspenseProps } from './Suspense.js';
import { DelayProps } from './Delay.js';
import './DevMode.js';

declare const DelayDefaultPropsContext: react.Context<OmitKeyof<DelayProps, "children">>;
declare const SuspenseDefaultPropsContext: react.Context<OmitKeyof<SuspenseProps, "children">>;

/**
 * A class for configuring default props for Suspensive components.
 *
 * @example
 * ```tsx
 * const defaultProps = new DefaultProps({
 *   Delay: {
 *     ms: 1200,
 *     fallback: <LoadingMessage>Loading additional content...</LoadingMessage>
 *   },
 *   Suspense: {
 *     fallback: <Spinner>Fetching data...</Spinner>,
 *     clientOnly: false,
 *   },
 * })
 * ```
 */
declare class DefaultProps {
    Suspense?: ContextType<typeof SuspenseDefaultPropsContext>;
    Delay?: ContextType<typeof DelayDefaultPropsContext>;
    constructor(defaultProps?: DefaultProps);
}
interface DefaultPropsProviderProps extends PropsWithChildren {
    defaultProps: DefaultProps;
}
/**
 * A provider component that controls the default settings of Suspensive components.
 * Use this to configure default props for Suspense, Delay, and other Suspensive components globally.
 *
 * @example
 * ```tsx
 * const defaultProps = new DefaultProps({
 *   Delay: {
 *     ms: 1000,
 *     fallback: <LoadingSpinner />
 *   },
 *   Suspense: {
 *     fallback: <Skeleton />,
 *     clientOnly: false,
 *   },
 * })
 *
 * function App() {
 *   return (
 *     <DefaultPropsProvider defaultProps={defaultProps}>
 *       <YourApp />
 *     </DefaultPropsProvider>
 *   )
 * }
 * ```
 *
 * @see {@link https://suspensive.org/docs/react/DefaultPropsProvider Suspensive Docs}
 */
declare const DefaultPropsProvider: ({ defaultProps, children }: DefaultPropsProviderProps) => react_jsx_runtime.JSX.Element;

export { DefaultProps, DefaultPropsProvider };
