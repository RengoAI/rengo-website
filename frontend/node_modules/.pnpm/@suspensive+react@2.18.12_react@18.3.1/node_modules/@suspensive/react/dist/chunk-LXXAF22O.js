"use client"
import {
  Delay
} from "./chunk-YARTG4UY.js";
import {
  ErrorBoundary
} from "./chunk-LVRP5XPR.js";
import {
  ErrorBoundaryGroup
} from "./chunk-S5J6B5JD.js";
import {
  Suspense
} from "./chunk-H25YTWH6.js";
import {
  __spreadProps,
  __spreadValues
} from "./chunk-HVDFXOFP.js";

// src/wrap.tsx
import { jsx } from "react/jsx-runtime";
var Wrap = class {
  constructor(wrappers) {
    this.wrappers = wrappers;
    this.Suspense = (props = {}) => {
      this.wrappers.unshift([Suspense, props]);
      return this;
    };
    this.ErrorBoundary = (props) => {
      this.wrappers.unshift([ErrorBoundary, props]);
      return this;
    };
    this.ErrorBoundaryGroup = (props = {}) => {
      this.wrappers.unshift([ErrorBoundaryGroup, props]);
      return this;
    };
    this.Delay = (props = {}) => {
      this.wrappers.unshift([Delay, props]);
      return this;
    };
    this.on = (Component) => {
      const WrappedComponent = (props) => this.wrappers.reduce(
        (acc, [WrapperComponent, wrapperProps]) => /* @__PURE__ */ jsx(WrapperComponent, __spreadProps(__spreadValues({}, wrapperProps), { children: acc })),
        /* @__PURE__ */ jsx(Component, __spreadValues({}, props))
      );
      if (process.env.NODE_ENV === "development") {
        WrappedComponent.displayName = "wrap.".concat([...this.wrappers].reverse().map(([WrapperComponent]) => WrapperComponent.displayName).join("."), ".on(").concat(Component.displayName || Component.name || "Component", ")");
      }
      return WrappedComponent;
    };
  }
};
var wrap = {
  Suspense: (props = {}) => new Wrap([[Suspense, props]]),
  ErrorBoundary: (props) => new Wrap([[ErrorBoundary, props]]),
  ErrorBoundaryGroup: (props) => new Wrap([[ErrorBoundaryGroup, props]]),
  Delay: (props = {}) => new Wrap([[Delay, props]])
};

export {
  wrap
};
//# sourceMappingURL=chunk-LXXAF22O.js.map