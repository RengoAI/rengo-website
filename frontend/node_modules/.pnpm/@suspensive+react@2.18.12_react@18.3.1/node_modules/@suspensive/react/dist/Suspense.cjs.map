{"version":3,"sources":["../src/Suspense.tsx","../src/contexts/DefaultPropsContexts.ts","../src/utils/defineSuspense.tsx","../src/hooks/useIsClient.ts","../src/utils/noop.ts","../src/ClientOnly.tsx"],"sourcesContent":["import { type SuspenseProps as ReactSuspenseProps, useContext } from 'react'\nimport { SuspenseDefaultPropsContext } from './contexts'\nimport type { PropsWithDevMode } from './DevMode'\nimport { defineSuspense } from './utils'\n\nexport interface SuspenseProps\n  extends PropsWithDevMode<\n    ReactSuspenseProps,\n    {\n      /**\n       * @deprecated Use official react devtools instead\n       * @see https://react.dev/learn/react-developer-tools\n       */\n      showFallback?: boolean\n    }\n  > {\n  /**\n   * With clientOnly prop, `<Suspense/>` will return fallback in server but after mount return children in client. Since mount only happens on the client, `<Suspense/>` can be avoid server-side rendering.\n   * @see https://suspensive.org/docs/react/Suspense#avoid-server-side-rendering-clientonly\n   */\n  clientOnly?: boolean\n}\n\n/**\n * This component is just wrapping React's Suspense. to use Suspense easily in Server-side rendering environment like Next.js\n * @see {@link https://suspensive.org/docs/react/Suspense Suspensive Docs}\n */\nexport const Suspense = ({ clientOnly, children, fallback }: SuspenseProps) => {\n  const defaultProps = useContext(SuspenseDefaultPropsContext)\n  const DefinedSuspense = defineSuspense({\n    defaultPropsClientOnly: defaultProps.clientOnly,\n    componentPropsClientOnly: clientOnly,\n  })\n\n  return (\n    <DefinedSuspense fallback={fallback === undefined ? defaultProps.fallback : fallback}>{children}</DefinedSuspense>\n  )\n}\nif (process.env.NODE_ENV === 'development') {\n  Suspense.displayName = 'Suspense'\n}\n","import { createContext } from 'react'\nimport type { DelayProps, SuspenseProps } from '..'\nimport type { OmitKeyof } from '../utility-types'\n\nexport const DelayDefaultPropsContext = createContext<OmitKeyof<DelayProps, 'children'>>({\n  ms: undefined,\n  fallback: undefined,\n})\nif (process.env.NODE_ENV === 'development') {\n  DelayDefaultPropsContext.displayName = 'DelayDefaultPropsContext'\n}\n\nexport const SuspenseDefaultPropsContext = createContext<OmitKeyof<SuspenseProps, 'children'>>({\n  fallback: undefined,\n  clientOnly: undefined,\n})\nif (process.env.NODE_ENV === 'development') {\n  SuspenseDefaultPropsContext.displayName = 'SuspenseDefaultPropsContext'\n}\n","import { Suspense, type SuspenseProps } from 'react'\nimport { ClientOnly } from '../ClientOnly'\n\nexport const SuspenseClientOnly = (props: SuspenseProps) => (\n  <ClientOnly fallback={props.fallback}>\n    <Suspense {...props} />\n  </ClientOnly>\n)\n\nexport function defineSuspense(\n  options:\n    | {\n        componentPropsClientOnly: true\n        defaultPropsClientOnly?: boolean\n      }\n    | {\n        componentPropsClientOnly?: undefined\n        defaultPropsClientOnly: true\n      }\n): typeof SuspenseClientOnly\n\nexport function defineSuspense(options: {\n  componentPropsClientOnly?: boolean\n  defaultPropsClientOnly?: boolean\n}): typeof Suspense\n\nexport function defineSuspense({\n  defaultPropsClientOnly,\n  componentPropsClientOnly,\n}: {\n  defaultPropsClientOnly?: boolean\n  componentPropsClientOnly?: boolean\n}): typeof SuspenseClientOnly | typeof Suspense {\n  return (componentPropsClientOnly ?? defaultPropsClientOnly) ? SuspenseClientOnly : Suspense\n}\n","import { useSyncExternalStore } from 'react'\nimport { noop } from '../utils/noop'\n\nconst emptySubscribe = () => noop\nconst getSnapshot = () => true\nconst getServerSnapshot = () => false\nexport const useIsClient = () => useSyncExternalStore(emptySubscribe, getSnapshot, getServerSnapshot)\n","export const noop = (): void => {}\n","import type { ReactNode } from 'react'\nimport { useIsClient } from './hooks'\n\nexport interface ClientOnlyProps {\n  children: ReactNode\n  fallback?: ReactNode\n}\n\n/**\n * This component ensures its children are only rendered on the client-side.\n * @see {@link https://suspensive.org/docs/react/ClientOnly Suspensive Docs}\n */\nexport const ClientOnly = ({ children, fallback }: ClientOnlyProps) => <>{useIsClient() ? children : fallback}</>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,kBAAAA;AAAA;AAAA;AAAA,IAAAC,gBAAqE;;;ACArE,mBAA8B;AAIvB,IAAM,+BAA2B,4BAAiD;AAAA,EACvF,IAAI;AAAA,EACJ,UAAU;AACZ,CAAC;AACD,IAAI,QAAQ,IAAI,aAAa,eAAe;AAC1C,2BAAyB,cAAc;AACzC;AAEO,IAAM,kCAA8B,4BAAoD;AAAA,EAC7F,UAAU;AAAA,EACV,YAAY;AACd,CAAC;AACD,IAAI,QAAQ,IAAI,aAAa,eAAe;AAC1C,8BAA4B,cAAc;AAC5C;;;AClBA,IAAAC,gBAA6C;;;ACA7C,IAAAC,gBAAqC;;;ACA9B,IAAM,OAAO,MAAY;AAAC;;;ADGjC,IAAM,iBAAiB,MAAM;AAC7B,IAAM,cAAc,MAAM;AAC1B,IAAM,oBAAoB,MAAM;AACzB,IAAM,cAAc,UAAM,oCAAqB,gBAAgB,aAAa,iBAAiB;;;AEM7B;AAAhE,IAAM,aAAa,CAAC,EAAE,UAAU,SAAS,MAAuB,2EAAG,sBAAY,IAAI,WAAW,UAAS;;;AHP1G,IAAAC,sBAAA;AAFG,IAAM,qBAAqB,CAAC,UACjC,6CAAC,cAAW,UAAU,MAAM,UAC1B,uDAAC,2CAAa,MAAO,GACvB;AAoBK,SAAS,eAAe;AAAA,EAC7B;AAAA,EACA;AACF,GAGgD;AAC9C,UAAQ,8DAA4B,0BAA0B,qBAAqB;AACrF;;;AFCI,IAAAC,sBAAA;AARG,IAAMC,YAAW,CAAC,EAAE,YAAY,UAAU,SAAS,MAAqB;AAC7E,QAAM,mBAAe,0BAAW,2BAA2B;AAC3D,QAAM,kBAAkB,eAAe;AAAA,IACrC,wBAAwB,aAAa;AAAA,IACrC,0BAA0B;AAAA,EAC5B,CAAC;AAED,SACE,6CAAC,mBAAgB,UAAU,aAAa,SAAY,aAAa,WAAW,UAAW,UAAS;AAEpG;AACA,IAAI,QAAQ,IAAI,aAAa,eAAe;AAC1C,EAAAA,UAAS,cAAc;AACzB;","names":["Suspense","import_react","import_react","import_react","import_jsx_runtime","import_jsx_runtime","Suspense"]}