/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Rengo
 * OpenAPI spec version: 0.1.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  APIEventRecordReadData
} from './aPIEventRecordReadData'
import type {
  AuthResponseData
} from './authResponseData'
import type {
  BaseModelReadData
} from './baseModelReadData'
import type {
  BasicAuthRequestData
} from './basicAuthRequestData'
import type {
  BodyEventBulkCreateFromExcel
} from './bodyEventBulkCreateFromExcel'
import type {
  ChatRequest
} from './chatRequest'
import type {
  ChatResponse
} from './chatResponse'
import type {
  CompanyRecordCreateData
} from './companyRecordCreateData'
import type {
  CompanyRecordReadData
} from './companyRecordReadData'
import type {
  CompanyRecordUpdateData
} from './companyRecordUpdateData'
import type {
  DataConnectorIntegrationRecordCreateData
} from './dataConnectorIntegrationRecordCreateData'
import type {
  DataConnectorIntegrationRecordReadData
} from './dataConnectorIntegrationRecordReadData'
import type {
  DataConnectorIntegrationRecordUpdateData
} from './dataConnectorIntegrationRecordUpdateData'
import type {
  DataStoreFieldEventCreateData
} from './dataStoreFieldEventCreateData'
import type {
  DataStoreFieldEventReadData
} from './dataStoreFieldEventReadData'
import type {
  DataStoreRecordCreateData
} from './dataStoreRecordCreateData'
import type {
  DataStoreRecordReadData
} from './dataStoreRecordReadData'
import type {
  DataStoreRecordRecordReadData
} from './dataStoreRecordRecordReadData'
import type {
  DataStoreRecordUpdateData
} from './dataStoreRecordUpdateData'
import type {
  DataStoreTableRecordCreateData
} from './dataStoreTableRecordCreateData'
import type {
  DataStoreTableRecordReadData
} from './dataStoreTableRecordReadData'
import type {
  DataStoreTableRecordUpdateData
} from './dataStoreTableRecordUpdateData'
import type {
  DataStoreTableSchemaReadData
} from './dataStoreTableSchemaReadData'
import type {
  DataStoreTableSearchData
} from './dataStoreTableSearchData'
import type {
  DataStoreTableSearchResult
} from './dataStoreTableSearchResult'
import type {
  DataStoreTableTableDataRetrieveParams
} from './dataStoreTableTableDataRetrieveParams'
import type {
  DocumentPresignedReadData
} from './documentPresignedReadData'
import type {
  DocumentRecordCreateData
} from './documentRecordCreateData'
import type {
  DocumentRecordUpdateData
} from './documentRecordUpdateData'
import type {
  EventBulkCreateFromExcelParams
} from './eventBulkCreateFromExcelParams'
import type {
  EventBulkCreateParams
} from './eventBulkCreateParams'
import type {
  EventBulkDeleteParams
} from './eventBulkDeleteParams'
import type {
  EventCreateParams
} from './eventCreateParams'
import type {
  EventDeleteParams
} from './eventDeleteParams'
import type {
  ExcelTemplateForBulkCreateGenerateParams
} from './excelTemplateForBulkCreateGenerateParams'
import type {
  FundFamilyRecordCreateData
} from './fundFamilyRecordCreateData'
import type {
  FundFamilyRecordReadData
} from './fundFamilyRecordReadData'
import type {
  FundFamilyRecordUpdateData
} from './fundFamilyRecordUpdateData'
import type {
  LegalEntityRecordCreateData
} from './legalEntityRecordCreateData'
import type {
  LegalEntityRecordReadData
} from './legalEntityRecordReadData'
import type {
  LegalEntityRecordUpdateData
} from './legalEntityRecordUpdateData'
import type {
  ObjectVersionsTimelineRetrieveParams
} from './objectVersionsTimelineRetrieveParams'
import type {
  PersonRecordCreateData
} from './personRecordCreateData'
import type {
  PersonRecordReadData
} from './personRecordReadData'
import type {
  PersonRecordUpdateData
} from './personRecordUpdateData'
import type {
  PingResponseData
} from './pingResponseData'
import type {
  PortfolioCompanyConnectionRequestCreateData
} from './portfolioCompanyConnectionRequestCreateData'
import type {
  PortfolioCompanyDataRequestCreateData
} from './portfolioCompanyDataRequestCreateData'
import type {
  PortfolioCompanyDataRequestFromDocumentCreateData
} from './portfolioCompanyDataRequestFromDocumentCreateData'
import type {
  PortfolioCompanyDataRequestFromDocumentResponseData
} from './portfolioCompanyDataRequestFromDocumentResponseData'
import type {
  PortfolioCompanyDataRequestRecordReadData
} from './portfolioCompanyDataRequestRecordReadData'
import type {
  PortfolioCompanyDataRequestScheduleCompanyRecordCreateData
} from './portfolioCompanyDataRequestScheduleCompanyRecordCreateData'
import type {
  PortfolioCompanyDataRequestScheduleCompanyRecordReadData
} from './portfolioCompanyDataRequestScheduleCompanyRecordReadData'
import type {
  PortfolioCompanyDataRequestScheduleCompanyRecordUpdateData
} from './portfolioCompanyDataRequestScheduleCompanyRecordUpdateData'
import type {
  PortfolioCompanyDataRequestScheduleRecordCreateData
} from './portfolioCompanyDataRequestScheduleRecordCreateData'
import type {
  PortfolioCompanyDataRequestScheduleRecordReadData
} from './portfolioCompanyDataRequestScheduleRecordReadData'
import type {
  PortfolioCompanyDataRequestScheduleRecordUpdateData
} from './portfolioCompanyDataRequestScheduleRecordUpdateData'
import type {
  PortfolioCompanyDataRequestScheduleWithRunDataReadData
} from './portfolioCompanyDataRequestScheduleWithRunDataReadData'
import type {
  PortfolioCompanyDataTemplateRecordCreateData
} from './portfolioCompanyDataTemplateRecordCreateData'
import type {
  PortfolioCompanyDataTemplateRecordReadData
} from './portfolioCompanyDataTemplateRecordReadData'
import type {
  PortfolioCompanyDataTemplateRecordUpdateData
} from './portfolioCompanyDataTemplateRecordUpdateData'
import type {
  PortfolioCompanyDataTemplateTableCreateData
} from './portfolioCompanyDataTemplateTableCreateData'
import type {
  PortfolioCompanyDataTemplateTableRecordReadData
} from './portfolioCompanyDataTemplateTableRecordReadData'
import type {
  PortfolioCompanyDataTemplateTableRecordUpdateData
} from './portfolioCompanyDataTemplateTableRecordUpdateData'
import type {
  PortfolioCompanyDataTemplateTablesListParams
} from './portfolioCompanyDataTemplateTablesListParams'
import type {
  PortfolioCompanyRequestReadData
} from './portfolioCompanyRequestReadData'
import type {
  PortfolioCompanyRequestRecordCreateData
} from './portfolioCompanyRequestRecordCreateData'
import type {
  PortfolioCompanyRequestRecordReadData
} from './portfolioCompanyRequestRecordReadData'
import type {
  PortfolioCompanyRequestRecordUpdateData
} from './portfolioCompanyRequestRecordUpdateData'
import type {
  PortfolioCompanyRequestTransitionParams
} from './portfolioCompanyRequestTransitionParams'
import type {
  PortfolioCompanyRequestsListParams
} from './portfolioCompanyRequestsListParams'
import type {
  PortfolioCompanyRequestsTableDataRetrieveParams
} from './portfolioCompanyRequestsTableDataRetrieveParams'
import type {
  RawEventBulkCreateAPIData
} from './rawEventBulkCreateAPIData'
import type {
  RawEventCreateAPIData
} from './rawEventCreateAPIData'
import type {
  RefreshBasicAuthParams
} from './refreshBasicAuthParams'
import type {
  SecurityClassRecordCreateData
} from './securityClassRecordCreateData'
import type {
  SecurityClassRecordReadData
} from './securityClassRecordReadData'
import type {
  SecurityClassRecordUpdateData
} from './securityClassRecordUpdateData'
import type {
  SecurityOwnershipRecordCreateData
} from './securityOwnershipRecordCreateData'
import type {
  SecurityOwnershipRecordReadData
} from './securityOwnershipRecordReadData'
import type {
  SecurityOwnershipRecordUpdateData
} from './securityOwnershipRecordUpdateData'
import type {
  SecurityRecordCreateData
} from './securityRecordCreateData'
import type {
  SecurityRecordReadData
} from './securityRecordReadData'
import type {
  SecurityRecordUpdateData
} from './securityRecordUpdateData'
import type {
  StakeholderRecordCreateData
} from './stakeholderRecordCreateData'
import type {
  StakeholderRecordReadData
} from './stakeholderRecordReadData'
import type {
  StakeholderRecordUpdateData
} from './stakeholderRecordUpdateData'
import type {
  StytchAuthenticateAuthRequestData
} from './stytchAuthenticateAuthRequestData'
import type {
  TableData
} from './tableData'
import type {
  TableInfo
} from './tableInfo'
import type {
  TenantModelEventRecordReadData
} from './tenantModelEventRecordReadData'
import type {
  TenantRecordCreateData
} from './tenantRecordCreateData'
import type {
  TenantRecordReadData
} from './tenantRecordReadData'
import type {
  TenantRecordUpdateData
} from './tenantRecordUpdateData'
import type {
  TimelineData
} from './timelineData'
import type {
  UserRecordCreateData
} from './userRecordCreateData'
import type {
  UserRecordReadData
} from './userRecordReadData'
import type {
  UserRecordUpdateData
} from './userRecordUpdateData'
import type {
  UserTenantRelationshipRecordCreateData
} from './userTenantRelationshipRecordCreateData'
import type {
  UserTenantRelationshipRecordReadData
} from './userTenantRelationshipRecordReadData'
import type {
  VersionReadDataCompanyRecordReadData
} from './versionReadDataCompanyRecordReadData'
import type {
  VersionReadDataFundFamilyRecordReadData
} from './versionReadDataFundFamilyRecordReadData'
import type {
  VersionReadDataLegalEntityRecordReadData
} from './versionReadDataLegalEntityRecordReadData'
import type {
  VersionReadDataPersonRecordReadData
} from './versionReadDataPersonRecordReadData'
import type {
  VersionReadDataPortfolioCompanyDataRequestScheduleRecordReadData
} from './versionReadDataPortfolioCompanyDataRequestScheduleRecordReadData'
import type {
  VersionReadDataPortfolioCompanyDataTemplateRecordReadData
} from './versionReadDataPortfolioCompanyDataTemplateRecordReadData'
import type {
  VersionReadDataSecurityClassRecordReadData
} from './versionReadDataSecurityClassRecordReadData'
import type {
  VersionReadDataSecurityOwnershipRecordReadData
} from './versionReadDataSecurityOwnershipRecordReadData'
import type {
  VersionReadDataSecurityRecordReadData
} from './versionReadDataSecurityRecordReadData'
import type {
  VersionReadDataStakeholderRecordReadData
} from './versionReadDataStakeholderRecordReadData'




  /**
 * Chat with AI using AWS Bedrock models.

Supports multiple Bedrock models including Claude 3 variants and Titan.
Maintains conversation history for context-aware responses.
 * @summary Chat
 */
export const aiChat = <TData = AxiosResponse<ChatResponse>>(
    chatRequest: ChatRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/ai/chat`,
      chatRequest,options
    );
  }

/**
 * Get list of available Bedrock models.
 * @summary Get Available Models
 */
export const aiModelsRetrieve = <TData = AxiosResponse<string[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/ai/models`,options
    );
  }

/**
 * @summary Refresh Basic Auth
 */
export const refreshBasicAuth = <TData = AxiosResponse<AuthResponseData>>(
    params: RefreshBasicAuthParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/auth/basic/refresh`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Request Basic Auth
 */
export const requestBasicAuth = <TData = AxiosResponse<AuthResponseData>>(
    basicAuthRequestData: BasicAuthRequestData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/auth/basic/request`,
      basicAuthRequestData,options
    );
  }

/**
 * @summary Ping
 */
export const ping = <TData = AxiosResponse<PingResponseData>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/auth/ping`,options
    );
  }

/**
 * @summary Stytch Discovery Authenticate
 */
export const stytchSessionAuthenticate = <TData = AxiosResponse<AuthResponseData>>(
    stytchAuthenticateAuthRequestData: StytchAuthenticateAuthRequestData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/auth/stytch/session`,
      stytchAuthenticateAuthRequestData,options
    );
  }

/**
 * @summary Get Table Columns
 */
export const tableColumnsRetrieve = <TData = AxiosResponse<TableInfo>>(
    tableName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/chart/table/${tableName}/columns`,options
    );
  }

/**
 * @summary List Tables
 */
export const tablesRetrieve = <TData = AxiosResponse<TableInfo[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/chart/tables`,options
    );
  }

/**
 * @summary Create Endpoint
 */
export const companyCreate = <TData = AxiosResponse<CompanyRecordReadData>>(
    companyRecordCreateData: CompanyRecordCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/companies/`,
      companyRecordCreateData,options
    );
  }

/**
 * @summary Delete Many Endpoint
 */
export const companiesDelete = <TData = AxiosResponse<unknown>>(
    companiesDeleteBody: string[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/companies/bulk`,{data:
      companiesDeleteBody, ...options}
    );
  }

/**
 * @summary Create Many Endpoint
 */
export const companiesBulkCreate = <TData = AxiosResponse<CompanyRecordReadData[]>>(
    companyRecordCreateData: CompanyRecordCreateData[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/companies/bulk`,
      companyRecordCreateData,options
    );
  }

/**
 * @summary Get Companies List Api
 */
export const companiesListRetrieve = <TData = AxiosResponse<CompanyRecordReadData[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/companies/companies`,options
    );
  }

/**
 * @summary Get Company Data Table Api
 */
export const companiesTableDataRetrieve = <TData = AxiosResponse<TableData>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/companies/company-table-data`,options
    );
  }

/**
 * @summary Delete Endpoint
 */
export const companyDelete = <TData = AxiosResponse<unknown>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/companies/${id}`,options
    );
  }

/**
 * @summary Get Endpoint
 */
export const companyRetrieve = <TData = AxiosResponse<CompanyRecordReadData>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/companies/${id}`,options
    );
  }

/**
 * @summary Update Endpoint
 */
export const companyUpdate = <TData = AxiosResponse<CompanyRecordReadData>>(
    id: string,
    companyRecordUpdateData: CompanyRecordUpdateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/companies/${id}`,
      companyRecordUpdateData,options
    );
  }

/**
 * @summary Get Versions Endpoint
 */
export const companyVersionsRetrieve = <TData = AxiosResponse<VersionReadDataCompanyRecordReadData[]>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/companies/${id}/versions`,options
    );
  }

/**
 * @summary Create Endpoint
 */
export const dataConnectorIntegrationCreate = <TData = AxiosResponse<DataConnectorIntegrationRecordReadData>>(
    dataConnectorIntegrationRecordCreateData: DataConnectorIntegrationRecordCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/data-connector/`,
      dataConnectorIntegrationRecordCreateData,options
    );
  }

/**
 * @summary Delete Many Endpoint
 */
export const dataConnectorIntegrationsDelete = <TData = AxiosResponse<unknown>>(
    dataConnectorIntegrationsDeleteBody: string[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/data-connector/bulk`,{data:
      dataConnectorIntegrationsDeleteBody, ...options}
    );
  }

/**
 * @summary Create Many Endpoint
 */
export const dataConnectorIntegrationsBulkCreate = <TData = AxiosResponse<DataConnectorIntegrationRecordReadData[]>>(
    dataConnectorIntegrationRecordCreateData: DataConnectorIntegrationRecordCreateData[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/data-connector/bulk`,
      dataConnectorIntegrationRecordCreateData,options
    );
  }

/**
 * @summary Sync Integration Api
 */
export const dataConnectorIntegrationSync = <TData = AxiosResponse<unknown>>(
    integrationId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/data-connector/integration/${integrationId}/sync`,undefined,options
    );
  }

/**
 * @summary Get Integrations Api
 */
export const dataConnectorIntegrationsRetrieve = <TData = AxiosResponse<DataConnectorIntegrationRecordReadData[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/data-connector/integrations`,options
    );
  }

/**
 * @summary Delete Endpoint
 */
export const dataConnectorIntegrationDelete = <TData = AxiosResponse<unknown>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/data-connector/${id}`,options
    );
  }

/**
 * @summary Get Endpoint
 */
export const dataConnectorIntegrationRetrieve = <TData = AxiosResponse<DataConnectorIntegrationRecordReadData>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/data-connector/${id}`,options
    );
  }

/**
 * @summary Update Endpoint
 */
export const dataConnectorIntegrationUpdate = <TData = AxiosResponse<DataConnectorIntegrationRecordReadData>>(
    id: string,
    dataConnectorIntegrationRecordUpdateData: DataConnectorIntegrationRecordUpdateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/data-connector/${id}`,
      dataConnectorIntegrationRecordUpdateData,options
    );
  }

/**
 * @summary Create Data Store Field Api
 */
export const dataStoreFieldCreate = <TData = AxiosResponse<DataStoreFieldEventReadData>>(
    dataStoreFieldEventCreateData: DataStoreFieldEventCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/data-store/schema/field`,
      dataStoreFieldEventCreateData,options
    );
  }

/**
 * @summary Search Data Store Api
 */
export const dataStoreSearch = <TData = AxiosResponse<DataStoreTableSearchResult>>(
    dataStoreTableSearchData: DataStoreTableSearchData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/data-store/search`,
      dataStoreTableSearchData,options
    );
  }

/**
 * @summary List Data Store Tables Api
 */
export const dataStoreTablesList = <TData = AxiosResponse<DataStoreTableRecordReadData[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/data-store/table`,options
    );
  }

/**
 * Create a new data store table.
 * @summary Create Data Store Table Api
 */
export const dataStoreTableCreate = <TData = AxiosResponse<DataStoreTableRecordReadData>>(
    dataStoreTableRecordCreateData: DataStoreTableRecordCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/data-store/table`,
      dataStoreTableRecordCreateData,options
    );
  }

/**
 * Update an existing data store table.
 * @summary Update Data Store Table Api
 */
export const dataStoreTableUpdate = <TData = AxiosResponse<DataStoreTableRecordReadData>>(
    dataStoreTableId: string,
    dataStoreTableRecordUpdateData: DataStoreTableRecordUpdateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/data-store/table/${dataStoreTableId}`,
      dataStoreTableRecordUpdateData,options
    );
  }

/**
 * @summary Get Data Store Table Api
 */
export const dataStoreTableRetrieve = <TData = AxiosResponse<DataStoreTableRecordReadData>>(
    dataStoreTableId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/data-store/table/${dataStoreTableId}/`,options
    );
  }

/**
 * @summary Create Data Store Record Api
 */
export const dataStoreRecordCreate = <TData = AxiosResponse<DataStoreRecordRecordReadData>>(
    dataStoreTableId: string,
    dataStoreRecordCreateData: DataStoreRecordCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/data-store/table/${dataStoreTableId}/record/`,
      dataStoreRecordCreateData,options
    );
  }

/**
 * @summary Bulk Create Data Store Records Api
 */
export const dataStoreRecordsBulkCreate = <TData = AxiosResponse<DataStoreRecordRecordReadData[]>>(
    dataStoreTableId: string,
    dataStoreRecordCreateData: DataStoreRecordCreateData[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/data-store/table/${dataStoreTableId}/record/bulk`,
      dataStoreRecordCreateData,options
    );
  }

/**
 * @summary Get Data Store Table Record Api
 */
export const dataStoreRecordRetrieve = <TData = AxiosResponse<DataStoreRecordReadData>>(
    dataStoreTableId: string,
    dataStoreRecordId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/data-store/table/${dataStoreTableId}/record/${dataStoreRecordId}/`,options
    );
  }

/**
 * @summary Update Data Store Table Record Api
 */
export const dataStoreRecordUpdate = <TData = AxiosResponse<unknown>>(
    dataStoreTableId: string,
    dataStoreRecordId: string,
    dataStoreRecordUpdateData: DataStoreRecordUpdateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/data-store/table/${dataStoreTableId}/record/${dataStoreRecordId}/`,
      dataStoreRecordUpdateData,options
    );
  }

/**
 * @summary Bulk Update Data Store Records Api
 */
export const dataStoreRecordsBulkUpdate = <TData = AxiosResponse<DataStoreRecordRecordReadData[]>>(
    dataStoreTableId: string,
    tableData: TableData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/data-store/table/${dataStoreTableId}/records/bulk-update/`,
      tableData,options
    );
  }

/**
 * @summary Get Data Store Table Schema Api
 */
export const dataStoreTableSchemaRetrieve = <TData = AxiosResponse<DataStoreTableSchemaReadData>>(
    dataStoreTableId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/data-store/table/${dataStoreTableId}/schema`,options
    );
  }

/**
 * @summary Get Data Store Table Schema Table Data Api
 */
export const dataStoreTableSchemaTableDataRetrieve = <TData = AxiosResponse<TableData>>(
    dataStoreTableId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/data-store/table/${dataStoreTableId}/schema/table-data`,options
    );
  }

/**
 * @summary Get Data Store Table Table Data Api
 */
export const dataStoreTableTableDataRetrieve = <TData = AxiosResponse<TableData>>(
    dataStoreTableId: string,
    params?: DataStoreTableTableDataRetrieveParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/data-store/table/${dataStoreTableId}/table-data`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Get Data Store Tables Table Data Api
 */
export const dataStoreTablesTableDataRetrieve = <TData = AxiosResponse<TableData>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/data-store/tables-table-data`,options
    );
  }

/**
 * @summary Create Endpoint
 */
export const documentCreate = <TData = AxiosResponse<DocumentPresignedReadData>>(
    documentRecordCreateData: DocumentRecordCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/documents/`,
      documentRecordCreateData,options
    );
  }

/**
 * @summary Delete Many Endpoint
 */
export const documentsDelete = <TData = AxiosResponse<unknown>>(
    documentsDeleteBody: string[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/documents/bulk`,{data:
      documentsDeleteBody, ...options}
    );
  }

/**
 * @summary Create Many Endpoint
 */
export const documentsCreateBulk = <TData = AxiosResponse<DocumentPresignedReadData[]>>(
    documentRecordCreateData: DocumentRecordCreateData[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/documents/bulk`,
      documentRecordCreateData,options
    );
  }

/**
 * Generate an Excel template for bulk model creation by model name
 * @summary Generate Excel Template Api
 */
export const excelTemplateGenerate = <TData = AxiosResponse<Blob>>(
    modelName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/documents/excel-template/${modelName}`,{
        responseType: 'blob',
    ...options,}
    );
  }

/**
 * @summary Get Document Data Table Api
 */
export const documentsTableDataRetrieve = <TData = AxiosResponse<TableData>>(
    linkedRecordId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/documents/linked-record/${linkedRecordId}/document-table-data`,options
    );
  }

/**
 * @summary Download Documents Zip Api
 */
export const documentsZipDownload = <TData = AxiosResponse<Blob>>(
    linkedRecordId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/documents/linked-record/${linkedRecordId}/download-zip`,undefined,{
        responseType: 'blob',
    ...options,}
    );
  }

/**
 * @summary Delete Endpoint
 */
export const documentDelete = <TData = AxiosResponse<unknown>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/documents/${id}`,options
    );
  }

/**
 * @summary Get Endpoint
 */
export const documentRetrieve = <TData = AxiosResponse<DocumentPresignedReadData>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/documents/${id}`,options
    );
  }

/**
 * @summary Update Endpoint
 */
export const documentUpdate = <TData = AxiosResponse<DocumentPresignedReadData>>(
    id: string,
    documentRecordUpdateData: DocumentRecordUpdateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/documents/${id}`,
      documentRecordUpdateData,options
    );
  }

/**
 * @summary Create Endpoint
 */
export const entityCreate = <TData = AxiosResponse<LegalEntityRecordReadData>>(
    legalEntityRecordCreateData: LegalEntityRecordCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/entity-structure/entity/`,
      legalEntityRecordCreateData,options
    );
  }

/**
 * @summary Delete Many Endpoint
 */
export const entitiesDelete = <TData = AxiosResponse<unknown>>(
    entitiesDeleteBody: string[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/entity-structure/entity/bulk`,{data:
      entitiesDeleteBody, ...options}
    );
  }

/**
 * @summary Create Many Endpoint
 */
export const entitiesBulkCreate = <TData = AxiosResponse<LegalEntityRecordReadData[]>>(
    legalEntityRecordCreateData: LegalEntityRecordCreateData[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/entity-structure/entity/bulk`,
      legalEntityRecordCreateData,options
    );
  }

/**
 * @summary Get Entity Data Table Api
 */
export const entitiesTableDataRetrieve = <TData = AxiosResponse<TableData>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/entity-structure/entity/entity-table-data`,options
    );
  }

/**
 * @summary Delete Endpoint
 */
export const entityDelete = <TData = AxiosResponse<unknown>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/entity-structure/entity/${id}`,options
    );
  }

/**
 * @summary Get Endpoint
 */
export const entityRetrieve = <TData = AxiosResponse<LegalEntityRecordReadData>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/entity-structure/entity/${id}`,options
    );
  }

/**
 * @summary Update Endpoint
 */
export const entityUpdate = <TData = AxiosResponse<LegalEntityRecordReadData>>(
    id: string,
    legalEntityRecordUpdateData: LegalEntityRecordUpdateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/entity-structure/entity/${id}`,
      legalEntityRecordUpdateData,options
    );
  }

/**
 * @summary Get Versions Endpoint
 */
export const entityVersionsRetrieve = <TData = AxiosResponse<VersionReadDataLegalEntityRecordReadData[]>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/entity-structure/entity/${id}/versions`,options
    );
  }

/**
 * @summary Create Endpoint
 */
export const fundFamilyCreate = <TData = AxiosResponse<FundFamilyRecordReadData>>(
    fundFamilyRecordCreateData: FundFamilyRecordCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/entity-structure/fund-family/`,
      fundFamilyRecordCreateData,options
    );
  }

/**
 * @summary Delete Many Endpoint
 */
export const fundFamiliesDelete = <TData = AxiosResponse<unknown>>(
    fundFamiliesDeleteBody: string[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/entity-structure/fund-family/bulk`,{data:
      fundFamiliesDeleteBody, ...options}
    );
  }

/**
 * @summary Create Many Endpoint
 */
export const fundFamiliesBulkCreate = <TData = AxiosResponse<FundFamilyRecordReadData[]>>(
    fundFamilyRecordCreateData: FundFamilyRecordCreateData[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/entity-structure/fund-family/bulk`,
      fundFamilyRecordCreateData,options
    );
  }

/**
 * @summary Get Fund Family Data Table Api
 */
export const fundFamiliesTableDataRetrieve = <TData = AxiosResponse<TableData>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/entity-structure/fund-family/fund-family-table-data`,options
    );
  }

/**
 * @summary Delete Endpoint
 */
export const fundFamilyDelete = <TData = AxiosResponse<unknown>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/entity-structure/fund-family/${id}`,options
    );
  }

/**
 * @summary Get Endpoint
 */
export const fundFamilyRetrieve = <TData = AxiosResponse<FundFamilyRecordReadData>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/entity-structure/fund-family/${id}`,options
    );
  }

/**
 * @summary Update Endpoint
 */
export const fundFamilyUpdate = <TData = AxiosResponse<FundFamilyRecordReadData>>(
    id: string,
    fundFamilyRecordUpdateData: FundFamilyRecordUpdateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/entity-structure/fund-family/${id}`,
      fundFamilyRecordUpdateData,options
    );
  }

/**
 * @summary Get Versions Endpoint
 */
export const fundFamilyVersionsRetrieve = <TData = AxiosResponse<VersionReadDataFundFamilyRecordReadData[]>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/entity-structure/fund-family/${id}/versions`,options
    );
  }

/**
 * @summary Create Endpoint
 */
export const securityClassCreate = <TData = AxiosResponse<SecurityClassRecordReadData>>(
    securityClassRecordCreateData: SecurityClassRecordCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/entity-structure/security-class/`,
      securityClassRecordCreateData,options
    );
  }

/**
 * @summary Delete Many Endpoint
 */
export const securityClassesDelete = <TData = AxiosResponse<unknown>>(
    securityClassesDeleteBody: string[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/entity-structure/security-class/bulk`,{data:
      securityClassesDeleteBody, ...options}
    );
  }

/**
 * @summary Create Many Endpoint
 */
export const securityClassesBulkCreate = <TData = AxiosResponse<SecurityClassRecordReadData[]>>(
    securityClassRecordCreateData: SecurityClassRecordCreateData[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/entity-structure/security-class/bulk`,
      securityClassRecordCreateData,options
    );
  }

/**
 * @summary Get Security Class Data Table Api
 */
export const securityClassesTableDataRetrieve = <TData = AxiosResponse<TableData>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/entity-structure/security-class/security-class-table-data`,options
    );
  }

/**
 * @summary Delete Endpoint
 */
export const securityClassDelete = <TData = AxiosResponse<unknown>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/entity-structure/security-class/${id}`,options
    );
  }

/**
 * @summary Get Endpoint
 */
export const securityClassRetrieve = <TData = AxiosResponse<SecurityClassRecordReadData>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/entity-structure/security-class/${id}`,options
    );
  }

/**
 * @summary Update Endpoint
 */
export const securityClassUpdate = <TData = AxiosResponse<SecurityClassRecordReadData>>(
    id: string,
    securityClassRecordUpdateData: SecurityClassRecordUpdateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/entity-structure/security-class/${id}`,
      securityClassRecordUpdateData,options
    );
  }

/**
 * @summary Get Versions Endpoint
 */
export const securityClassVersionsRetrieve = <TData = AxiosResponse<VersionReadDataSecurityClassRecordReadData[]>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/entity-structure/security-class/${id}/versions`,options
    );
  }

/**
 * @summary Create Endpoint
 */
export const securityOwnershipCreate = <TData = AxiosResponse<SecurityOwnershipRecordReadData>>(
    securityOwnershipRecordCreateData: SecurityOwnershipRecordCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/entity-structure/security-ownership/`,
      securityOwnershipRecordCreateData,options
    );
  }

/**
 * @summary Delete Many Endpoint
 */
export const securityOwnershipsDelete = <TData = AxiosResponse<unknown>>(
    securityOwnershipsDeleteBody: string[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/entity-structure/security-ownership/bulk`,{data:
      securityOwnershipsDeleteBody, ...options}
    );
  }

/**
 * @summary Create Many Endpoint
 */
export const securityOwnershipsBulkCreate = <TData = AxiosResponse<SecurityOwnershipRecordReadData[]>>(
    securityOwnershipRecordCreateData: SecurityOwnershipRecordCreateData[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/entity-structure/security-ownership/bulk`,
      securityOwnershipRecordCreateData,options
    );
  }

/**
 * @summary Get Security Ownership Data Table Api
 */
export const securityOwnershipsTableDataRetrieve = <TData = AxiosResponse<TableData>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/entity-structure/security-ownership/security-ownership-table-data`,options
    );
  }

/**
 * @summary Delete Endpoint
 */
export const securityOwnershipDelete = <TData = AxiosResponse<unknown>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/entity-structure/security-ownership/${id}`,options
    );
  }

/**
 * @summary Get Endpoint
 */
export const securityOwnershipRetrieve = <TData = AxiosResponse<SecurityOwnershipRecordReadData>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/entity-structure/security-ownership/${id}`,options
    );
  }

/**
 * @summary Update Endpoint
 */
export const securityOwnershipUpdate = <TData = AxiosResponse<SecurityOwnershipRecordReadData>>(
    id: string,
    securityOwnershipRecordUpdateData: SecurityOwnershipRecordUpdateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/entity-structure/security-ownership/${id}`,
      securityOwnershipRecordUpdateData,options
    );
  }

/**
 * @summary Get Versions Endpoint
 */
export const securityOwnershipVersionsRetrieve = <TData = AxiosResponse<VersionReadDataSecurityOwnershipRecordReadData[]>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/entity-structure/security-ownership/${id}/versions`,options
    );
  }

/**
 * @summary Create Endpoint
 */
export const securityCreate = <TData = AxiosResponse<SecurityRecordReadData>>(
    securityRecordCreateData: SecurityRecordCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/entity-structure/security/`,
      securityRecordCreateData,options
    );
  }

/**
 * @summary Delete Many Endpoint
 */
export const securitiesDelete = <TData = AxiosResponse<unknown>>(
    securitiesDeleteBody: string[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/entity-structure/security/bulk`,{data:
      securitiesDeleteBody, ...options}
    );
  }

/**
 * @summary Create Many Endpoint
 */
export const securitiesBulkCreate = <TData = AxiosResponse<SecurityRecordReadData[]>>(
    securityRecordCreateData: SecurityRecordCreateData[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/entity-structure/security/bulk`,
      securityRecordCreateData,options
    );
  }

/**
 * @summary Get Security Data Table Api
 */
export const securitiesTableDataRetrieve = <TData = AxiosResponse<TableData>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/entity-structure/security/security-table-data`,options
    );
  }

/**
 * @summary Delete Endpoint
 */
export const securityDelete = <TData = AxiosResponse<unknown>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/entity-structure/security/${id}`,options
    );
  }

/**
 * @summary Get Endpoint
 */
export const securityRetrieve = <TData = AxiosResponse<SecurityRecordReadData>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/entity-structure/security/${id}`,options
    );
  }

/**
 * @summary Update Endpoint
 */
export const securityUpdate = <TData = AxiosResponse<SecurityRecordReadData>>(
    id: string,
    securityRecordUpdateData: SecurityRecordUpdateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/entity-structure/security/${id}`,
      securityRecordUpdateData,options
    );
  }

/**
 * @summary Get Versions Endpoint
 */
export const securityVersionsRetrieve = <TData = AxiosResponse<VersionReadDataSecurityRecordReadData[]>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/entity-structure/security/${id}/versions`,options
    );
  }

/**
 * @summary Create Endpoint
 */
export const stakeholderCreate = <TData = AxiosResponse<StakeholderRecordReadData>>(
    stakeholderRecordCreateData: StakeholderRecordCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/entity-structure/stakeholder/`,
      stakeholderRecordCreateData,options
    );
  }

/**
 * @summary Delete Many Endpoint
 */
export const stakeholdersDelete = <TData = AxiosResponse<unknown>>(
    stakeholdersDeleteBody: string[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/entity-structure/stakeholder/bulk`,{data:
      stakeholdersDeleteBody, ...options}
    );
  }

/**
 * @summary Create Many Endpoint
 */
export const stakeholdersBulkCreate = <TData = AxiosResponse<StakeholderRecordReadData[]>>(
    stakeholderRecordCreateData: StakeholderRecordCreateData[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/entity-structure/stakeholder/bulk`,
      stakeholderRecordCreateData,options
    );
  }

/**
 * @summary Get Stakeholder Data Table Api
 */
export const stakeholdersTableDataRetrieve = <TData = AxiosResponse<TableData>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/entity-structure/stakeholder/stakeholder-table-data`,options
    );
  }

/**
 * @summary Delete Endpoint
 */
export const stakeholderDelete = <TData = AxiosResponse<unknown>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/entity-structure/stakeholder/${id}`,options
    );
  }

/**
 * @summary Get Endpoint
 */
export const stakeholderRetrieve = <TData = AxiosResponse<StakeholderRecordReadData>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/entity-structure/stakeholder/${id}`,options
    );
  }

/**
 * @summary Update Endpoint
 */
export const stakeholderUpdate = <TData = AxiosResponse<StakeholderRecordReadData>>(
    id: string,
    stakeholderRecordUpdateData: StakeholderRecordUpdateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/entity-structure/stakeholder/${id}`,
      stakeholderRecordUpdateData,options
    );
  }

/**
 * @summary Get Versions Endpoint
 */
export const stakeholderVersionsRetrieve = <TData = AxiosResponse<VersionReadDataStakeholderRecordReadData[]>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/entity-structure/stakeholder/${id}/versions`,options
    );
  }

/**
 * @summary Get Api Event Api
 */
export const apiEventRetrieve = <TData = AxiosResponse<APIEventRecordReadData>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/events/api-event/${id}`,options
    );
  }

/**
 * @summary Get Event Timeline
 */
export const eventTimelineRetrieve = <TData = AxiosResponse<TimelineData>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/events/api-event/${id}/timeline`,options
    );
  }

/**
 * @summary Bulk Create Event Api
 */
export const eventBulkCreate = <TData = AxiosResponse<unknown[]>>(
    rawEventBulkCreateAPIData: RawEventBulkCreateAPIData,
    params: EventBulkCreateParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/events/bulk-create`,
      rawEventBulkCreateAPIData,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Upload an Excel file and create multiple records based on the operation_id.
The Excel file should have column headers matching the field names of the target model.
Only .xlsx files are supported.
 * @summary Bulk Create From Excel Api
 */
export const eventBulkCreateFromExcel = <TData = AxiosResponse<BaseModelReadData[]>>(
    bodyEventBulkCreateFromExcel: BodyEventBulkCreateFromExcel,
    params: EventBulkCreateFromExcelParams, options?: AxiosRequestConfig
 ): Promise<TData> => {const formData = new FormData();
formData.append('file', bodyEventBulkCreateFromExcel.file)

    return axios.post(
      `/api/events/bulk-create-from-excel`,
      formData,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Bulk Delete Event Api
 */
export const eventBulkDelete = <TData = AxiosResponse<unknown>>(
    eventBulkDeleteBody: string[],
    params: EventBulkDeleteParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/events/bulk-delete`,
      eventBulkDeleteBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Create Event Api
 */
export const eventCreate = <TData = AxiosResponse<unknown>>(
    rawEventCreateAPIData: RawEventCreateAPIData,
    params: EventCreateParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/events/create`,
      rawEventCreateAPIData,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Delete Event Api
 */
export const eventDelete = <TData = AxiosResponse<unknown>>(
    params: EventDeleteParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/events/delete`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Generate an Excel template for bulk create events based on the operation_id.
For CREATE_DATA_STORE_RECORD operations, provide data_store_table_id to generate a template based on the table schema.
The template includes field descriptions, requirements, and examples.
 * @summary Generate Excel Template Api
 */
export const excelTemplateForBulkCreateGenerate = <TData = AxiosResponse<Blob>>(
    params: ExcelTemplateForBulkCreateGenerateParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/events/excel-template`,undefined,{
        responseType: 'blob',
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Get Events Table Data Api
 */
export const eventsTableDataRetrieve = <TData = AxiosResponse<TableData>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/events/history-table-data`,options
    );
  }

/**
 * @summary Get Object Versions Timeline
 */
export const objectVersionsTimelineRetrieve = <TData = AxiosResponse<TimelineData>>(
    id: string,
    params: ObjectVersionsTimelineRetrieveParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/events/object/${id}/versions/timeline`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Get tenant model events with optional filtering.
 * @summary Get Tenant Model Event Api
 */
export const tenantModelEventRetrieve = <TData = AxiosResponse<TenantModelEventRecordReadData>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/events/tenant-model-event/${id}`,options
    );
  }

/**
 * @summary Create Endpoint
 */
export const personCreate = <TData = AxiosResponse<PersonRecordReadData>>(
    personRecordCreateData: PersonRecordCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/people/`,
      personRecordCreateData,options
    );
  }

/**
 * @summary Delete Many Endpoint
 */
export const peopleDelete = <TData = AxiosResponse<unknown>>(
    peopleDeleteBody: string[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/people/bulk`,{data:
      peopleDeleteBody, ...options}
    );
  }

/**
 * @summary Create Many Endpoint
 */
export const peopleBulkCreate = <TData = AxiosResponse<PersonRecordReadData[]>>(
    personRecordCreateData: PersonRecordCreateData[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/people/bulk`,
      personRecordCreateData,options
    );
  }

/**
 * @summary Get Person Data Table Api
 */
export const peopleTableDataRetrieve = <TData = AxiosResponse<TableData>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/people/person-table-data`,options
    );
  }

/**
 * @summary Delete Endpoint
 */
export const personDelete = <TData = AxiosResponse<unknown>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/people/${id}`,options
    );
  }

/**
 * @summary Get Endpoint
 */
export const personRetrieve = <TData = AxiosResponse<PersonRecordReadData>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/people/${id}`,options
    );
  }

/**
 * @summary Update Endpoint
 */
export const personUpdate = <TData = AxiosResponse<PersonRecordReadData>>(
    id: string,
    personRecordUpdateData: PersonRecordUpdateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/people/${id}`,
      personRecordUpdateData,options
    );
  }

/**
 * @summary Get Versions Endpoint
 */
export const personVersionsRetrieve = <TData = AxiosResponse<VersionReadDataPersonRecordReadData[]>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/people/${id}/versions`,options
    );
  }

/**
 * @summary Get Portfolio Company Connections Api
 */
export const portfolioCompanyRequestsList = <TData = AxiosResponse<PortfolioCompanyRequestRecordReadData[]>>(
    params?: PortfolioCompanyRequestsListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/portfolio-company/requests/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Create Endpoint
 */
export const portfolioCompanyRequestCreate = <TData = AxiosResponse<PortfolioCompanyRequestRecordReadData>>(
    portfolioCompanyRequestRecordCreateData: PortfolioCompanyRequestRecordCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/portfolio-company/requests/`,
      portfolioCompanyRequestRecordCreateData,options
    );
  }

/**
 * @summary Delete Many Endpoint
 */
export const portfolioCompanyRequestsDelete = <TData = AxiosResponse<unknown>>(
    portfolioCompanyRequestsDeleteBody: string[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/portfolio-company/requests/bulk`,{data:
      portfolioCompanyRequestsDeleteBody, ...options}
    );
  }

/**
 * @summary Create Many Endpoint
 */
export const portfolioCompanyRequestsBulkCreate = <TData = AxiosResponse<PortfolioCompanyRequestRecordReadData[]>>(
    portfolioCompanyRequestRecordCreateData: PortfolioCompanyRequestRecordCreateData[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/portfolio-company/requests/bulk`,
      portfolioCompanyRequestRecordCreateData,options
    );
  }

/**
 * @summary Create Portfolio Company Connection Api
 */
export const portfolioCompanyConnectionRequestCreate = <TData = AxiosResponse<PortfolioCompanyRequestRecordReadData>>(
    portfolioCompanyConnectionRequestCreateData: PortfolioCompanyConnectionRequestCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/portfolio-company/requests/connections/`,
      portfolioCompanyConnectionRequestCreateData,options
    );
  }

/**
 * @summary Create Endpoint
 */
export const portfolioCompanyDataRequestScheduleCompanyAssociationCreate = <TData = AxiosResponse<PortfolioCompanyDataRequestScheduleCompanyRecordReadData>>(
    portfolioCompanyDataRequestScheduleCompanyRecordCreateData: PortfolioCompanyDataRequestScheduleCompanyRecordCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/portfolio-company/requests/data-request-schedule-company-associations/`,
      portfolioCompanyDataRequestScheduleCompanyRecordCreateData,options
    );
  }

/**
 * @summary Delete Many Endpoint
 */
export const portfolioCompanyDataRequestScheduleCompanyAssociationsDelete = <TData = AxiosResponse<unknown>>(
    portfolioCompanyDataRequestScheduleCompanyAssociationsDeleteBody: string[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/portfolio-company/requests/data-request-schedule-company-associations/bulk`,{data:
      portfolioCompanyDataRequestScheduleCompanyAssociationsDeleteBody, ...options}
    );
  }

/**
 * @summary Create Many Endpoint
 */
export const portfolioCompanyDataRequestScheduleCompanyAssociationsBulkCreate = <TData = AxiosResponse<PortfolioCompanyDataRequestScheduleCompanyRecordReadData[]>>(
    portfolioCompanyDataRequestScheduleCompanyRecordCreateData: PortfolioCompanyDataRequestScheduleCompanyRecordCreateData[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/portfolio-company/requests/data-request-schedule-company-associations/bulk`,
      portfolioCompanyDataRequestScheduleCompanyRecordCreateData,options
    );
  }

/**
 * @summary List Portfolio Company Data Request Schedule Companies Api
 */
export const portfolioCompanyDataRequestScheduleCompaniesList = <TData = AxiosResponse<PortfolioCompanyDataRequestScheduleCompanyRecordReadData[]>>(
    scheduleId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/portfolio-company/requests/data-request-schedule-company-associations/schedule/${scheduleId}/associations`,options
    );
  }

/**
 * @summary Get Portfolio Company Data Request Schedule Companies Table Data Api
 */
export const portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve = <TData = AxiosResponse<TableData>>(
    scheduleId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/portfolio-company/requests/data-request-schedule-company-associations/schedule/${scheduleId}/associations/table-data`,options
    );
  }

/**
 * @summary Delete Endpoint
 */
export const portfolioCompanyDataRequestScheduleCompanyAssociationDelete = <TData = AxiosResponse<unknown>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/portfolio-company/requests/data-request-schedule-company-associations/${id}`,options
    );
  }

/**
 * @summary Get Endpoint
 */
export const portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve = <TData = AxiosResponse<PortfolioCompanyDataRequestScheduleCompanyRecordReadData>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/portfolio-company/requests/data-request-schedule-company-associations/${id}`,options
    );
  }

/**
 * @summary Update Endpoint
 */
export const portfolioCompanyDataRequestScheduleCompanyAssociationUpdate = <TData = AxiosResponse<PortfolioCompanyDataRequestScheduleCompanyRecordReadData>>(
    id: string,
    portfolioCompanyDataRequestScheduleCompanyRecordUpdateData: PortfolioCompanyDataRequestScheduleCompanyRecordUpdateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/portfolio-company/requests/data-request-schedule-company-associations/${id}`,
      portfolioCompanyDataRequestScheduleCompanyRecordUpdateData,options
    );
  }

/**
 * @summary List Portfolio Company Data Request Schedules Api
 */
export const portfolioCompanyDataRequestSchedulesList = <TData = AxiosResponse<PortfolioCompanyDataRequestScheduleRecordReadData[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/`,options
    );
  }

/**
 * @summary Create Endpoint
 */
export const portfolioCompanyDataRequestScheduleCreate = <TData = AxiosResponse<PortfolioCompanyDataRequestScheduleRecordReadData>>(
    portfolioCompanyDataRequestScheduleRecordCreateData: PortfolioCompanyDataRequestScheduleRecordCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/`,
      portfolioCompanyDataRequestScheduleRecordCreateData,options
    );
  }

/**
 * @summary Delete Many Endpoint
 */
export const portfolioCompanyDataRequestSchedulesDelete = <TData = AxiosResponse<unknown>>(
    portfolioCompanyDataRequestSchedulesDeleteBody: string[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/bulk`,{data:
      portfolioCompanyDataRequestSchedulesDeleteBody, ...options}
    );
  }

/**
 * @summary Create Many Endpoint
 */
export const portfolioCompanyDataRequestSchedulesBulkCreate = <TData = AxiosResponse<PortfolioCompanyDataRequestScheduleRecordReadData[]>>(
    portfolioCompanyDataRequestScheduleRecordCreateData: PortfolioCompanyDataRequestScheduleRecordCreateData[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/bulk`,
      portfolioCompanyDataRequestScheduleRecordCreateData,options
    );
  }

/**
 * @summary Get Portfolio Company Data Request Schedules Table Data Api
 */
export const portfolioCompanyDataRequestSchedulesTableDataRetrieve = <TData = AxiosResponse<TableData>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/table-data`,options
    );
  }

/**
 * @summary Delete Endpoint
 */
export const portfolioCompanyDataRequestScheduleDelete = <TData = AxiosResponse<unknown>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/${id}`,options
    );
  }

/**
 * @summary Get Endpoint
 */
export const portfolioCompanyDataRequestScheduleRetrieve = <TData = AxiosResponse<PortfolioCompanyDataRequestScheduleRecordReadData>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/${id}`,options
    );
  }

/**
 * @summary Update Endpoint
 */
export const portfolioCompanyDataRequestScheduleUpdate = <TData = AxiosResponse<PortfolioCompanyDataRequestScheduleRecordReadData>>(
    id: string,
    portfolioCompanyDataRequestScheduleRecordUpdateData: PortfolioCompanyDataRequestScheduleRecordUpdateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/${id}`,
      portfolioCompanyDataRequestScheduleRecordUpdateData,options
    );
  }

/**
 * @summary Get Versions Endpoint
 */
export const portfolioCompanyDataRequestScheduleVersionsRetrieve = <TData = AxiosResponse<VersionReadDataPortfolioCompanyDataRequestScheduleRecordReadData[]>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/${id}/versions`,options
    );
  }

/**
 * @summary Get Portfolio Company Data Request Schedule Runs Table Data Api
 */
export const portfolioCompanyDataRequestScheduleRunsTableDataRetrieve = <TData = AxiosResponse<TableData>>(
    scheduleId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/${scheduleId}/runs/table-data`,options
    );
  }

/**
 * @summary Get Portfolio Company Data Request Schedule With Run Data Api
 */
export const portfolioCompanyDataRequestScheduleWithRunDataRetrieve = <TData = AxiosResponse<PortfolioCompanyDataRequestScheduleWithRunDataReadData>>(
    scheduleId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/${scheduleId}/with-run-data`,options
    );
  }

/**
 * @summary Create Portfolio Company Data Request Api
 */
export const portfolioCompanyDataRequestCreate = <TData = AxiosResponse<PortfolioCompanyDataRequestRecordReadData[]>>(
    portfolioCompanyDataRequestCreateData: PortfolioCompanyDataRequestCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/portfolio-company/requests/data-requests/`,
      portfolioCompanyDataRequestCreateData,options
    );
  }

/**
 * @summary Create Portfolio Request Table Data From Document Api
 */
export const portfolioCompanyDataRequestFromDocument = <TData = AxiosResponse<PortfolioCompanyDataRequestFromDocumentResponseData>>(
    portfolioCompanyDataRequestFromDocumentCreateData: PortfolioCompanyDataRequestFromDocumentCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/portfolio-company/requests/data-requests/request/from-document`,
      portfolioCompanyDataRequestFromDocumentCreateData,options
    );
  }

/**
 * @summary Get Portfolio Company Data Request Api
 */
export const portfolioCompanyDataRequestRetrieve = <TData = AxiosResponse<PortfolioCompanyDataRequestRecordReadData>>(
    requestId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/portfolio-company/requests/data-requests/request/${requestId}/data-request`,options
    );
  }

/**
 * @summary List Portfolio Company Data Template Tables Api
 */
export const portfolioCompanyDataTemplateTablesList = <TData = AxiosResponse<PortfolioCompanyDataTemplateTableRecordReadData[]>>(
    params?: PortfolioCompanyDataTemplateTablesListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/portfolio-company/requests/data-template-tables/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Create Endpoint
 */
export const portfolioCompanyDataTemplateTableCreate = <TData = AxiosResponse<PortfolioCompanyDataTemplateTableRecordReadData>>(
    portfolioCompanyDataTemplateTableCreateData: PortfolioCompanyDataTemplateTableCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/portfolio-company/requests/data-template-tables/`,
      portfolioCompanyDataTemplateTableCreateData,options
    );
  }

/**
 * @summary Delete Many Endpoint
 */
export const portfolioCompanyDataTemplateTablesDelete = <TData = AxiosResponse<unknown>>(
    portfolioCompanyDataTemplateTablesDeleteBody: string[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/portfolio-company/requests/data-template-tables/bulk`,{data:
      portfolioCompanyDataTemplateTablesDeleteBody, ...options}
    );
  }

/**
 * @summary Create Many Endpoint
 */
export const portfolioCompanyDataTemplateTablesBulkCreate = <TData = AxiosResponse<PortfolioCompanyDataTemplateTableRecordReadData[]>>(
    portfolioCompanyDataTemplateTableCreateData: PortfolioCompanyDataTemplateTableCreateData[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/portfolio-company/requests/data-template-tables/bulk`,
      portfolioCompanyDataTemplateTableCreateData,options
    );
  }

/**
 * @summary Get Portfolio Company Data Template Tables Table Data Api
 */
export const portfolioCompanyDataTemplateTablesTableDataRetrieve = <TData = AxiosResponse<TableData>>(
    templateId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/portfolio-company/requests/data-template-tables/template/${templateId}/table-data`,options
    );
  }

/**
 * @summary Delete Endpoint
 */
export const portfolioCompanyDataTemplateTableDelete = <TData = AxiosResponse<unknown>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/portfolio-company/requests/data-template-tables/${id}`,options
    );
  }

/**
 * @summary Get Endpoint
 */
export const portfolioCompanyDataTemplateTableRetrieve = <TData = AxiosResponse<PortfolioCompanyDataTemplateTableRecordReadData>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/portfolio-company/requests/data-template-tables/${id}`,options
    );
  }

/**
 * @summary Update Endpoint
 */
export const portfolioCompanyDataTemplateTableUpdate = <TData = AxiosResponse<PortfolioCompanyDataTemplateTableRecordReadData>>(
    id: string,
    portfolioCompanyDataTemplateTableRecordUpdateData: PortfolioCompanyDataTemplateTableRecordUpdateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/portfolio-company/requests/data-template-tables/${id}`,
      portfolioCompanyDataTemplateTableRecordUpdateData,options
    );
  }

/**
 * @summary List Portfolio Company Data Templates Api
 */
export const portfolioCompanyDataTemplatesList = <TData = AxiosResponse<PortfolioCompanyDataTemplateRecordReadData[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/portfolio-company/requests/data-templates/`,options
    );
  }

/**
 * @summary Create Endpoint
 */
export const portfolioCompanyDataTemplateCreate = <TData = AxiosResponse<PortfolioCompanyDataTemplateRecordReadData>>(
    portfolioCompanyDataTemplateRecordCreateData: PortfolioCompanyDataTemplateRecordCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/portfolio-company/requests/data-templates/`,
      portfolioCompanyDataTemplateRecordCreateData,options
    );
  }

/**
 * @summary Delete Many Endpoint
 */
export const portfolioCompanyDataTemplatesDelete = <TData = AxiosResponse<unknown>>(
    portfolioCompanyDataTemplatesDeleteBody: string[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/portfolio-company/requests/data-templates/bulk`,{data:
      portfolioCompanyDataTemplatesDeleteBody, ...options}
    );
  }

/**
 * @summary Create Many Endpoint
 */
export const portfolioCompanyDataTemplatesBulkCreate = <TData = AxiosResponse<PortfolioCompanyDataTemplateRecordReadData[]>>(
    portfolioCompanyDataTemplateRecordCreateData: PortfolioCompanyDataTemplateRecordCreateData[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/portfolio-company/requests/data-templates/bulk`,
      portfolioCompanyDataTemplateRecordCreateData,options
    );
  }

/**
 * @summary Get Portfolio Company Data Templates Table Data Api
 */
export const portfolioCompanyDataTemplatesTableDataRetrieve = <TData = AxiosResponse<TableData>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/portfolio-company/requests/data-templates/table-data`,options
    );
  }

/**
 * @summary Delete Endpoint
 */
export const portfolioCompanyDataTemplateDelete = <TData = AxiosResponse<unknown>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/portfolio-company/requests/data-templates/${id}`,options
    );
  }

/**
 * @summary Get Endpoint
 */
export const portfolioCompanyDataTemplateRetrieve = <TData = AxiosResponse<PortfolioCompanyDataTemplateRecordReadData>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/portfolio-company/requests/data-templates/${id}`,options
    );
  }

/**
 * @summary Update Endpoint
 */
export const portfolioCompanyDataTemplateUpdate = <TData = AxiosResponse<PortfolioCompanyDataTemplateRecordReadData>>(
    id: string,
    portfolioCompanyDataTemplateRecordUpdateData: PortfolioCompanyDataTemplateRecordUpdateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/portfolio-company/requests/data-templates/${id}`,
      portfolioCompanyDataTemplateRecordUpdateData,options
    );
  }

/**
 * @summary Get Versions Endpoint
 */
export const portfolioCompanyDataTemplateVersionsRetrieve = <TData = AxiosResponse<VersionReadDataPortfolioCompanyDataTemplateRecordReadData[]>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/portfolio-company/requests/data-templates/${id}/versions`,options
    );
  }

/**
 * @summary Get Portfolio Company Data Request Api
 */
export const portfolioCompanyRequestWithMetadataRetrieve = <TData = AxiosResponse<PortfolioCompanyRequestReadData>>(
    requestId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/portfolio-company/requests/request-with-metadata/${requestId}`,options
    );
  }

/**
 * @summary Transition Portfolio Company Request Api
 */
export const portfolioCompanyRequestTransition = <TData = AxiosResponse<PortfolioCompanyRequestRecordReadData>>(
    requestId: string,
    params: PortfolioCompanyRequestTransitionParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/api/portfolio-company/requests/request/${requestId}/transition`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Get Portfolio Company Requests Table Data Api
 */
export const portfolioCompanyRequestsTableDataRetrieve = <TData = AxiosResponse<TableData>>(
    params?: PortfolioCompanyRequestsTableDataRetrieveParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/portfolio-company/requests/requests-table-data`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Delete Endpoint
 */
export const portfolioCompanyRequestDelete = <TData = AxiosResponse<unknown>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/portfolio-company/requests/${id}`,options
    );
  }

/**
 * @summary Get Endpoint
 */
export const portfolioCompanyRequestRetrieve = <TData = AxiosResponse<PortfolioCompanyRequestRecordReadData>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/portfolio-company/requests/${id}`,options
    );
  }

/**
 * @summary Update Endpoint
 */
export const portfolioCompanyRequestUpdate = <TData = AxiosResponse<PortfolioCompanyRequestRecordReadData>>(
    id: string,
    portfolioCompanyRequestRecordUpdateData: PortfolioCompanyRequestRecordUpdateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/portfolio-company/requests/${id}`,
      portfolioCompanyRequestRecordUpdateData,options
    );
  }

/**
 * @summary Create Tenant Api
 */
export const tenantCreate = <TData = AxiosResponse<TenantRecordReadData>>(
    tenantRecordCreateData: TenantRecordCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/tenants/`,
      tenantRecordCreateData,options
    );
  }

/**
 * @summary Get Current Tenant Api
 */
export const currentTenantRetrieve = <TData = AxiosResponse<TenantRecordReadData>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/tenants/current`,options
    );
  }

/**
 * @summary Get Tenants Table Data Api
 */
export const tenantsTableDataRetrieve = <TData = AxiosResponse<TableData>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/tenants/tenant-table-data`,options
    );
  }

/**
 * @summary Get Tenant Api
 */
export const tenantRetrieve = <TData = AxiosResponse<TenantRecordReadData>>(
    tenantId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/tenants/tenant/${tenantId}`,options
    );
  }

/**
 * @summary Update Tenant Api
 */
export const tenantUpdate = <TData = AxiosResponse<TenantRecordReadData>>(
    tenantId: string,
    tenantRecordUpdateData: TenantRecordUpdateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/tenants/tenant/${tenantId}`,
      tenantRecordUpdateData,options
    );
  }

/**
 * @summary Get Tenant Users Table Data Api
 */
export const tenantUsersTableDataRetrieve = <TData = AxiosResponse<TableData>>(
    tenantId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/tenants/tenant/${tenantId}/user-table-data`,options
    );
  }

/**
 * @summary Create Endpoint
 */
export const userCreate = <TData = AxiosResponse<UserRecordReadData>>(
    userRecordCreateData: UserRecordCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/users/`,
      userRecordCreateData,options
    );
  }

/**
 * @summary Delete Many Endpoint
 */
export const usersDelete = <TData = AxiosResponse<unknown>>(
    usersDeleteBody: string[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/users/bulk`,{data:
      usersDeleteBody, ...options}
    );
  }

/**
 * @summary Create Many Endpoint
 */
export const usersBulkCreate = <TData = AxiosResponse<UserRecordReadData[]>>(
    userRecordCreateData: UserRecordCreateData[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/users/bulk`,
      userRecordCreateData,options
    );
  }

/**
 * @summary Get Current User Api
 */
export const currentUserRetrieve = <TData = AxiosResponse<UserRecordReadData>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/users/current-user`,options
    );
  }

/**
 * @summary Get Current User Tenants Api
 */
export const currentUserTenantsRetrieve = <TData = AxiosResponse<TenantRecordReadData[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/users/current-user-tenants`,options
    );
  }

/**
 * @summary Internal Get User By Email Api
 */
export const internalUserByEmailRetrieve = <TData = AxiosResponse<UserRecordReadData>>(
    email: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/users/internal/user-by-email/${email}`,undefined,options
    );
  }

/**
 * @summary Internal Get User Api
 */
export const internalUserRetrieve = <TData = AxiosResponse<UserRecordReadData>>(
    userId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/users/internal/user/${userId}`,options
    );
  }

/**
 * @summary Internal Get User Tenants Api
 */
export const internalUserTenantsRetrieve = <TData = AxiosResponse<TenantRecordReadData[]>>(
    userId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/users/internal/user/${userId}/tenants`,options
    );
  }

/**
 * @summary Create User Tenant Relationship Api
 */
export const userTenantRelationshipCreate = <TData = AxiosResponse<UserTenantRelationshipRecordReadData>>(
    userTenantRelationshipRecordCreateData: UserTenantRelationshipRecordCreateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/users/user-tenant-relationship`,
      userTenantRelationshipRecordCreateData,options
    );
  }

/**
 * @summary Bulk Create User Tenant Relationships Api
 */
export const userTenantRelationshipsBulkCreate = <TData = AxiosResponse<UserTenantRelationshipRecordReadData[]>>(
    userTenantRelationshipRecordCreateData: UserTenantRelationshipRecordCreateData[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/users/user-tenant-relationship/bulk`,
      userTenantRelationshipRecordCreateData,options
    );
  }

/**
 * @summary Get User Tenants Table Api
 */
export const userTenantsTableDataRetrieve = <TData = AxiosResponse<TableData>>(
    userId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/users/user/${userId}/tenants`,options
    );
  }

/**
 * @summary Get Users Table Data Api
 */
export const usersTableDataRetrieve = <TData = AxiosResponse<TableData>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/users/users-table-data`,options
    );
  }

/**
 * @summary Delete Endpoint
 */
export const userDelete = <TData = AxiosResponse<unknown>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/users/${id}`,options
    );
  }

/**
 * @summary Get Endpoint
 */
export const userRetrieve = <TData = AxiosResponse<UserRecordReadData>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/users/${id}`,options
    );
  }

/**
 * @summary Update Endpoint
 */
export const userUpdate = <TData = AxiosResponse<UserRecordReadData>>(
    id: string,
    userRecordUpdateData: UserRecordUpdateData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/users/${id}`,
      userRecordUpdateData,options
    );
  }

/**
 * Simple health check endpoint.
Returns 200 OK if the server is running.
 * @summary Health Check
 */
export const healthCheckHealthElbGet = <TData = AxiosResponse<unknown>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/health/elb`,options
    );
  }

export type AiChatResult = AxiosResponse<ChatResponse>
export type AiModelsRetrieveResult = AxiosResponse<string[]>
export type RefreshBasicAuthResult = AxiosResponse<AuthResponseData>
export type RequestBasicAuthResult = AxiosResponse<AuthResponseData>
export type PingResult = AxiosResponse<PingResponseData>
export type StytchSessionAuthenticateResult = AxiosResponse<AuthResponseData>
export type TableColumnsRetrieveResult = AxiosResponse<TableInfo>
export type TablesRetrieveResult = AxiosResponse<TableInfo[]>
export type CompanyCreateResult = AxiosResponse<CompanyRecordReadData>
export type CompaniesDeleteResult = AxiosResponse<unknown>
export type CompaniesBulkCreateResult = AxiosResponse<CompanyRecordReadData[]>
export type CompaniesListRetrieveResult = AxiosResponse<CompanyRecordReadData[]>
export type CompaniesTableDataRetrieveResult = AxiosResponse<TableData>
export type CompanyDeleteResult = AxiosResponse<unknown>
export type CompanyRetrieveResult = AxiosResponse<CompanyRecordReadData>
export type CompanyUpdateResult = AxiosResponse<CompanyRecordReadData>
export type CompanyVersionsRetrieveResult = AxiosResponse<VersionReadDataCompanyRecordReadData[]>
export type DataConnectorIntegrationCreateResult = AxiosResponse<DataConnectorIntegrationRecordReadData>
export type DataConnectorIntegrationsDeleteResult = AxiosResponse<unknown>
export type DataConnectorIntegrationsBulkCreateResult = AxiosResponse<DataConnectorIntegrationRecordReadData[]>
export type DataConnectorIntegrationSyncResult = AxiosResponse<unknown>
export type DataConnectorIntegrationsRetrieveResult = AxiosResponse<DataConnectorIntegrationRecordReadData[]>
export type DataConnectorIntegrationDeleteResult = AxiosResponse<unknown>
export type DataConnectorIntegrationRetrieveResult = AxiosResponse<DataConnectorIntegrationRecordReadData>
export type DataConnectorIntegrationUpdateResult = AxiosResponse<DataConnectorIntegrationRecordReadData>
export type DataStoreFieldCreateResult = AxiosResponse<DataStoreFieldEventReadData>
export type DataStoreSearchResult = AxiosResponse<DataStoreTableSearchResult>
export type DataStoreTablesListResult = AxiosResponse<DataStoreTableRecordReadData[]>
export type DataStoreTableCreateResult = AxiosResponse<DataStoreTableRecordReadData>
export type DataStoreTableUpdateResult = AxiosResponse<DataStoreTableRecordReadData>
export type DataStoreTableRetrieveResult = AxiosResponse<DataStoreTableRecordReadData>
export type DataStoreRecordCreateResult = AxiosResponse<DataStoreRecordRecordReadData>
export type DataStoreRecordsBulkCreateResult = AxiosResponse<DataStoreRecordRecordReadData[]>
export type DataStoreRecordRetrieveResult = AxiosResponse<DataStoreRecordReadData>
export type DataStoreRecordUpdateResult = AxiosResponse<unknown>
export type DataStoreRecordsBulkUpdateResult = AxiosResponse<DataStoreRecordRecordReadData[]>
export type DataStoreTableSchemaRetrieveResult = AxiosResponse<DataStoreTableSchemaReadData>
export type DataStoreTableSchemaTableDataRetrieveResult = AxiosResponse<TableData>
export type DataStoreTableTableDataRetrieveResult = AxiosResponse<TableData>
export type DataStoreTablesTableDataRetrieveResult = AxiosResponse<TableData>
export type DocumentCreateResult = AxiosResponse<DocumentPresignedReadData>
export type DocumentsDeleteResult = AxiosResponse<unknown>
export type DocumentsCreateBulkResult = AxiosResponse<DocumentPresignedReadData[]>
export type ExcelTemplateGenerateResult = AxiosResponse<Blob>
export type DocumentsTableDataRetrieveResult = AxiosResponse<TableData>
export type DocumentsZipDownloadResult = AxiosResponse<Blob>
export type DocumentDeleteResult = AxiosResponse<unknown>
export type DocumentRetrieveResult = AxiosResponse<DocumentPresignedReadData>
export type DocumentUpdateResult = AxiosResponse<DocumentPresignedReadData>
export type EntityCreateResult = AxiosResponse<LegalEntityRecordReadData>
export type EntitiesDeleteResult = AxiosResponse<unknown>
export type EntitiesBulkCreateResult = AxiosResponse<LegalEntityRecordReadData[]>
export type EntitiesTableDataRetrieveResult = AxiosResponse<TableData>
export type EntityDeleteResult = AxiosResponse<unknown>
export type EntityRetrieveResult = AxiosResponse<LegalEntityRecordReadData>
export type EntityUpdateResult = AxiosResponse<LegalEntityRecordReadData>
export type EntityVersionsRetrieveResult = AxiosResponse<VersionReadDataLegalEntityRecordReadData[]>
export type FundFamilyCreateResult = AxiosResponse<FundFamilyRecordReadData>
export type FundFamiliesDeleteResult = AxiosResponse<unknown>
export type FundFamiliesBulkCreateResult = AxiosResponse<FundFamilyRecordReadData[]>
export type FundFamiliesTableDataRetrieveResult = AxiosResponse<TableData>
export type FundFamilyDeleteResult = AxiosResponse<unknown>
export type FundFamilyRetrieveResult = AxiosResponse<FundFamilyRecordReadData>
export type FundFamilyUpdateResult = AxiosResponse<FundFamilyRecordReadData>
export type FundFamilyVersionsRetrieveResult = AxiosResponse<VersionReadDataFundFamilyRecordReadData[]>
export type SecurityClassCreateResult = AxiosResponse<SecurityClassRecordReadData>
export type SecurityClassesDeleteResult = AxiosResponse<unknown>
export type SecurityClassesBulkCreateResult = AxiosResponse<SecurityClassRecordReadData[]>
export type SecurityClassesTableDataRetrieveResult = AxiosResponse<TableData>
export type SecurityClassDeleteResult = AxiosResponse<unknown>
export type SecurityClassRetrieveResult = AxiosResponse<SecurityClassRecordReadData>
export type SecurityClassUpdateResult = AxiosResponse<SecurityClassRecordReadData>
export type SecurityClassVersionsRetrieveResult = AxiosResponse<VersionReadDataSecurityClassRecordReadData[]>
export type SecurityOwnershipCreateResult = AxiosResponse<SecurityOwnershipRecordReadData>
export type SecurityOwnershipsDeleteResult = AxiosResponse<unknown>
export type SecurityOwnershipsBulkCreateResult = AxiosResponse<SecurityOwnershipRecordReadData[]>
export type SecurityOwnershipsTableDataRetrieveResult = AxiosResponse<TableData>
export type SecurityOwnershipDeleteResult = AxiosResponse<unknown>
export type SecurityOwnershipRetrieveResult = AxiosResponse<SecurityOwnershipRecordReadData>
export type SecurityOwnershipUpdateResult = AxiosResponse<SecurityOwnershipRecordReadData>
export type SecurityOwnershipVersionsRetrieveResult = AxiosResponse<VersionReadDataSecurityOwnershipRecordReadData[]>
export type SecurityCreateResult = AxiosResponse<SecurityRecordReadData>
export type SecuritiesDeleteResult = AxiosResponse<unknown>
export type SecuritiesBulkCreateResult = AxiosResponse<SecurityRecordReadData[]>
export type SecuritiesTableDataRetrieveResult = AxiosResponse<TableData>
export type SecurityDeleteResult = AxiosResponse<unknown>
export type SecurityRetrieveResult = AxiosResponse<SecurityRecordReadData>
export type SecurityUpdateResult = AxiosResponse<SecurityRecordReadData>
export type SecurityVersionsRetrieveResult = AxiosResponse<VersionReadDataSecurityRecordReadData[]>
export type StakeholderCreateResult = AxiosResponse<StakeholderRecordReadData>
export type StakeholdersDeleteResult = AxiosResponse<unknown>
export type StakeholdersBulkCreateResult = AxiosResponse<StakeholderRecordReadData[]>
export type StakeholdersTableDataRetrieveResult = AxiosResponse<TableData>
export type StakeholderDeleteResult = AxiosResponse<unknown>
export type StakeholderRetrieveResult = AxiosResponse<StakeholderRecordReadData>
export type StakeholderUpdateResult = AxiosResponse<StakeholderRecordReadData>
export type StakeholderVersionsRetrieveResult = AxiosResponse<VersionReadDataStakeholderRecordReadData[]>
export type ApiEventRetrieveResult = AxiosResponse<APIEventRecordReadData>
export type EventTimelineRetrieveResult = AxiosResponse<TimelineData>
export type EventBulkCreateResult = AxiosResponse<unknown[]>
export type EventBulkCreateFromExcelResult = AxiosResponse<BaseModelReadData[]>
export type EventBulkDeleteResult = AxiosResponse<unknown>
export type EventCreateResult = AxiosResponse<unknown>
export type EventDeleteResult = AxiosResponse<unknown>
export type ExcelTemplateForBulkCreateGenerateResult = AxiosResponse<Blob>
export type EventsTableDataRetrieveResult = AxiosResponse<TableData>
export type ObjectVersionsTimelineRetrieveResult = AxiosResponse<TimelineData>
export type TenantModelEventRetrieveResult = AxiosResponse<TenantModelEventRecordReadData>
export type PersonCreateResult = AxiosResponse<PersonRecordReadData>
export type PeopleDeleteResult = AxiosResponse<unknown>
export type PeopleBulkCreateResult = AxiosResponse<PersonRecordReadData[]>
export type PeopleTableDataRetrieveResult = AxiosResponse<TableData>
export type PersonDeleteResult = AxiosResponse<unknown>
export type PersonRetrieveResult = AxiosResponse<PersonRecordReadData>
export type PersonUpdateResult = AxiosResponse<PersonRecordReadData>
export type PersonVersionsRetrieveResult = AxiosResponse<VersionReadDataPersonRecordReadData[]>
export type PortfolioCompanyRequestsListResult = AxiosResponse<PortfolioCompanyRequestRecordReadData[]>
export type PortfolioCompanyRequestCreateResult = AxiosResponse<PortfolioCompanyRequestRecordReadData>
export type PortfolioCompanyRequestsDeleteResult = AxiosResponse<unknown>
export type PortfolioCompanyRequestsBulkCreateResult = AxiosResponse<PortfolioCompanyRequestRecordReadData[]>
export type PortfolioCompanyConnectionRequestCreateResult = AxiosResponse<PortfolioCompanyRequestRecordReadData>
export type PortfolioCompanyDataRequestScheduleCompanyAssociationCreateResult = AxiosResponse<PortfolioCompanyDataRequestScheduleCompanyRecordReadData>
export type PortfolioCompanyDataRequestScheduleCompanyAssociationsDeleteResult = AxiosResponse<unknown>
export type PortfolioCompanyDataRequestScheduleCompanyAssociationsBulkCreateResult = AxiosResponse<PortfolioCompanyDataRequestScheduleCompanyRecordReadData[]>
export type PortfolioCompanyDataRequestScheduleCompaniesListResult = AxiosResponse<PortfolioCompanyDataRequestScheduleCompanyRecordReadData[]>
export type PortfolioCompanyDataRequestScheduleCompaniesTableDataRetrieveResult = AxiosResponse<TableData>
export type PortfolioCompanyDataRequestScheduleCompanyAssociationDeleteResult = AxiosResponse<unknown>
export type PortfolioCompanyDataRequestScheduleCompanyAssociationRetrieveResult = AxiosResponse<PortfolioCompanyDataRequestScheduleCompanyRecordReadData>
export type PortfolioCompanyDataRequestScheduleCompanyAssociationUpdateResult = AxiosResponse<PortfolioCompanyDataRequestScheduleCompanyRecordReadData>
export type PortfolioCompanyDataRequestSchedulesListResult = AxiosResponse<PortfolioCompanyDataRequestScheduleRecordReadData[]>
export type PortfolioCompanyDataRequestScheduleCreateResult = AxiosResponse<PortfolioCompanyDataRequestScheduleRecordReadData>
export type PortfolioCompanyDataRequestSchedulesDeleteResult = AxiosResponse<unknown>
export type PortfolioCompanyDataRequestSchedulesBulkCreateResult = AxiosResponse<PortfolioCompanyDataRequestScheduleRecordReadData[]>
export type PortfolioCompanyDataRequestSchedulesTableDataRetrieveResult = AxiosResponse<TableData>
export type PortfolioCompanyDataRequestScheduleDeleteResult = AxiosResponse<unknown>
export type PortfolioCompanyDataRequestScheduleRetrieveResult = AxiosResponse<PortfolioCompanyDataRequestScheduleRecordReadData>
export type PortfolioCompanyDataRequestScheduleUpdateResult = AxiosResponse<PortfolioCompanyDataRequestScheduleRecordReadData>
export type PortfolioCompanyDataRequestScheduleVersionsRetrieveResult = AxiosResponse<VersionReadDataPortfolioCompanyDataRequestScheduleRecordReadData[]>
export type PortfolioCompanyDataRequestScheduleRunsTableDataRetrieveResult = AxiosResponse<TableData>
export type PortfolioCompanyDataRequestScheduleWithRunDataRetrieveResult = AxiosResponse<PortfolioCompanyDataRequestScheduleWithRunDataReadData>
export type PortfolioCompanyDataRequestCreateResult = AxiosResponse<PortfolioCompanyDataRequestRecordReadData[]>
export type PortfolioCompanyDataRequestFromDocumentResult = AxiosResponse<PortfolioCompanyDataRequestFromDocumentResponseData>
export type PortfolioCompanyDataRequestRetrieveResult = AxiosResponse<PortfolioCompanyDataRequestRecordReadData>
export type PortfolioCompanyDataTemplateTablesListResult = AxiosResponse<PortfolioCompanyDataTemplateTableRecordReadData[]>
export type PortfolioCompanyDataTemplateTableCreateResult = AxiosResponse<PortfolioCompanyDataTemplateTableRecordReadData>
export type PortfolioCompanyDataTemplateTablesDeleteResult = AxiosResponse<unknown>
export type PortfolioCompanyDataTemplateTablesBulkCreateResult = AxiosResponse<PortfolioCompanyDataTemplateTableRecordReadData[]>
export type PortfolioCompanyDataTemplateTablesTableDataRetrieveResult = AxiosResponse<TableData>
export type PortfolioCompanyDataTemplateTableDeleteResult = AxiosResponse<unknown>
export type PortfolioCompanyDataTemplateTableRetrieveResult = AxiosResponse<PortfolioCompanyDataTemplateTableRecordReadData>
export type PortfolioCompanyDataTemplateTableUpdateResult = AxiosResponse<PortfolioCompanyDataTemplateTableRecordReadData>
export type PortfolioCompanyDataTemplatesListResult = AxiosResponse<PortfolioCompanyDataTemplateRecordReadData[]>
export type PortfolioCompanyDataTemplateCreateResult = AxiosResponse<PortfolioCompanyDataTemplateRecordReadData>
export type PortfolioCompanyDataTemplatesDeleteResult = AxiosResponse<unknown>
export type PortfolioCompanyDataTemplatesBulkCreateResult = AxiosResponse<PortfolioCompanyDataTemplateRecordReadData[]>
export type PortfolioCompanyDataTemplatesTableDataRetrieveResult = AxiosResponse<TableData>
export type PortfolioCompanyDataTemplateDeleteResult = AxiosResponse<unknown>
export type PortfolioCompanyDataTemplateRetrieveResult = AxiosResponse<PortfolioCompanyDataTemplateRecordReadData>
export type PortfolioCompanyDataTemplateUpdateResult = AxiosResponse<PortfolioCompanyDataTemplateRecordReadData>
export type PortfolioCompanyDataTemplateVersionsRetrieveResult = AxiosResponse<VersionReadDataPortfolioCompanyDataTemplateRecordReadData[]>
export type PortfolioCompanyRequestWithMetadataRetrieveResult = AxiosResponse<PortfolioCompanyRequestReadData>
export type PortfolioCompanyRequestTransitionResult = AxiosResponse<PortfolioCompanyRequestRecordReadData>
export type PortfolioCompanyRequestsTableDataRetrieveResult = AxiosResponse<TableData>
export type PortfolioCompanyRequestDeleteResult = AxiosResponse<unknown>
export type PortfolioCompanyRequestRetrieveResult = AxiosResponse<PortfolioCompanyRequestRecordReadData>
export type PortfolioCompanyRequestUpdateResult = AxiosResponse<PortfolioCompanyRequestRecordReadData>
export type TenantCreateResult = AxiosResponse<TenantRecordReadData>
export type CurrentTenantRetrieveResult = AxiosResponse<TenantRecordReadData>
export type TenantsTableDataRetrieveResult = AxiosResponse<TableData>
export type TenantRetrieveResult = AxiosResponse<TenantRecordReadData>
export type TenantUpdateResult = AxiosResponse<TenantRecordReadData>
export type TenantUsersTableDataRetrieveResult = AxiosResponse<TableData>
export type UserCreateResult = AxiosResponse<UserRecordReadData>
export type UsersDeleteResult = AxiosResponse<unknown>
export type UsersBulkCreateResult = AxiosResponse<UserRecordReadData[]>
export type CurrentUserRetrieveResult = AxiosResponse<UserRecordReadData>
export type CurrentUserTenantsRetrieveResult = AxiosResponse<TenantRecordReadData[]>
export type InternalUserByEmailRetrieveResult = AxiosResponse<UserRecordReadData>
export type InternalUserRetrieveResult = AxiosResponse<UserRecordReadData>
export type InternalUserTenantsRetrieveResult = AxiosResponse<TenantRecordReadData[]>
export type UserTenantRelationshipCreateResult = AxiosResponse<UserTenantRelationshipRecordReadData>
export type UserTenantRelationshipsBulkCreateResult = AxiosResponse<UserTenantRelationshipRecordReadData[]>
export type UserTenantsTableDataRetrieveResult = AxiosResponse<TableData>
export type UsersTableDataRetrieveResult = AxiosResponse<TableData>
export type UserDeleteResult = AxiosResponse<unknown>
export type UserRetrieveResult = AxiosResponse<UserRecordReadData>
export type UserUpdateResult = AxiosResponse<UserRecordReadData>
export type HealthCheckHealthElbGetResult = AxiosResponse<unknown>
