/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Rengo
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  FundFamilyRecordCreateData
} from '../schemas/fundFamilyRecordCreateData'
import type {
  FundFamilyRecordReadData
} from '../schemas/fundFamilyRecordReadData'
import type {
  FundFamilyRecordUpdateData
} from '../schemas/fundFamilyRecordUpdateData'
import type {
  HTTPValidationError
} from '../schemas/hTTPValidationError'
import type {
  LegalEntityRecordCreateData
} from '../schemas/legalEntityRecordCreateData'
import type {
  LegalEntityRecordReadData
} from '../schemas/legalEntityRecordReadData'
import type {
  LegalEntityRecordUpdateData
} from '../schemas/legalEntityRecordUpdateData'
import type {
  SecurityClassRecordCreateData
} from '../schemas/securityClassRecordCreateData'
import type {
  SecurityClassRecordReadData
} from '../schemas/securityClassRecordReadData'
import type {
  SecurityClassRecordUpdateData
} from '../schemas/securityClassRecordUpdateData'
import type {
  SecurityOwnershipRecordCreateData
} from '../schemas/securityOwnershipRecordCreateData'
import type {
  SecurityOwnershipRecordReadData
} from '../schemas/securityOwnershipRecordReadData'
import type {
  SecurityOwnershipRecordUpdateData
} from '../schemas/securityOwnershipRecordUpdateData'
import type {
  SecurityRecordCreateData
} from '../schemas/securityRecordCreateData'
import type {
  SecurityRecordReadData
} from '../schemas/securityRecordReadData'
import type {
  SecurityRecordUpdateData
} from '../schemas/securityRecordUpdateData'
import type {
  StakeholderRecordCreateData
} from '../schemas/stakeholderRecordCreateData'
import type {
  StakeholderRecordReadData
} from '../schemas/stakeholderRecordReadData'
import type {
  StakeholderRecordUpdateData
} from '../schemas/stakeholderRecordUpdateData'
import type {
  TableData
} from '../schemas/tableData'
import type {
  VersionReadDataFundFamilyRecordReadData
} from '../schemas/versionReadDataFundFamilyRecordReadData'
import type {
  VersionReadDataLegalEntityRecordReadData
} from '../schemas/versionReadDataLegalEntityRecordReadData'
import type {
  VersionReadDataSecurityClassRecordReadData
} from '../schemas/versionReadDataSecurityClassRecordReadData'
import type {
  VersionReadDataSecurityOwnershipRecordReadData
} from '../schemas/versionReadDataSecurityOwnershipRecordReadData'
import type {
  VersionReadDataSecurityRecordReadData
} from '../schemas/versionReadDataSecurityRecordReadData'
import type {
  VersionReadDataStakeholderRecordReadData
} from '../schemas/versionReadDataStakeholderRecordReadData'
import { axiosRequest } from '../../shared/api/api';



/**
 * @summary Create Endpoint
 */
export const entityCreate = (
    legalEntityRecordCreateData: LegalEntityRecordCreateData,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<LegalEntityRecordReadData>(
      {url: `/api/entity-structure/entity/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: legalEntityRecordCreateData, signal
    },
      );
    }
  


export const getEntityCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof entityCreate>>, TError,{data: LegalEntityRecordCreateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof entityCreate>>, TError,{data: LegalEntityRecordCreateData}, TContext> => {
    
const mutationKey = ['entityCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof entityCreate>>, {data: LegalEntityRecordCreateData}> = (props) => {
          const {data} = props ?? {};

          return  entityCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EntityCreateMutationResult = NonNullable<Awaited<ReturnType<typeof entityCreate>>>
    export type EntityCreateMutationBody = LegalEntityRecordCreateData
    export type EntityCreateMutationError = HTTPValidationError

    /**
 * @summary Create Endpoint
 */
export const useEntityCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof entityCreate>>, TError,{data: LegalEntityRecordCreateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof entityCreate>>,
        TError,
        {data: LegalEntityRecordCreateData},
        TContext
      > => {

      const mutationOptions = getEntityCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete Many Endpoint
 */
export const entitiesDelete = (
    entitiesDeleteBody: string[],
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/entity-structure/entity/bulk`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: entitiesDeleteBody
    },
      );
    }
  


export const getEntitiesDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof entitiesDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof entitiesDelete>>, TError,{data: string[]}, TContext> => {
    
const mutationKey = ['entitiesDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof entitiesDelete>>, {data: string[]}> = (props) => {
          const {data} = props ?? {};

          return  entitiesDelete(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EntitiesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof entitiesDelete>>>
    export type EntitiesDeleteMutationBody = string[]
    export type EntitiesDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Many Endpoint
 */
export const useEntitiesDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof entitiesDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof entitiesDelete>>,
        TError,
        {data: string[]},
        TContext
      > => {

      const mutationOptions = getEntitiesDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create Many Endpoint
 */
export const entitiesBulkCreate = (
    legalEntityRecordCreateData: LegalEntityRecordCreateData[],
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<LegalEntityRecordReadData[]>(
      {url: `/api/entity-structure/entity/bulk`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: legalEntityRecordCreateData, signal
    },
      );
    }
  


export const getEntitiesBulkCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof entitiesBulkCreate>>, TError,{data: LegalEntityRecordCreateData[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof entitiesBulkCreate>>, TError,{data: LegalEntityRecordCreateData[]}, TContext> => {
    
const mutationKey = ['entitiesBulkCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof entitiesBulkCreate>>, {data: LegalEntityRecordCreateData[]}> = (props) => {
          const {data} = props ?? {};

          return  entitiesBulkCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EntitiesBulkCreateMutationResult = NonNullable<Awaited<ReturnType<typeof entitiesBulkCreate>>>
    export type EntitiesBulkCreateMutationBody = LegalEntityRecordCreateData[]
    export type EntitiesBulkCreateMutationError = HTTPValidationError

    /**
 * @summary Create Many Endpoint
 */
export const useEntitiesBulkCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof entitiesBulkCreate>>, TError,{data: LegalEntityRecordCreateData[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof entitiesBulkCreate>>,
        TError,
        {data: LegalEntityRecordCreateData[]},
        TContext
      > => {

      const mutationOptions = getEntitiesBulkCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Entity Data Table Api
 */
export const entitiesTableDataRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<TableData>(
      {url: `/api/entity-structure/entity/entity-table-data`, method: 'GET', signal
    },
      );
    }
  

export const getEntitiesTableDataRetrieveQueryKey = () => {
    return [`/api/entity-structure/entity/entity-table-data`] as const;
    }

    
export const getEntitiesTableDataRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof entitiesTableDataRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof entitiesTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEntitiesTableDataRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof entitiesTableDataRetrieve>>> = ({ signal }) => entitiesTableDataRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof entitiesTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EntitiesTableDataRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof entitiesTableDataRetrieve>>>
export type EntitiesTableDataRetrieveQueryError = unknown


export function useEntitiesTableDataRetrieve<TData = Awaited<ReturnType<typeof entitiesTableDataRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof entitiesTableDataRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof entitiesTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof entitiesTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEntitiesTableDataRetrieve<TData = Awaited<ReturnType<typeof entitiesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof entitiesTableDataRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof entitiesTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof entitiesTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEntitiesTableDataRetrieve<TData = Awaited<ReturnType<typeof entitiesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof entitiesTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Entity Data Table Api
 */

export function useEntitiesTableDataRetrieve<TData = Awaited<ReturnType<typeof entitiesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof entitiesTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEntitiesTableDataRetrieveQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getEntitiesTableDataRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof entitiesTableDataRetrieve>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof entitiesTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEntitiesTableDataRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof entitiesTableDataRetrieve>>> = ({ signal }) => entitiesTableDataRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof entitiesTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EntitiesTableDataRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof entitiesTableDataRetrieve>>>
export type EntitiesTableDataRetrieveSuspenseQueryError = unknown


export function useEntitiesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof entitiesTableDataRetrieve>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof entitiesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEntitiesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof entitiesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof entitiesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEntitiesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof entitiesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof entitiesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Entity Data Table Api
 */

export function useEntitiesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof entitiesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof entitiesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEntitiesTableDataRetrieveSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete Endpoint
 */
export const entityDelete = (
    id: string,
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/entity-structure/entity/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getEntityDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof entityDelete>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof entityDelete>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['entityDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof entityDelete>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  entityDelete(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EntityDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof entityDelete>>>
    
    export type EntityDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Endpoint
 */
export const useEntityDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof entityDelete>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof entityDelete>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getEntityDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Endpoint
 */
export const entityRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<LegalEntityRecordReadData>(
      {url: `/api/entity-structure/entity/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getEntityRetrieveQueryKey = (id: string,) => {
    return [`/api/entity-structure/entity/${id}`] as const;
    }

    
export const getEntityRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof entityRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof entityRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEntityRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof entityRetrieve>>> = ({ signal }) => entityRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof entityRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EntityRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof entityRetrieve>>>
export type EntityRetrieveQueryError = HTTPValidationError


export function useEntityRetrieve<TData = Awaited<ReturnType<typeof entityRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof entityRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof entityRetrieve>>,
          TError,
          Awaited<ReturnType<typeof entityRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEntityRetrieve<TData = Awaited<ReturnType<typeof entityRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof entityRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof entityRetrieve>>,
          TError,
          Awaited<ReturnType<typeof entityRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEntityRetrieve<TData = Awaited<ReturnType<typeof entityRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof entityRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function useEntityRetrieve<TData = Awaited<ReturnType<typeof entityRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof entityRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEntityRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getEntityRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof entityRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof entityRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEntityRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof entityRetrieve>>> = ({ signal }) => entityRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof entityRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EntityRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof entityRetrieve>>>
export type EntityRetrieveSuspenseQueryError = HTTPValidationError


export function useEntityRetrieveSuspense<TData = Awaited<ReturnType<typeof entityRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof entityRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEntityRetrieveSuspense<TData = Awaited<ReturnType<typeof entityRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof entityRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEntityRetrieveSuspense<TData = Awaited<ReturnType<typeof entityRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof entityRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function useEntityRetrieveSuspense<TData = Awaited<ReturnType<typeof entityRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof entityRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEntityRetrieveSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Endpoint
 */
export const entityUpdate = (
    id: string,
    legalEntityRecordUpdateData: LegalEntityRecordUpdateData,
 ) => {
      
      
      return axiosRequest<LegalEntityRecordReadData>(
      {url: `/api/entity-structure/entity/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: legalEntityRecordUpdateData
    },
      );
    }
  


export const getEntityUpdateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof entityUpdate>>, TError,{id: string;data: LegalEntityRecordUpdateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof entityUpdate>>, TError,{id: string;data: LegalEntityRecordUpdateData}, TContext> => {
    
const mutationKey = ['entityUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof entityUpdate>>, {id: string;data: LegalEntityRecordUpdateData}> = (props) => {
          const {id,data} = props ?? {};

          return  entityUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EntityUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof entityUpdate>>>
    export type EntityUpdateMutationBody = LegalEntityRecordUpdateData
    export type EntityUpdateMutationError = HTTPValidationError

    /**
 * @summary Update Endpoint
 */
export const useEntityUpdate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof entityUpdate>>, TError,{id: string;data: LegalEntityRecordUpdateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof entityUpdate>>,
        TError,
        {id: string;data: LegalEntityRecordUpdateData},
        TContext
      > => {

      const mutationOptions = getEntityUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Versions Endpoint
 */
export const entityVersionsRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<VersionReadDataLegalEntityRecordReadData[]>(
      {url: `/api/entity-structure/entity/${id}/versions`, method: 'GET', signal
    },
      );
    }
  

export const getEntityVersionsRetrieveQueryKey = (id: string,) => {
    return [`/api/entity-structure/entity/${id}/versions`] as const;
    }

    
export const getEntityVersionsRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof entityVersionsRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof entityVersionsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEntityVersionsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof entityVersionsRetrieve>>> = ({ signal }) => entityVersionsRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof entityVersionsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EntityVersionsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof entityVersionsRetrieve>>>
export type EntityVersionsRetrieveQueryError = HTTPValidationError


export function useEntityVersionsRetrieve<TData = Awaited<ReturnType<typeof entityVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof entityVersionsRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof entityVersionsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof entityVersionsRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEntityVersionsRetrieve<TData = Awaited<ReturnType<typeof entityVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof entityVersionsRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof entityVersionsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof entityVersionsRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEntityVersionsRetrieve<TData = Awaited<ReturnType<typeof entityVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof entityVersionsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Versions Endpoint
 */

export function useEntityVersionsRetrieve<TData = Awaited<ReturnType<typeof entityVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof entityVersionsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEntityVersionsRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getEntityVersionsRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof entityVersionsRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof entityVersionsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEntityVersionsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof entityVersionsRetrieve>>> = ({ signal }) => entityVersionsRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof entityVersionsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EntityVersionsRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof entityVersionsRetrieve>>>
export type EntityVersionsRetrieveSuspenseQueryError = HTTPValidationError


export function useEntityVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof entityVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof entityVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEntityVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof entityVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof entityVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEntityVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof entityVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof entityVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Versions Endpoint
 */

export function useEntityVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof entityVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof entityVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEntityVersionsRetrieveSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Endpoint
 */
export const fundFamilyCreate = (
    fundFamilyRecordCreateData: FundFamilyRecordCreateData,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<FundFamilyRecordReadData>(
      {url: `/api/entity-structure/fund-family/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: fundFamilyRecordCreateData, signal
    },
      );
    }
  


export const getFundFamilyCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof fundFamilyCreate>>, TError,{data: FundFamilyRecordCreateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof fundFamilyCreate>>, TError,{data: FundFamilyRecordCreateData}, TContext> => {
    
const mutationKey = ['fundFamilyCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof fundFamilyCreate>>, {data: FundFamilyRecordCreateData}> = (props) => {
          const {data} = props ?? {};

          return  fundFamilyCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FundFamilyCreateMutationResult = NonNullable<Awaited<ReturnType<typeof fundFamilyCreate>>>
    export type FundFamilyCreateMutationBody = FundFamilyRecordCreateData
    export type FundFamilyCreateMutationError = HTTPValidationError

    /**
 * @summary Create Endpoint
 */
export const useFundFamilyCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof fundFamilyCreate>>, TError,{data: FundFamilyRecordCreateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof fundFamilyCreate>>,
        TError,
        {data: FundFamilyRecordCreateData},
        TContext
      > => {

      const mutationOptions = getFundFamilyCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete Many Endpoint
 */
export const fundFamiliesDelete = (
    fundFamiliesDeleteBody: string[],
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/entity-structure/fund-family/bulk`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: fundFamiliesDeleteBody
    },
      );
    }
  


export const getFundFamiliesDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof fundFamiliesDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof fundFamiliesDelete>>, TError,{data: string[]}, TContext> => {
    
const mutationKey = ['fundFamiliesDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof fundFamiliesDelete>>, {data: string[]}> = (props) => {
          const {data} = props ?? {};

          return  fundFamiliesDelete(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FundFamiliesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof fundFamiliesDelete>>>
    export type FundFamiliesDeleteMutationBody = string[]
    export type FundFamiliesDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Many Endpoint
 */
export const useFundFamiliesDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof fundFamiliesDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof fundFamiliesDelete>>,
        TError,
        {data: string[]},
        TContext
      > => {

      const mutationOptions = getFundFamiliesDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create Many Endpoint
 */
export const fundFamiliesBulkCreate = (
    fundFamilyRecordCreateData: FundFamilyRecordCreateData[],
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<FundFamilyRecordReadData[]>(
      {url: `/api/entity-structure/fund-family/bulk`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: fundFamilyRecordCreateData, signal
    },
      );
    }
  


export const getFundFamiliesBulkCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof fundFamiliesBulkCreate>>, TError,{data: FundFamilyRecordCreateData[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof fundFamiliesBulkCreate>>, TError,{data: FundFamilyRecordCreateData[]}, TContext> => {
    
const mutationKey = ['fundFamiliesBulkCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof fundFamiliesBulkCreate>>, {data: FundFamilyRecordCreateData[]}> = (props) => {
          const {data} = props ?? {};

          return  fundFamiliesBulkCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FundFamiliesBulkCreateMutationResult = NonNullable<Awaited<ReturnType<typeof fundFamiliesBulkCreate>>>
    export type FundFamiliesBulkCreateMutationBody = FundFamilyRecordCreateData[]
    export type FundFamiliesBulkCreateMutationError = HTTPValidationError

    /**
 * @summary Create Many Endpoint
 */
export const useFundFamiliesBulkCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof fundFamiliesBulkCreate>>, TError,{data: FundFamilyRecordCreateData[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof fundFamiliesBulkCreate>>,
        TError,
        {data: FundFamilyRecordCreateData[]},
        TContext
      > => {

      const mutationOptions = getFundFamiliesBulkCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Fund Family Data Table Api
 */
export const fundFamiliesTableDataRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<TableData>(
      {url: `/api/entity-structure/fund-family/fund-family-table-data`, method: 'GET', signal
    },
      );
    }
  

export const getFundFamiliesTableDataRetrieveQueryKey = () => {
    return [`/api/entity-structure/fund-family/fund-family-table-data`] as const;
    }

    
export const getFundFamiliesTableDataRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFundFamiliesTableDataRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>> = ({ signal }) => fundFamiliesTableDataRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FundFamiliesTableDataRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>>
export type FundFamiliesTableDataRetrieveQueryError = unknown


export function useFundFamiliesTableDataRetrieve<TData = Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFundFamiliesTableDataRetrieve<TData = Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFundFamiliesTableDataRetrieve<TData = Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Fund Family Data Table Api
 */

export function useFundFamiliesTableDataRetrieve<TData = Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFundFamiliesTableDataRetrieveQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFundFamiliesTableDataRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFundFamiliesTableDataRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>> = ({ signal }) => fundFamiliesTableDataRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FundFamiliesTableDataRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>>
export type FundFamiliesTableDataRetrieveSuspenseQueryError = unknown


export function useFundFamiliesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFundFamiliesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFundFamiliesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Fund Family Data Table Api
 */

export function useFundFamiliesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof fundFamiliesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFundFamiliesTableDataRetrieveSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete Endpoint
 */
export const fundFamilyDelete = (
    id: string,
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/entity-structure/fund-family/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getFundFamilyDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof fundFamilyDelete>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof fundFamilyDelete>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['fundFamilyDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof fundFamilyDelete>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  fundFamilyDelete(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FundFamilyDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof fundFamilyDelete>>>
    
    export type FundFamilyDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Endpoint
 */
export const useFundFamilyDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof fundFamilyDelete>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof fundFamilyDelete>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getFundFamilyDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Endpoint
 */
export const fundFamilyRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<FundFamilyRecordReadData>(
      {url: `/api/entity-structure/fund-family/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getFundFamilyRetrieveQueryKey = (id: string,) => {
    return [`/api/entity-structure/fund-family/${id}`] as const;
    }

    
export const getFundFamilyRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof fundFamilyRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fundFamilyRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFundFamilyRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof fundFamilyRetrieve>>> = ({ signal }) => fundFamilyRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof fundFamilyRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FundFamilyRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof fundFamilyRetrieve>>>
export type FundFamilyRetrieveQueryError = HTTPValidationError


export function useFundFamilyRetrieve<TData = Awaited<ReturnType<typeof fundFamilyRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof fundFamilyRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fundFamilyRetrieve>>,
          TError,
          Awaited<ReturnType<typeof fundFamilyRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFundFamilyRetrieve<TData = Awaited<ReturnType<typeof fundFamilyRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fundFamilyRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fundFamilyRetrieve>>,
          TError,
          Awaited<ReturnType<typeof fundFamilyRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFundFamilyRetrieve<TData = Awaited<ReturnType<typeof fundFamilyRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fundFamilyRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function useFundFamilyRetrieve<TData = Awaited<ReturnType<typeof fundFamilyRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fundFamilyRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFundFamilyRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFundFamilyRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof fundFamilyRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof fundFamilyRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFundFamilyRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof fundFamilyRetrieve>>> = ({ signal }) => fundFamilyRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof fundFamilyRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FundFamilyRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof fundFamilyRetrieve>>>
export type FundFamilyRetrieveSuspenseQueryError = HTTPValidationError


export function useFundFamilyRetrieveSuspense<TData = Awaited<ReturnType<typeof fundFamilyRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof fundFamilyRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFundFamilyRetrieveSuspense<TData = Awaited<ReturnType<typeof fundFamilyRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof fundFamilyRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFundFamilyRetrieveSuspense<TData = Awaited<ReturnType<typeof fundFamilyRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof fundFamilyRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function useFundFamilyRetrieveSuspense<TData = Awaited<ReturnType<typeof fundFamilyRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof fundFamilyRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFundFamilyRetrieveSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Endpoint
 */
export const fundFamilyUpdate = (
    id: string,
    fundFamilyRecordUpdateData: FundFamilyRecordUpdateData,
 ) => {
      
      
      return axiosRequest<FundFamilyRecordReadData>(
      {url: `/api/entity-structure/fund-family/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: fundFamilyRecordUpdateData
    },
      );
    }
  


export const getFundFamilyUpdateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof fundFamilyUpdate>>, TError,{id: string;data: FundFamilyRecordUpdateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof fundFamilyUpdate>>, TError,{id: string;data: FundFamilyRecordUpdateData}, TContext> => {
    
const mutationKey = ['fundFamilyUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof fundFamilyUpdate>>, {id: string;data: FundFamilyRecordUpdateData}> = (props) => {
          const {id,data} = props ?? {};

          return  fundFamilyUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FundFamilyUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof fundFamilyUpdate>>>
    export type FundFamilyUpdateMutationBody = FundFamilyRecordUpdateData
    export type FundFamilyUpdateMutationError = HTTPValidationError

    /**
 * @summary Update Endpoint
 */
export const useFundFamilyUpdate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof fundFamilyUpdate>>, TError,{id: string;data: FundFamilyRecordUpdateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof fundFamilyUpdate>>,
        TError,
        {id: string;data: FundFamilyRecordUpdateData},
        TContext
      > => {

      const mutationOptions = getFundFamilyUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Versions Endpoint
 */
export const fundFamilyVersionsRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<VersionReadDataFundFamilyRecordReadData[]>(
      {url: `/api/entity-structure/fund-family/${id}/versions`, method: 'GET', signal
    },
      );
    }
  

export const getFundFamilyVersionsRetrieveQueryKey = (id: string,) => {
    return [`/api/entity-structure/fund-family/${id}/versions`] as const;
    }

    
export const getFundFamilyVersionsRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFundFamilyVersionsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>> = ({ signal }) => fundFamilyVersionsRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FundFamilyVersionsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>>
export type FundFamilyVersionsRetrieveQueryError = HTTPValidationError


export function useFundFamilyVersionsRetrieve<TData = Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFundFamilyVersionsRetrieve<TData = Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFundFamilyVersionsRetrieve<TData = Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Versions Endpoint
 */

export function useFundFamilyVersionsRetrieve<TData = Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFundFamilyVersionsRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFundFamilyVersionsRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFundFamilyVersionsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>> = ({ signal }) => fundFamilyVersionsRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FundFamilyVersionsRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>>
export type FundFamilyVersionsRetrieveSuspenseQueryError = HTTPValidationError


export function useFundFamilyVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFundFamilyVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFundFamilyVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Versions Endpoint
 */

export function useFundFamilyVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof fundFamilyVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFundFamilyVersionsRetrieveSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Endpoint
 */
export const securityClassCreate = (
    securityClassRecordCreateData: SecurityClassRecordCreateData,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<SecurityClassRecordReadData>(
      {url: `/api/entity-structure/security-class/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: securityClassRecordCreateData, signal
    },
      );
    }
  


export const getSecurityClassCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityClassCreate>>, TError,{data: SecurityClassRecordCreateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof securityClassCreate>>, TError,{data: SecurityClassRecordCreateData}, TContext> => {
    
const mutationKey = ['securityClassCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof securityClassCreate>>, {data: SecurityClassRecordCreateData}> = (props) => {
          const {data} = props ?? {};

          return  securityClassCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SecurityClassCreateMutationResult = NonNullable<Awaited<ReturnType<typeof securityClassCreate>>>
    export type SecurityClassCreateMutationBody = SecurityClassRecordCreateData
    export type SecurityClassCreateMutationError = HTTPValidationError

    /**
 * @summary Create Endpoint
 */
export const useSecurityClassCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityClassCreate>>, TError,{data: SecurityClassRecordCreateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof securityClassCreate>>,
        TError,
        {data: SecurityClassRecordCreateData},
        TContext
      > => {

      const mutationOptions = getSecurityClassCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete Many Endpoint
 */
export const securityClassesDelete = (
    securityClassesDeleteBody: string[],
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/entity-structure/security-class/bulk`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: securityClassesDeleteBody
    },
      );
    }
  


export const getSecurityClassesDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityClassesDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof securityClassesDelete>>, TError,{data: string[]}, TContext> => {
    
const mutationKey = ['securityClassesDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof securityClassesDelete>>, {data: string[]}> = (props) => {
          const {data} = props ?? {};

          return  securityClassesDelete(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SecurityClassesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof securityClassesDelete>>>
    export type SecurityClassesDeleteMutationBody = string[]
    export type SecurityClassesDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Many Endpoint
 */
export const useSecurityClassesDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityClassesDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof securityClassesDelete>>,
        TError,
        {data: string[]},
        TContext
      > => {

      const mutationOptions = getSecurityClassesDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create Many Endpoint
 */
export const securityClassesBulkCreate = (
    securityClassRecordCreateData: SecurityClassRecordCreateData[],
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<SecurityClassRecordReadData[]>(
      {url: `/api/entity-structure/security-class/bulk`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: securityClassRecordCreateData, signal
    },
      );
    }
  


export const getSecurityClassesBulkCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityClassesBulkCreate>>, TError,{data: SecurityClassRecordCreateData[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof securityClassesBulkCreate>>, TError,{data: SecurityClassRecordCreateData[]}, TContext> => {
    
const mutationKey = ['securityClassesBulkCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof securityClassesBulkCreate>>, {data: SecurityClassRecordCreateData[]}> = (props) => {
          const {data} = props ?? {};

          return  securityClassesBulkCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SecurityClassesBulkCreateMutationResult = NonNullable<Awaited<ReturnType<typeof securityClassesBulkCreate>>>
    export type SecurityClassesBulkCreateMutationBody = SecurityClassRecordCreateData[]
    export type SecurityClassesBulkCreateMutationError = HTTPValidationError

    /**
 * @summary Create Many Endpoint
 */
export const useSecurityClassesBulkCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityClassesBulkCreate>>, TError,{data: SecurityClassRecordCreateData[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof securityClassesBulkCreate>>,
        TError,
        {data: SecurityClassRecordCreateData[]},
        TContext
      > => {

      const mutationOptions = getSecurityClassesBulkCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Security Class Data Table Api
 */
export const securityClassesTableDataRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<TableData>(
      {url: `/api/entity-structure/security-class/security-class-table-data`, method: 'GET', signal
    },
      );
    }
  

export const getSecurityClassesTableDataRetrieveQueryKey = () => {
    return [`/api/entity-structure/security-class/security-class-table-data`] as const;
    }

    
export const getSecurityClassesTableDataRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSecurityClassesTableDataRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>> = ({ signal }) => securityClassesTableDataRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SecurityClassesTableDataRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>>
export type SecurityClassesTableDataRetrieveQueryError = unknown


export function useSecurityClassesTableDataRetrieve<TData = Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityClassesTableDataRetrieve<TData = Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityClassesTableDataRetrieve<TData = Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Security Class Data Table Api
 */

export function useSecurityClassesTableDataRetrieve<TData = Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSecurityClassesTableDataRetrieveQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSecurityClassesTableDataRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSecurityClassesTableDataRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>> = ({ signal }) => securityClassesTableDataRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SecurityClassesTableDataRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>>
export type SecurityClassesTableDataRetrieveSuspenseQueryError = unknown


export function useSecurityClassesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityClassesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityClassesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Security Class Data Table Api
 */

export function useSecurityClassesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityClassesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSecurityClassesTableDataRetrieveSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete Endpoint
 */
export const securityClassDelete = (
    id: string,
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/entity-structure/security-class/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getSecurityClassDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityClassDelete>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof securityClassDelete>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['securityClassDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof securityClassDelete>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  securityClassDelete(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SecurityClassDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof securityClassDelete>>>
    
    export type SecurityClassDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Endpoint
 */
export const useSecurityClassDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityClassDelete>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof securityClassDelete>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getSecurityClassDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Endpoint
 */
export const securityClassRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<SecurityClassRecordReadData>(
      {url: `/api/entity-structure/security-class/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getSecurityClassRetrieveQueryKey = (id: string,) => {
    return [`/api/entity-structure/security-class/${id}`] as const;
    }

    
export const getSecurityClassRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof securityClassRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityClassRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSecurityClassRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof securityClassRetrieve>>> = ({ signal }) => securityClassRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof securityClassRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SecurityClassRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof securityClassRetrieve>>>
export type SecurityClassRetrieveQueryError = HTTPValidationError


export function useSecurityClassRetrieve<TData = Awaited<ReturnType<typeof securityClassRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityClassRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof securityClassRetrieve>>,
          TError,
          Awaited<ReturnType<typeof securityClassRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityClassRetrieve<TData = Awaited<ReturnType<typeof securityClassRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityClassRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof securityClassRetrieve>>,
          TError,
          Awaited<ReturnType<typeof securityClassRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityClassRetrieve<TData = Awaited<ReturnType<typeof securityClassRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityClassRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function useSecurityClassRetrieve<TData = Awaited<ReturnType<typeof securityClassRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityClassRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSecurityClassRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSecurityClassRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof securityClassRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityClassRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSecurityClassRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof securityClassRetrieve>>> = ({ signal }) => securityClassRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityClassRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SecurityClassRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof securityClassRetrieve>>>
export type SecurityClassRetrieveSuspenseQueryError = HTTPValidationError


export function useSecurityClassRetrieveSuspense<TData = Awaited<ReturnType<typeof securityClassRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityClassRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityClassRetrieveSuspense<TData = Awaited<ReturnType<typeof securityClassRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityClassRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityClassRetrieveSuspense<TData = Awaited<ReturnType<typeof securityClassRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityClassRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function useSecurityClassRetrieveSuspense<TData = Awaited<ReturnType<typeof securityClassRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityClassRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSecurityClassRetrieveSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Endpoint
 */
export const securityClassUpdate = (
    id: string,
    securityClassRecordUpdateData: SecurityClassRecordUpdateData,
 ) => {
      
      
      return axiosRequest<SecurityClassRecordReadData>(
      {url: `/api/entity-structure/security-class/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: securityClassRecordUpdateData
    },
      );
    }
  


export const getSecurityClassUpdateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityClassUpdate>>, TError,{id: string;data: SecurityClassRecordUpdateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof securityClassUpdate>>, TError,{id: string;data: SecurityClassRecordUpdateData}, TContext> => {
    
const mutationKey = ['securityClassUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof securityClassUpdate>>, {id: string;data: SecurityClassRecordUpdateData}> = (props) => {
          const {id,data} = props ?? {};

          return  securityClassUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SecurityClassUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof securityClassUpdate>>>
    export type SecurityClassUpdateMutationBody = SecurityClassRecordUpdateData
    export type SecurityClassUpdateMutationError = HTTPValidationError

    /**
 * @summary Update Endpoint
 */
export const useSecurityClassUpdate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityClassUpdate>>, TError,{id: string;data: SecurityClassRecordUpdateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof securityClassUpdate>>,
        TError,
        {id: string;data: SecurityClassRecordUpdateData},
        TContext
      > => {

      const mutationOptions = getSecurityClassUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Versions Endpoint
 */
export const securityClassVersionsRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<VersionReadDataSecurityClassRecordReadData[]>(
      {url: `/api/entity-structure/security-class/${id}/versions`, method: 'GET', signal
    },
      );
    }
  

export const getSecurityClassVersionsRetrieveQueryKey = (id: string,) => {
    return [`/api/entity-structure/security-class/${id}/versions`] as const;
    }

    
export const getSecurityClassVersionsRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof securityClassVersionsRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityClassVersionsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSecurityClassVersionsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof securityClassVersionsRetrieve>>> = ({ signal }) => securityClassVersionsRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof securityClassVersionsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SecurityClassVersionsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof securityClassVersionsRetrieve>>>
export type SecurityClassVersionsRetrieveQueryError = HTTPValidationError


export function useSecurityClassVersionsRetrieve<TData = Awaited<ReturnType<typeof securityClassVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityClassVersionsRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof securityClassVersionsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof securityClassVersionsRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityClassVersionsRetrieve<TData = Awaited<ReturnType<typeof securityClassVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityClassVersionsRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof securityClassVersionsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof securityClassVersionsRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityClassVersionsRetrieve<TData = Awaited<ReturnType<typeof securityClassVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityClassVersionsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Versions Endpoint
 */

export function useSecurityClassVersionsRetrieve<TData = Awaited<ReturnType<typeof securityClassVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityClassVersionsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSecurityClassVersionsRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSecurityClassVersionsRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof securityClassVersionsRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityClassVersionsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSecurityClassVersionsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof securityClassVersionsRetrieve>>> = ({ signal }) => securityClassVersionsRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityClassVersionsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SecurityClassVersionsRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof securityClassVersionsRetrieve>>>
export type SecurityClassVersionsRetrieveSuspenseQueryError = HTTPValidationError


export function useSecurityClassVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof securityClassVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityClassVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityClassVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof securityClassVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityClassVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityClassVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof securityClassVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityClassVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Versions Endpoint
 */

export function useSecurityClassVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof securityClassVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityClassVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSecurityClassVersionsRetrieveSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Endpoint
 */
export const securityOwnershipCreate = (
    securityOwnershipRecordCreateData: SecurityOwnershipRecordCreateData,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<SecurityOwnershipRecordReadData>(
      {url: `/api/entity-structure/security-ownership/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: securityOwnershipRecordCreateData, signal
    },
      );
    }
  


export const getSecurityOwnershipCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityOwnershipCreate>>, TError,{data: SecurityOwnershipRecordCreateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof securityOwnershipCreate>>, TError,{data: SecurityOwnershipRecordCreateData}, TContext> => {
    
const mutationKey = ['securityOwnershipCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof securityOwnershipCreate>>, {data: SecurityOwnershipRecordCreateData}> = (props) => {
          const {data} = props ?? {};

          return  securityOwnershipCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SecurityOwnershipCreateMutationResult = NonNullable<Awaited<ReturnType<typeof securityOwnershipCreate>>>
    export type SecurityOwnershipCreateMutationBody = SecurityOwnershipRecordCreateData
    export type SecurityOwnershipCreateMutationError = HTTPValidationError

    /**
 * @summary Create Endpoint
 */
export const useSecurityOwnershipCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityOwnershipCreate>>, TError,{data: SecurityOwnershipRecordCreateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof securityOwnershipCreate>>,
        TError,
        {data: SecurityOwnershipRecordCreateData},
        TContext
      > => {

      const mutationOptions = getSecurityOwnershipCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete Many Endpoint
 */
export const securityOwnershipsDelete = (
    securityOwnershipsDeleteBody: string[],
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/entity-structure/security-ownership/bulk`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: securityOwnershipsDeleteBody
    },
      );
    }
  


export const getSecurityOwnershipsDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityOwnershipsDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof securityOwnershipsDelete>>, TError,{data: string[]}, TContext> => {
    
const mutationKey = ['securityOwnershipsDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof securityOwnershipsDelete>>, {data: string[]}> = (props) => {
          const {data} = props ?? {};

          return  securityOwnershipsDelete(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SecurityOwnershipsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof securityOwnershipsDelete>>>
    export type SecurityOwnershipsDeleteMutationBody = string[]
    export type SecurityOwnershipsDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Many Endpoint
 */
export const useSecurityOwnershipsDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityOwnershipsDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof securityOwnershipsDelete>>,
        TError,
        {data: string[]},
        TContext
      > => {

      const mutationOptions = getSecurityOwnershipsDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create Many Endpoint
 */
export const securityOwnershipsBulkCreate = (
    securityOwnershipRecordCreateData: SecurityOwnershipRecordCreateData[],
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<SecurityOwnershipRecordReadData[]>(
      {url: `/api/entity-structure/security-ownership/bulk`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: securityOwnershipRecordCreateData, signal
    },
      );
    }
  


export const getSecurityOwnershipsBulkCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityOwnershipsBulkCreate>>, TError,{data: SecurityOwnershipRecordCreateData[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof securityOwnershipsBulkCreate>>, TError,{data: SecurityOwnershipRecordCreateData[]}, TContext> => {
    
const mutationKey = ['securityOwnershipsBulkCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof securityOwnershipsBulkCreate>>, {data: SecurityOwnershipRecordCreateData[]}> = (props) => {
          const {data} = props ?? {};

          return  securityOwnershipsBulkCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SecurityOwnershipsBulkCreateMutationResult = NonNullable<Awaited<ReturnType<typeof securityOwnershipsBulkCreate>>>
    export type SecurityOwnershipsBulkCreateMutationBody = SecurityOwnershipRecordCreateData[]
    export type SecurityOwnershipsBulkCreateMutationError = HTTPValidationError

    /**
 * @summary Create Many Endpoint
 */
export const useSecurityOwnershipsBulkCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityOwnershipsBulkCreate>>, TError,{data: SecurityOwnershipRecordCreateData[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof securityOwnershipsBulkCreate>>,
        TError,
        {data: SecurityOwnershipRecordCreateData[]},
        TContext
      > => {

      const mutationOptions = getSecurityOwnershipsBulkCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Security Ownership Data Table Api
 */
export const securityOwnershipsTableDataRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<TableData>(
      {url: `/api/entity-structure/security-ownership/security-ownership-table-data`, method: 'GET', signal
    },
      );
    }
  

export const getSecurityOwnershipsTableDataRetrieveQueryKey = () => {
    return [`/api/entity-structure/security-ownership/security-ownership-table-data`] as const;
    }

    
export const getSecurityOwnershipsTableDataRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSecurityOwnershipsTableDataRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>> = ({ signal }) => securityOwnershipsTableDataRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SecurityOwnershipsTableDataRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>>
export type SecurityOwnershipsTableDataRetrieveQueryError = unknown


export function useSecurityOwnershipsTableDataRetrieve<TData = Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityOwnershipsTableDataRetrieve<TData = Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityOwnershipsTableDataRetrieve<TData = Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Security Ownership Data Table Api
 */

export function useSecurityOwnershipsTableDataRetrieve<TData = Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSecurityOwnershipsTableDataRetrieveQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSecurityOwnershipsTableDataRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSecurityOwnershipsTableDataRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>> = ({ signal }) => securityOwnershipsTableDataRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SecurityOwnershipsTableDataRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>>
export type SecurityOwnershipsTableDataRetrieveSuspenseQueryError = unknown


export function useSecurityOwnershipsTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityOwnershipsTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityOwnershipsTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Security Ownership Data Table Api
 */

export function useSecurityOwnershipsTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityOwnershipsTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSecurityOwnershipsTableDataRetrieveSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete Endpoint
 */
export const securityOwnershipDelete = (
    id: string,
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/entity-structure/security-ownership/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getSecurityOwnershipDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityOwnershipDelete>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof securityOwnershipDelete>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['securityOwnershipDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof securityOwnershipDelete>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  securityOwnershipDelete(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SecurityOwnershipDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof securityOwnershipDelete>>>
    
    export type SecurityOwnershipDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Endpoint
 */
export const useSecurityOwnershipDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityOwnershipDelete>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof securityOwnershipDelete>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getSecurityOwnershipDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Endpoint
 */
export const securityOwnershipRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<SecurityOwnershipRecordReadData>(
      {url: `/api/entity-structure/security-ownership/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getSecurityOwnershipRetrieveQueryKey = (id: string,) => {
    return [`/api/entity-structure/security-ownership/${id}`] as const;
    }

    
export const getSecurityOwnershipRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof securityOwnershipRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityOwnershipRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSecurityOwnershipRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof securityOwnershipRetrieve>>> = ({ signal }) => securityOwnershipRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof securityOwnershipRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SecurityOwnershipRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof securityOwnershipRetrieve>>>
export type SecurityOwnershipRetrieveQueryError = HTTPValidationError


export function useSecurityOwnershipRetrieve<TData = Awaited<ReturnType<typeof securityOwnershipRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityOwnershipRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof securityOwnershipRetrieve>>,
          TError,
          Awaited<ReturnType<typeof securityOwnershipRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityOwnershipRetrieve<TData = Awaited<ReturnType<typeof securityOwnershipRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityOwnershipRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof securityOwnershipRetrieve>>,
          TError,
          Awaited<ReturnType<typeof securityOwnershipRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityOwnershipRetrieve<TData = Awaited<ReturnType<typeof securityOwnershipRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityOwnershipRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function useSecurityOwnershipRetrieve<TData = Awaited<ReturnType<typeof securityOwnershipRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityOwnershipRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSecurityOwnershipRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSecurityOwnershipRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof securityOwnershipRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityOwnershipRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSecurityOwnershipRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof securityOwnershipRetrieve>>> = ({ signal }) => securityOwnershipRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityOwnershipRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SecurityOwnershipRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof securityOwnershipRetrieve>>>
export type SecurityOwnershipRetrieveSuspenseQueryError = HTTPValidationError


export function useSecurityOwnershipRetrieveSuspense<TData = Awaited<ReturnType<typeof securityOwnershipRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityOwnershipRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityOwnershipRetrieveSuspense<TData = Awaited<ReturnType<typeof securityOwnershipRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityOwnershipRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityOwnershipRetrieveSuspense<TData = Awaited<ReturnType<typeof securityOwnershipRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityOwnershipRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function useSecurityOwnershipRetrieveSuspense<TData = Awaited<ReturnType<typeof securityOwnershipRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityOwnershipRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSecurityOwnershipRetrieveSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Endpoint
 */
export const securityOwnershipUpdate = (
    id: string,
    securityOwnershipRecordUpdateData: SecurityOwnershipRecordUpdateData,
 ) => {
      
      
      return axiosRequest<SecurityOwnershipRecordReadData>(
      {url: `/api/entity-structure/security-ownership/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: securityOwnershipRecordUpdateData
    },
      );
    }
  


export const getSecurityOwnershipUpdateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityOwnershipUpdate>>, TError,{id: string;data: SecurityOwnershipRecordUpdateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof securityOwnershipUpdate>>, TError,{id: string;data: SecurityOwnershipRecordUpdateData}, TContext> => {
    
const mutationKey = ['securityOwnershipUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof securityOwnershipUpdate>>, {id: string;data: SecurityOwnershipRecordUpdateData}> = (props) => {
          const {id,data} = props ?? {};

          return  securityOwnershipUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SecurityOwnershipUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof securityOwnershipUpdate>>>
    export type SecurityOwnershipUpdateMutationBody = SecurityOwnershipRecordUpdateData
    export type SecurityOwnershipUpdateMutationError = HTTPValidationError

    /**
 * @summary Update Endpoint
 */
export const useSecurityOwnershipUpdate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityOwnershipUpdate>>, TError,{id: string;data: SecurityOwnershipRecordUpdateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof securityOwnershipUpdate>>,
        TError,
        {id: string;data: SecurityOwnershipRecordUpdateData},
        TContext
      > => {

      const mutationOptions = getSecurityOwnershipUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Versions Endpoint
 */
export const securityOwnershipVersionsRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<VersionReadDataSecurityOwnershipRecordReadData[]>(
      {url: `/api/entity-structure/security-ownership/${id}/versions`, method: 'GET', signal
    },
      );
    }
  

export const getSecurityOwnershipVersionsRetrieveQueryKey = (id: string,) => {
    return [`/api/entity-structure/security-ownership/${id}/versions`] as const;
    }

    
export const getSecurityOwnershipVersionsRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSecurityOwnershipVersionsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>> = ({ signal }) => securityOwnershipVersionsRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SecurityOwnershipVersionsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>>
export type SecurityOwnershipVersionsRetrieveQueryError = HTTPValidationError


export function useSecurityOwnershipVersionsRetrieve<TData = Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityOwnershipVersionsRetrieve<TData = Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityOwnershipVersionsRetrieve<TData = Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Versions Endpoint
 */

export function useSecurityOwnershipVersionsRetrieve<TData = Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSecurityOwnershipVersionsRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSecurityOwnershipVersionsRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSecurityOwnershipVersionsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>> = ({ signal }) => securityOwnershipVersionsRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SecurityOwnershipVersionsRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>>
export type SecurityOwnershipVersionsRetrieveSuspenseQueryError = HTTPValidationError


export function useSecurityOwnershipVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityOwnershipVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityOwnershipVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Versions Endpoint
 */

export function useSecurityOwnershipVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityOwnershipVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSecurityOwnershipVersionsRetrieveSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Endpoint
 */
export const securityCreate = (
    securityRecordCreateData: SecurityRecordCreateData,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<SecurityRecordReadData>(
      {url: `/api/entity-structure/security/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: securityRecordCreateData, signal
    },
      );
    }
  


export const getSecurityCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityCreate>>, TError,{data: SecurityRecordCreateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof securityCreate>>, TError,{data: SecurityRecordCreateData}, TContext> => {
    
const mutationKey = ['securityCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof securityCreate>>, {data: SecurityRecordCreateData}> = (props) => {
          const {data} = props ?? {};

          return  securityCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SecurityCreateMutationResult = NonNullable<Awaited<ReturnType<typeof securityCreate>>>
    export type SecurityCreateMutationBody = SecurityRecordCreateData
    export type SecurityCreateMutationError = HTTPValidationError

    /**
 * @summary Create Endpoint
 */
export const useSecurityCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityCreate>>, TError,{data: SecurityRecordCreateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof securityCreate>>,
        TError,
        {data: SecurityRecordCreateData},
        TContext
      > => {

      const mutationOptions = getSecurityCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete Many Endpoint
 */
export const securitiesDelete = (
    securitiesDeleteBody: string[],
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/entity-structure/security/bulk`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: securitiesDeleteBody
    },
      );
    }
  


export const getSecuritiesDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securitiesDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof securitiesDelete>>, TError,{data: string[]}, TContext> => {
    
const mutationKey = ['securitiesDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof securitiesDelete>>, {data: string[]}> = (props) => {
          const {data} = props ?? {};

          return  securitiesDelete(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SecuritiesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof securitiesDelete>>>
    export type SecuritiesDeleteMutationBody = string[]
    export type SecuritiesDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Many Endpoint
 */
export const useSecuritiesDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securitiesDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof securitiesDelete>>,
        TError,
        {data: string[]},
        TContext
      > => {

      const mutationOptions = getSecuritiesDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create Many Endpoint
 */
export const securitiesBulkCreate = (
    securityRecordCreateData: SecurityRecordCreateData[],
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<SecurityRecordReadData[]>(
      {url: `/api/entity-structure/security/bulk`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: securityRecordCreateData, signal
    },
      );
    }
  


export const getSecuritiesBulkCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securitiesBulkCreate>>, TError,{data: SecurityRecordCreateData[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof securitiesBulkCreate>>, TError,{data: SecurityRecordCreateData[]}, TContext> => {
    
const mutationKey = ['securitiesBulkCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof securitiesBulkCreate>>, {data: SecurityRecordCreateData[]}> = (props) => {
          const {data} = props ?? {};

          return  securitiesBulkCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SecuritiesBulkCreateMutationResult = NonNullable<Awaited<ReturnType<typeof securitiesBulkCreate>>>
    export type SecuritiesBulkCreateMutationBody = SecurityRecordCreateData[]
    export type SecuritiesBulkCreateMutationError = HTTPValidationError

    /**
 * @summary Create Many Endpoint
 */
export const useSecuritiesBulkCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securitiesBulkCreate>>, TError,{data: SecurityRecordCreateData[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof securitiesBulkCreate>>,
        TError,
        {data: SecurityRecordCreateData[]},
        TContext
      > => {

      const mutationOptions = getSecuritiesBulkCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Security Data Table Api
 */
export const securitiesTableDataRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<TableData>(
      {url: `/api/entity-structure/security/security-table-data`, method: 'GET', signal
    },
      );
    }
  

export const getSecuritiesTableDataRetrieveQueryKey = () => {
    return [`/api/entity-structure/security/security-table-data`] as const;
    }

    
export const getSecuritiesTableDataRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof securitiesTableDataRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securitiesTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSecuritiesTableDataRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof securitiesTableDataRetrieve>>> = ({ signal }) => securitiesTableDataRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof securitiesTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SecuritiesTableDataRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof securitiesTableDataRetrieve>>>
export type SecuritiesTableDataRetrieveQueryError = unknown


export function useSecuritiesTableDataRetrieve<TData = Awaited<ReturnType<typeof securitiesTableDataRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof securitiesTableDataRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof securitiesTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof securitiesTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecuritiesTableDataRetrieve<TData = Awaited<ReturnType<typeof securitiesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securitiesTableDataRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof securitiesTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof securitiesTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecuritiesTableDataRetrieve<TData = Awaited<ReturnType<typeof securitiesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securitiesTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Security Data Table Api
 */

export function useSecuritiesTableDataRetrieve<TData = Awaited<ReturnType<typeof securitiesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securitiesTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSecuritiesTableDataRetrieveQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSecuritiesTableDataRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof securitiesTableDataRetrieve>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securitiesTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSecuritiesTableDataRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof securitiesTableDataRetrieve>>> = ({ signal }) => securitiesTableDataRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof securitiesTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SecuritiesTableDataRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof securitiesTableDataRetrieve>>>
export type SecuritiesTableDataRetrieveSuspenseQueryError = unknown


export function useSecuritiesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof securitiesTableDataRetrieve>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securitiesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecuritiesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof securitiesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securitiesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecuritiesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof securitiesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securitiesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Security Data Table Api
 */

export function useSecuritiesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof securitiesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securitiesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSecuritiesTableDataRetrieveSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete Endpoint
 */
export const securityDelete = (
    id: string,
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/entity-structure/security/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getSecurityDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityDelete>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof securityDelete>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['securityDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof securityDelete>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  securityDelete(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SecurityDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof securityDelete>>>
    
    export type SecurityDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Endpoint
 */
export const useSecurityDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityDelete>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof securityDelete>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getSecurityDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Endpoint
 */
export const securityRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<SecurityRecordReadData>(
      {url: `/api/entity-structure/security/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getSecurityRetrieveQueryKey = (id: string,) => {
    return [`/api/entity-structure/security/${id}`] as const;
    }

    
export const getSecurityRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof securityRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSecurityRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof securityRetrieve>>> = ({ signal }) => securityRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof securityRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SecurityRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof securityRetrieve>>>
export type SecurityRetrieveQueryError = HTTPValidationError


export function useSecurityRetrieve<TData = Awaited<ReturnType<typeof securityRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof securityRetrieve>>,
          TError,
          Awaited<ReturnType<typeof securityRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityRetrieve<TData = Awaited<ReturnType<typeof securityRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof securityRetrieve>>,
          TError,
          Awaited<ReturnType<typeof securityRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityRetrieve<TData = Awaited<ReturnType<typeof securityRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function useSecurityRetrieve<TData = Awaited<ReturnType<typeof securityRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSecurityRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSecurityRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof securityRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSecurityRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof securityRetrieve>>> = ({ signal }) => securityRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SecurityRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof securityRetrieve>>>
export type SecurityRetrieveSuspenseQueryError = HTTPValidationError


export function useSecurityRetrieveSuspense<TData = Awaited<ReturnType<typeof securityRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityRetrieveSuspense<TData = Awaited<ReturnType<typeof securityRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityRetrieveSuspense<TData = Awaited<ReturnType<typeof securityRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function useSecurityRetrieveSuspense<TData = Awaited<ReturnType<typeof securityRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSecurityRetrieveSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Endpoint
 */
export const securityUpdate = (
    id: string,
    securityRecordUpdateData: SecurityRecordUpdateData,
 ) => {
      
      
      return axiosRequest<SecurityRecordReadData>(
      {url: `/api/entity-structure/security/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: securityRecordUpdateData
    },
      );
    }
  


export const getSecurityUpdateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityUpdate>>, TError,{id: string;data: SecurityRecordUpdateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof securityUpdate>>, TError,{id: string;data: SecurityRecordUpdateData}, TContext> => {
    
const mutationKey = ['securityUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof securityUpdate>>, {id: string;data: SecurityRecordUpdateData}> = (props) => {
          const {id,data} = props ?? {};

          return  securityUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SecurityUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof securityUpdate>>>
    export type SecurityUpdateMutationBody = SecurityRecordUpdateData
    export type SecurityUpdateMutationError = HTTPValidationError

    /**
 * @summary Update Endpoint
 */
export const useSecurityUpdate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof securityUpdate>>, TError,{id: string;data: SecurityRecordUpdateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof securityUpdate>>,
        TError,
        {id: string;data: SecurityRecordUpdateData},
        TContext
      > => {

      const mutationOptions = getSecurityUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Versions Endpoint
 */
export const securityVersionsRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<VersionReadDataSecurityRecordReadData[]>(
      {url: `/api/entity-structure/security/${id}/versions`, method: 'GET', signal
    },
      );
    }
  

export const getSecurityVersionsRetrieveQueryKey = (id: string,) => {
    return [`/api/entity-structure/security/${id}/versions`] as const;
    }

    
export const getSecurityVersionsRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof securityVersionsRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityVersionsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSecurityVersionsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof securityVersionsRetrieve>>> = ({ signal }) => securityVersionsRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof securityVersionsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SecurityVersionsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof securityVersionsRetrieve>>>
export type SecurityVersionsRetrieveQueryError = HTTPValidationError


export function useSecurityVersionsRetrieve<TData = Awaited<ReturnType<typeof securityVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityVersionsRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof securityVersionsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof securityVersionsRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityVersionsRetrieve<TData = Awaited<ReturnType<typeof securityVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityVersionsRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof securityVersionsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof securityVersionsRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityVersionsRetrieve<TData = Awaited<ReturnType<typeof securityVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityVersionsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Versions Endpoint
 */

export function useSecurityVersionsRetrieve<TData = Awaited<ReturnType<typeof securityVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof securityVersionsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSecurityVersionsRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSecurityVersionsRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof securityVersionsRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityVersionsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSecurityVersionsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof securityVersionsRetrieve>>> = ({ signal }) => securityVersionsRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityVersionsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SecurityVersionsRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof securityVersionsRetrieve>>>
export type SecurityVersionsRetrieveSuspenseQueryError = HTTPValidationError


export function useSecurityVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof securityVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof securityVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSecurityVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof securityVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Versions Endpoint
 */

export function useSecurityVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof securityVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof securityVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSecurityVersionsRetrieveSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Endpoint
 */
export const stakeholderCreate = (
    stakeholderRecordCreateData: StakeholderRecordCreateData,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<StakeholderRecordReadData>(
      {url: `/api/entity-structure/stakeholder/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: stakeholderRecordCreateData, signal
    },
      );
    }
  


export const getStakeholderCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stakeholderCreate>>, TError,{data: StakeholderRecordCreateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof stakeholderCreate>>, TError,{data: StakeholderRecordCreateData}, TContext> => {
    
const mutationKey = ['stakeholderCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof stakeholderCreate>>, {data: StakeholderRecordCreateData}> = (props) => {
          const {data} = props ?? {};

          return  stakeholderCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type StakeholderCreateMutationResult = NonNullable<Awaited<ReturnType<typeof stakeholderCreate>>>
    export type StakeholderCreateMutationBody = StakeholderRecordCreateData
    export type StakeholderCreateMutationError = HTTPValidationError

    /**
 * @summary Create Endpoint
 */
export const useStakeholderCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stakeholderCreate>>, TError,{data: StakeholderRecordCreateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof stakeholderCreate>>,
        TError,
        {data: StakeholderRecordCreateData},
        TContext
      > => {

      const mutationOptions = getStakeholderCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete Many Endpoint
 */
export const stakeholdersDelete = (
    stakeholdersDeleteBody: string[],
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/entity-structure/stakeholder/bulk`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: stakeholdersDeleteBody
    },
      );
    }
  


export const getStakeholdersDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stakeholdersDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof stakeholdersDelete>>, TError,{data: string[]}, TContext> => {
    
const mutationKey = ['stakeholdersDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof stakeholdersDelete>>, {data: string[]}> = (props) => {
          const {data} = props ?? {};

          return  stakeholdersDelete(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type StakeholdersDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof stakeholdersDelete>>>
    export type StakeholdersDeleteMutationBody = string[]
    export type StakeholdersDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Many Endpoint
 */
export const useStakeholdersDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stakeholdersDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof stakeholdersDelete>>,
        TError,
        {data: string[]},
        TContext
      > => {

      const mutationOptions = getStakeholdersDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create Many Endpoint
 */
export const stakeholdersBulkCreate = (
    stakeholderRecordCreateData: StakeholderRecordCreateData[],
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<StakeholderRecordReadData[]>(
      {url: `/api/entity-structure/stakeholder/bulk`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: stakeholderRecordCreateData, signal
    },
      );
    }
  


export const getStakeholdersBulkCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stakeholdersBulkCreate>>, TError,{data: StakeholderRecordCreateData[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof stakeholdersBulkCreate>>, TError,{data: StakeholderRecordCreateData[]}, TContext> => {
    
const mutationKey = ['stakeholdersBulkCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof stakeholdersBulkCreate>>, {data: StakeholderRecordCreateData[]}> = (props) => {
          const {data} = props ?? {};

          return  stakeholdersBulkCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type StakeholdersBulkCreateMutationResult = NonNullable<Awaited<ReturnType<typeof stakeholdersBulkCreate>>>
    export type StakeholdersBulkCreateMutationBody = StakeholderRecordCreateData[]
    export type StakeholdersBulkCreateMutationError = HTTPValidationError

    /**
 * @summary Create Many Endpoint
 */
export const useStakeholdersBulkCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stakeholdersBulkCreate>>, TError,{data: StakeholderRecordCreateData[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof stakeholdersBulkCreate>>,
        TError,
        {data: StakeholderRecordCreateData[]},
        TContext
      > => {

      const mutationOptions = getStakeholdersBulkCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Stakeholder Data Table Api
 */
export const stakeholdersTableDataRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<TableData>(
      {url: `/api/entity-structure/stakeholder/stakeholder-table-data`, method: 'GET', signal
    },
      );
    }
  

export const getStakeholdersTableDataRetrieveQueryKey = () => {
    return [`/api/entity-structure/stakeholder/stakeholder-table-data`] as const;
    }

    
export const getStakeholdersTableDataRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStakeholdersTableDataRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>> = ({ signal }) => stakeholdersTableDataRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type StakeholdersTableDataRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>>
export type StakeholdersTableDataRetrieveQueryError = unknown


export function useStakeholdersTableDataRetrieve<TData = Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useStakeholdersTableDataRetrieve<TData = Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useStakeholdersTableDataRetrieve<TData = Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Stakeholder Data Table Api
 */

export function useStakeholdersTableDataRetrieve<TData = Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getStakeholdersTableDataRetrieveQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getStakeholdersTableDataRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStakeholdersTableDataRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>> = ({ signal }) => stakeholdersTableDataRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type StakeholdersTableDataRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>>
export type StakeholdersTableDataRetrieveSuspenseQueryError = unknown


export function useStakeholdersTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useStakeholdersTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useStakeholdersTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Stakeholder Data Table Api
 */

export function useStakeholdersTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof stakeholdersTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getStakeholdersTableDataRetrieveSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete Endpoint
 */
export const stakeholderDelete = (
    id: string,
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/entity-structure/stakeholder/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getStakeholderDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stakeholderDelete>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof stakeholderDelete>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['stakeholderDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof stakeholderDelete>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  stakeholderDelete(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type StakeholderDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof stakeholderDelete>>>
    
    export type StakeholderDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Endpoint
 */
export const useStakeholderDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stakeholderDelete>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof stakeholderDelete>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getStakeholderDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Endpoint
 */
export const stakeholderRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<StakeholderRecordReadData>(
      {url: `/api/entity-structure/stakeholder/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getStakeholderRetrieveQueryKey = (id: string,) => {
    return [`/api/entity-structure/stakeholder/${id}`] as const;
    }

    
export const getStakeholderRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof stakeholderRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stakeholderRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStakeholderRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof stakeholderRetrieve>>> = ({ signal }) => stakeholderRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof stakeholderRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type StakeholderRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof stakeholderRetrieve>>>
export type StakeholderRetrieveQueryError = HTTPValidationError


export function useStakeholderRetrieve<TData = Awaited<ReturnType<typeof stakeholderRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof stakeholderRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof stakeholderRetrieve>>,
          TError,
          Awaited<ReturnType<typeof stakeholderRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useStakeholderRetrieve<TData = Awaited<ReturnType<typeof stakeholderRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stakeholderRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof stakeholderRetrieve>>,
          TError,
          Awaited<ReturnType<typeof stakeholderRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useStakeholderRetrieve<TData = Awaited<ReturnType<typeof stakeholderRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stakeholderRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function useStakeholderRetrieve<TData = Awaited<ReturnType<typeof stakeholderRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stakeholderRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getStakeholderRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getStakeholderRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof stakeholderRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof stakeholderRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStakeholderRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof stakeholderRetrieve>>> = ({ signal }) => stakeholderRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof stakeholderRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type StakeholderRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof stakeholderRetrieve>>>
export type StakeholderRetrieveSuspenseQueryError = HTTPValidationError


export function useStakeholderRetrieveSuspense<TData = Awaited<ReturnType<typeof stakeholderRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof stakeholderRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useStakeholderRetrieveSuspense<TData = Awaited<ReturnType<typeof stakeholderRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof stakeholderRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useStakeholderRetrieveSuspense<TData = Awaited<ReturnType<typeof stakeholderRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof stakeholderRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function useStakeholderRetrieveSuspense<TData = Awaited<ReturnType<typeof stakeholderRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof stakeholderRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getStakeholderRetrieveSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Endpoint
 */
export const stakeholderUpdate = (
    id: string,
    stakeholderRecordUpdateData: StakeholderRecordUpdateData,
 ) => {
      
      
      return axiosRequest<StakeholderRecordReadData>(
      {url: `/api/entity-structure/stakeholder/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: stakeholderRecordUpdateData
    },
      );
    }
  


export const getStakeholderUpdateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stakeholderUpdate>>, TError,{id: string;data: StakeholderRecordUpdateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof stakeholderUpdate>>, TError,{id: string;data: StakeholderRecordUpdateData}, TContext> => {
    
const mutationKey = ['stakeholderUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof stakeholderUpdate>>, {id: string;data: StakeholderRecordUpdateData}> = (props) => {
          const {id,data} = props ?? {};

          return  stakeholderUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type StakeholderUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof stakeholderUpdate>>>
    export type StakeholderUpdateMutationBody = StakeholderRecordUpdateData
    export type StakeholderUpdateMutationError = HTTPValidationError

    /**
 * @summary Update Endpoint
 */
export const useStakeholderUpdate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stakeholderUpdate>>, TError,{id: string;data: StakeholderRecordUpdateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof stakeholderUpdate>>,
        TError,
        {id: string;data: StakeholderRecordUpdateData},
        TContext
      > => {

      const mutationOptions = getStakeholderUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Versions Endpoint
 */
export const stakeholderVersionsRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<VersionReadDataStakeholderRecordReadData[]>(
      {url: `/api/entity-structure/stakeholder/${id}/versions`, method: 'GET', signal
    },
      );
    }
  

export const getStakeholderVersionsRetrieveQueryKey = (id: string,) => {
    return [`/api/entity-structure/stakeholder/${id}/versions`] as const;
    }

    
export const getStakeholderVersionsRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStakeholderVersionsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>> = ({ signal }) => stakeholderVersionsRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type StakeholderVersionsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>>
export type StakeholderVersionsRetrieveQueryError = HTTPValidationError


export function useStakeholderVersionsRetrieve<TData = Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useStakeholderVersionsRetrieve<TData = Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useStakeholderVersionsRetrieve<TData = Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Versions Endpoint
 */

export function useStakeholderVersionsRetrieve<TData = Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getStakeholderVersionsRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getStakeholderVersionsRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStakeholderVersionsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>> = ({ signal }) => stakeholderVersionsRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type StakeholderVersionsRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>>
export type StakeholderVersionsRetrieveSuspenseQueryError = HTTPValidationError


export function useStakeholderVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useStakeholderVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useStakeholderVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Versions Endpoint
 */

export function useStakeholderVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof stakeholderVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getStakeholderVersionsRetrieveSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



