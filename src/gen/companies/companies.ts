/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Rengo
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  CompanyRecordCreateData
} from '../schemas/companyRecordCreateData'
import type {
  CompanyRecordReadData
} from '../schemas/companyRecordReadData'
import type {
  CompanyRecordUpdateData
} from '../schemas/companyRecordUpdateData'
import type {
  HTTPValidationError
} from '../schemas/hTTPValidationError'
import type {
  TableData
} from '../schemas/tableData'
import type {
  VersionReadDataCompanyRecordReadData
} from '../schemas/versionReadDataCompanyRecordReadData'
import { axiosRequest } from '../../shared/api/api';



/**
 * @summary Create Endpoint
 */
export const companyCreate = (
    companyRecordCreateData: CompanyRecordCreateData,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<CompanyRecordReadData>(
      {url: `/api/companies/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: companyRecordCreateData, signal
    },
      );
    }
  


export const getCompanyCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof companyCreate>>, TError,{data: CompanyRecordCreateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof companyCreate>>, TError,{data: CompanyRecordCreateData}, TContext> => {
    
const mutationKey = ['companyCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof companyCreate>>, {data: CompanyRecordCreateData}> = (props) => {
          const {data} = props ?? {};

          return  companyCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CompanyCreateMutationResult = NonNullable<Awaited<ReturnType<typeof companyCreate>>>
    export type CompanyCreateMutationBody = CompanyRecordCreateData
    export type CompanyCreateMutationError = HTTPValidationError

    /**
 * @summary Create Endpoint
 */
export const useCompanyCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof companyCreate>>, TError,{data: CompanyRecordCreateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof companyCreate>>,
        TError,
        {data: CompanyRecordCreateData},
        TContext
      > => {

      const mutationOptions = getCompanyCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete Many Endpoint
 */
export const companiesDelete = (
    companiesDeleteBody: string[],
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/companies/bulk`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: companiesDeleteBody
    },
      );
    }
  


export const getCompaniesDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof companiesDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof companiesDelete>>, TError,{data: string[]}, TContext> => {
    
const mutationKey = ['companiesDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof companiesDelete>>, {data: string[]}> = (props) => {
          const {data} = props ?? {};

          return  companiesDelete(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CompaniesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof companiesDelete>>>
    export type CompaniesDeleteMutationBody = string[]
    export type CompaniesDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Many Endpoint
 */
export const useCompaniesDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof companiesDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof companiesDelete>>,
        TError,
        {data: string[]},
        TContext
      > => {

      const mutationOptions = getCompaniesDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create Many Endpoint
 */
export const companiesBulkCreate = (
    companyRecordCreateData: CompanyRecordCreateData[],
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<CompanyRecordReadData[]>(
      {url: `/api/companies/bulk`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: companyRecordCreateData, signal
    },
      );
    }
  


export const getCompaniesBulkCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof companiesBulkCreate>>, TError,{data: CompanyRecordCreateData[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof companiesBulkCreate>>, TError,{data: CompanyRecordCreateData[]}, TContext> => {
    
const mutationKey = ['companiesBulkCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof companiesBulkCreate>>, {data: CompanyRecordCreateData[]}> = (props) => {
          const {data} = props ?? {};

          return  companiesBulkCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CompaniesBulkCreateMutationResult = NonNullable<Awaited<ReturnType<typeof companiesBulkCreate>>>
    export type CompaniesBulkCreateMutationBody = CompanyRecordCreateData[]
    export type CompaniesBulkCreateMutationError = HTTPValidationError

    /**
 * @summary Create Many Endpoint
 */
export const useCompaniesBulkCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof companiesBulkCreate>>, TError,{data: CompanyRecordCreateData[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof companiesBulkCreate>>,
        TError,
        {data: CompanyRecordCreateData[]},
        TContext
      > => {

      const mutationOptions = getCompaniesBulkCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Companies List Api
 */
export const companiesListRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<CompanyRecordReadData[]>(
      {url: `/api/companies/companies`, method: 'GET', signal
    },
      );
    }
  

export const getCompaniesListRetrieveQueryKey = () => {
    return [`/api/companies/companies`] as const;
    }

    
export const getCompaniesListRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof companiesListRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof companiesListRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCompaniesListRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof companiesListRetrieve>>> = ({ signal }) => companiesListRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof companiesListRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CompaniesListRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof companiesListRetrieve>>>
export type CompaniesListRetrieveQueryError = unknown


export function useCompaniesListRetrieve<TData = Awaited<ReturnType<typeof companiesListRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof companiesListRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof companiesListRetrieve>>,
          TError,
          Awaited<ReturnType<typeof companiesListRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCompaniesListRetrieve<TData = Awaited<ReturnType<typeof companiesListRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof companiesListRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof companiesListRetrieve>>,
          TError,
          Awaited<ReturnType<typeof companiesListRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCompaniesListRetrieve<TData = Awaited<ReturnType<typeof companiesListRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof companiesListRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Companies List Api
 */

export function useCompaniesListRetrieve<TData = Awaited<ReturnType<typeof companiesListRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof companiesListRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCompaniesListRetrieveQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getCompaniesListRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof companiesListRetrieve>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof companiesListRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCompaniesListRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof companiesListRetrieve>>> = ({ signal }) => companiesListRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof companiesListRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CompaniesListRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof companiesListRetrieve>>>
export type CompaniesListRetrieveSuspenseQueryError = unknown


export function useCompaniesListRetrieveSuspense<TData = Awaited<ReturnType<typeof companiesListRetrieve>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof companiesListRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCompaniesListRetrieveSuspense<TData = Awaited<ReturnType<typeof companiesListRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof companiesListRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCompaniesListRetrieveSuspense<TData = Awaited<ReturnType<typeof companiesListRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof companiesListRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Companies List Api
 */

export function useCompaniesListRetrieveSuspense<TData = Awaited<ReturnType<typeof companiesListRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof companiesListRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCompaniesListRetrieveSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Company Data Table Api
 */
export const companiesTableDataRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<TableData>(
      {url: `/api/companies/company-table-data`, method: 'GET', signal
    },
      );
    }
  

export const getCompaniesTableDataRetrieveQueryKey = () => {
    return [`/api/companies/company-table-data`] as const;
    }

    
export const getCompaniesTableDataRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof companiesTableDataRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof companiesTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCompaniesTableDataRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof companiesTableDataRetrieve>>> = ({ signal }) => companiesTableDataRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof companiesTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CompaniesTableDataRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof companiesTableDataRetrieve>>>
export type CompaniesTableDataRetrieveQueryError = unknown


export function useCompaniesTableDataRetrieve<TData = Awaited<ReturnType<typeof companiesTableDataRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof companiesTableDataRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof companiesTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof companiesTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCompaniesTableDataRetrieve<TData = Awaited<ReturnType<typeof companiesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof companiesTableDataRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof companiesTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof companiesTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCompaniesTableDataRetrieve<TData = Awaited<ReturnType<typeof companiesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof companiesTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Company Data Table Api
 */

export function useCompaniesTableDataRetrieve<TData = Awaited<ReturnType<typeof companiesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof companiesTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCompaniesTableDataRetrieveQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getCompaniesTableDataRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof companiesTableDataRetrieve>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof companiesTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCompaniesTableDataRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof companiesTableDataRetrieve>>> = ({ signal }) => companiesTableDataRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof companiesTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CompaniesTableDataRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof companiesTableDataRetrieve>>>
export type CompaniesTableDataRetrieveSuspenseQueryError = unknown


export function useCompaniesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof companiesTableDataRetrieve>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof companiesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCompaniesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof companiesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof companiesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCompaniesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof companiesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof companiesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Company Data Table Api
 */

export function useCompaniesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof companiesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof companiesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCompaniesTableDataRetrieveSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete Endpoint
 */
export const companyDelete = (
    id: string,
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/companies/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getCompanyDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof companyDelete>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof companyDelete>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['companyDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof companyDelete>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  companyDelete(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CompanyDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof companyDelete>>>
    
    export type CompanyDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Endpoint
 */
export const useCompanyDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof companyDelete>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof companyDelete>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getCompanyDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Endpoint
 */
export const companyRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<CompanyRecordReadData>(
      {url: `/api/companies/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getCompanyRetrieveQueryKey = (id: string,) => {
    return [`/api/companies/${id}`] as const;
    }

    
export const getCompanyRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof companyRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof companyRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCompanyRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof companyRetrieve>>> = ({ signal }) => companyRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof companyRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CompanyRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof companyRetrieve>>>
export type CompanyRetrieveQueryError = HTTPValidationError


export function useCompanyRetrieve<TData = Awaited<ReturnType<typeof companyRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof companyRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof companyRetrieve>>,
          TError,
          Awaited<ReturnType<typeof companyRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCompanyRetrieve<TData = Awaited<ReturnType<typeof companyRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof companyRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof companyRetrieve>>,
          TError,
          Awaited<ReturnType<typeof companyRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCompanyRetrieve<TData = Awaited<ReturnType<typeof companyRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof companyRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function useCompanyRetrieve<TData = Awaited<ReturnType<typeof companyRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof companyRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCompanyRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getCompanyRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof companyRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof companyRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCompanyRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof companyRetrieve>>> = ({ signal }) => companyRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof companyRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CompanyRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof companyRetrieve>>>
export type CompanyRetrieveSuspenseQueryError = HTTPValidationError


export function useCompanyRetrieveSuspense<TData = Awaited<ReturnType<typeof companyRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof companyRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCompanyRetrieveSuspense<TData = Awaited<ReturnType<typeof companyRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof companyRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCompanyRetrieveSuspense<TData = Awaited<ReturnType<typeof companyRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof companyRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function useCompanyRetrieveSuspense<TData = Awaited<ReturnType<typeof companyRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof companyRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCompanyRetrieveSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Endpoint
 */
export const companyUpdate = (
    id: string,
    companyRecordUpdateData: CompanyRecordUpdateData,
 ) => {
      
      
      return axiosRequest<CompanyRecordReadData>(
      {url: `/api/companies/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: companyRecordUpdateData
    },
      );
    }
  


export const getCompanyUpdateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof companyUpdate>>, TError,{id: string;data: CompanyRecordUpdateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof companyUpdate>>, TError,{id: string;data: CompanyRecordUpdateData}, TContext> => {
    
const mutationKey = ['companyUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof companyUpdate>>, {id: string;data: CompanyRecordUpdateData}> = (props) => {
          const {id,data} = props ?? {};

          return  companyUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CompanyUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof companyUpdate>>>
    export type CompanyUpdateMutationBody = CompanyRecordUpdateData
    export type CompanyUpdateMutationError = HTTPValidationError

    /**
 * @summary Update Endpoint
 */
export const useCompanyUpdate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof companyUpdate>>, TError,{id: string;data: CompanyRecordUpdateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof companyUpdate>>,
        TError,
        {id: string;data: CompanyRecordUpdateData},
        TContext
      > => {

      const mutationOptions = getCompanyUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Versions Endpoint
 */
export const companyVersionsRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<VersionReadDataCompanyRecordReadData[]>(
      {url: `/api/companies/${id}/versions`, method: 'GET', signal
    },
      );
    }
  

export const getCompanyVersionsRetrieveQueryKey = (id: string,) => {
    return [`/api/companies/${id}/versions`] as const;
    }

    
export const getCompanyVersionsRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof companyVersionsRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof companyVersionsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCompanyVersionsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof companyVersionsRetrieve>>> = ({ signal }) => companyVersionsRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof companyVersionsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CompanyVersionsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof companyVersionsRetrieve>>>
export type CompanyVersionsRetrieveQueryError = HTTPValidationError


export function useCompanyVersionsRetrieve<TData = Awaited<ReturnType<typeof companyVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof companyVersionsRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof companyVersionsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof companyVersionsRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCompanyVersionsRetrieve<TData = Awaited<ReturnType<typeof companyVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof companyVersionsRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof companyVersionsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof companyVersionsRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCompanyVersionsRetrieve<TData = Awaited<ReturnType<typeof companyVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof companyVersionsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Versions Endpoint
 */

export function useCompanyVersionsRetrieve<TData = Awaited<ReturnType<typeof companyVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof companyVersionsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCompanyVersionsRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getCompanyVersionsRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof companyVersionsRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof companyVersionsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCompanyVersionsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof companyVersionsRetrieve>>> = ({ signal }) => companyVersionsRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof companyVersionsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CompanyVersionsRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof companyVersionsRetrieve>>>
export type CompanyVersionsRetrieveSuspenseQueryError = HTTPValidationError


export function useCompanyVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof companyVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof companyVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCompanyVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof companyVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof companyVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCompanyVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof companyVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof companyVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Versions Endpoint
 */

export function useCompanyVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof companyVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof companyVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCompanyVersionsRetrieveSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



