/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Rengo
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  DataConnectorIntegrationRecordCreateData
} from '../schemas/dataConnectorIntegrationRecordCreateData'
import type {
  DataConnectorIntegrationRecordReadData
} from '../schemas/dataConnectorIntegrationRecordReadData'
import type {
  DataConnectorIntegrationRecordUpdateData
} from '../schemas/dataConnectorIntegrationRecordUpdateData'
import type {
  HTTPValidationError
} from '../schemas/hTTPValidationError'
import { axiosRequest } from '../../shared/api/api';



/**
 * @summary Create Endpoint
 */
export const dataConnectorIntegrationCreate = (
    dataConnectorIntegrationRecordCreateData: DataConnectorIntegrationRecordCreateData,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<DataConnectorIntegrationRecordReadData>(
      {url: `/api/data-connector/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dataConnectorIntegrationRecordCreateData, signal
    },
      );
    }
  


export const getDataConnectorIntegrationCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataConnectorIntegrationCreate>>, TError,{data: DataConnectorIntegrationRecordCreateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof dataConnectorIntegrationCreate>>, TError,{data: DataConnectorIntegrationRecordCreateData}, TContext> => {
    
const mutationKey = ['dataConnectorIntegrationCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dataConnectorIntegrationCreate>>, {data: DataConnectorIntegrationRecordCreateData}> = (props) => {
          const {data} = props ?? {};

          return  dataConnectorIntegrationCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DataConnectorIntegrationCreateMutationResult = NonNullable<Awaited<ReturnType<typeof dataConnectorIntegrationCreate>>>
    export type DataConnectorIntegrationCreateMutationBody = DataConnectorIntegrationRecordCreateData
    export type DataConnectorIntegrationCreateMutationError = HTTPValidationError

    /**
 * @summary Create Endpoint
 */
export const useDataConnectorIntegrationCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataConnectorIntegrationCreate>>, TError,{data: DataConnectorIntegrationRecordCreateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof dataConnectorIntegrationCreate>>,
        TError,
        {data: DataConnectorIntegrationRecordCreateData},
        TContext
      > => {

      const mutationOptions = getDataConnectorIntegrationCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete Many Endpoint
 */
export const dataConnectorIntegrationsDelete = (
    dataConnectorIntegrationsDeleteBody: string[],
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/data-connector/bulk`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: dataConnectorIntegrationsDeleteBody
    },
      );
    }
  


export const getDataConnectorIntegrationsDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataConnectorIntegrationsDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof dataConnectorIntegrationsDelete>>, TError,{data: string[]}, TContext> => {
    
const mutationKey = ['dataConnectorIntegrationsDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dataConnectorIntegrationsDelete>>, {data: string[]}> = (props) => {
          const {data} = props ?? {};

          return  dataConnectorIntegrationsDelete(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DataConnectorIntegrationsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof dataConnectorIntegrationsDelete>>>
    export type DataConnectorIntegrationsDeleteMutationBody = string[]
    export type DataConnectorIntegrationsDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Many Endpoint
 */
export const useDataConnectorIntegrationsDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataConnectorIntegrationsDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof dataConnectorIntegrationsDelete>>,
        TError,
        {data: string[]},
        TContext
      > => {

      const mutationOptions = getDataConnectorIntegrationsDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create Many Endpoint
 */
export const dataConnectorIntegrationsBulkCreate = (
    dataConnectorIntegrationRecordCreateData: DataConnectorIntegrationRecordCreateData[],
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<DataConnectorIntegrationRecordReadData[]>(
      {url: `/api/data-connector/bulk`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dataConnectorIntegrationRecordCreateData, signal
    },
      );
    }
  


export const getDataConnectorIntegrationsBulkCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataConnectorIntegrationsBulkCreate>>, TError,{data: DataConnectorIntegrationRecordCreateData[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof dataConnectorIntegrationsBulkCreate>>, TError,{data: DataConnectorIntegrationRecordCreateData[]}, TContext> => {
    
const mutationKey = ['dataConnectorIntegrationsBulkCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dataConnectorIntegrationsBulkCreate>>, {data: DataConnectorIntegrationRecordCreateData[]}> = (props) => {
          const {data} = props ?? {};

          return  dataConnectorIntegrationsBulkCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DataConnectorIntegrationsBulkCreateMutationResult = NonNullable<Awaited<ReturnType<typeof dataConnectorIntegrationsBulkCreate>>>
    export type DataConnectorIntegrationsBulkCreateMutationBody = DataConnectorIntegrationRecordCreateData[]
    export type DataConnectorIntegrationsBulkCreateMutationError = HTTPValidationError

    /**
 * @summary Create Many Endpoint
 */
export const useDataConnectorIntegrationsBulkCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataConnectorIntegrationsBulkCreate>>, TError,{data: DataConnectorIntegrationRecordCreateData[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof dataConnectorIntegrationsBulkCreate>>,
        TError,
        {data: DataConnectorIntegrationRecordCreateData[]},
        TContext
      > => {

      const mutationOptions = getDataConnectorIntegrationsBulkCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Sync Integration Api
 */
export const dataConnectorIntegrationSync = (
    integrationId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/data-connector/integration/${integrationId}/sync`, method: 'POST', signal
    },
      );
    }
  


export const getDataConnectorIntegrationSyncMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataConnectorIntegrationSync>>, TError,{integrationId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof dataConnectorIntegrationSync>>, TError,{integrationId: string}, TContext> => {
    
const mutationKey = ['dataConnectorIntegrationSync'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dataConnectorIntegrationSync>>, {integrationId: string}> = (props) => {
          const {integrationId} = props ?? {};

          return  dataConnectorIntegrationSync(integrationId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DataConnectorIntegrationSyncMutationResult = NonNullable<Awaited<ReturnType<typeof dataConnectorIntegrationSync>>>
    
    export type DataConnectorIntegrationSyncMutationError = HTTPValidationError

    /**
 * @summary Sync Integration Api
 */
export const useDataConnectorIntegrationSync = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataConnectorIntegrationSync>>, TError,{integrationId: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof dataConnectorIntegrationSync>>,
        TError,
        {integrationId: string},
        TContext
      > => {

      const mutationOptions = getDataConnectorIntegrationSyncMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Integrations Api
 */
export const dataConnectorIntegrationsRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<DataConnectorIntegrationRecordReadData[]>(
      {url: `/api/data-connector/integrations`, method: 'GET', signal
    },
      );
    }
  

export const getDataConnectorIntegrationsRetrieveQueryKey = () => {
    return [`/api/data-connector/integrations`] as const;
    }

    
export const getDataConnectorIntegrationsRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDataConnectorIntegrationsRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>> = ({ signal }) => dataConnectorIntegrationsRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DataConnectorIntegrationsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>>
export type DataConnectorIntegrationsRetrieveQueryError = unknown


export function useDataConnectorIntegrationsRetrieve<TData = Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataConnectorIntegrationsRetrieve<TData = Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataConnectorIntegrationsRetrieve<TData = Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Integrations Api
 */

export function useDataConnectorIntegrationsRetrieve<TData = Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDataConnectorIntegrationsRetrieveQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getDataConnectorIntegrationsRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDataConnectorIntegrationsRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>> = ({ signal }) => dataConnectorIntegrationsRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DataConnectorIntegrationsRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>>
export type DataConnectorIntegrationsRetrieveSuspenseQueryError = unknown


export function useDataConnectorIntegrationsRetrieveSuspense<TData = Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataConnectorIntegrationsRetrieveSuspense<TData = Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataConnectorIntegrationsRetrieveSuspense<TData = Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Integrations Api
 */

export function useDataConnectorIntegrationsRetrieveSuspense<TData = Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDataConnectorIntegrationsRetrieveSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete Endpoint
 */
export const dataConnectorIntegrationDelete = (
    id: string,
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/data-connector/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDataConnectorIntegrationDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataConnectorIntegrationDelete>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof dataConnectorIntegrationDelete>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['dataConnectorIntegrationDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dataConnectorIntegrationDelete>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  dataConnectorIntegrationDelete(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DataConnectorIntegrationDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof dataConnectorIntegrationDelete>>>
    
    export type DataConnectorIntegrationDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Endpoint
 */
export const useDataConnectorIntegrationDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataConnectorIntegrationDelete>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof dataConnectorIntegrationDelete>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDataConnectorIntegrationDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Endpoint
 */
export const dataConnectorIntegrationRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<DataConnectorIntegrationRecordReadData>(
      {url: `/api/data-connector/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getDataConnectorIntegrationRetrieveQueryKey = (id: string,) => {
    return [`/api/data-connector/${id}`] as const;
    }

    
export const getDataConnectorIntegrationRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDataConnectorIntegrationRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>> = ({ signal }) => dataConnectorIntegrationRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DataConnectorIntegrationRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>>
export type DataConnectorIntegrationRetrieveQueryError = HTTPValidationError


export function useDataConnectorIntegrationRetrieve<TData = Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>,
          TError,
          Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataConnectorIntegrationRetrieve<TData = Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>,
          TError,
          Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataConnectorIntegrationRetrieve<TData = Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function useDataConnectorIntegrationRetrieve<TData = Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDataConnectorIntegrationRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getDataConnectorIntegrationRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDataConnectorIntegrationRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>> = ({ signal }) => dataConnectorIntegrationRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DataConnectorIntegrationRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>>
export type DataConnectorIntegrationRetrieveSuspenseQueryError = HTTPValidationError


export function useDataConnectorIntegrationRetrieveSuspense<TData = Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataConnectorIntegrationRetrieveSuspense<TData = Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataConnectorIntegrationRetrieveSuspense<TData = Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function useDataConnectorIntegrationRetrieveSuspense<TData = Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataConnectorIntegrationRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDataConnectorIntegrationRetrieveSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Endpoint
 */
export const dataConnectorIntegrationUpdate = (
    id: string,
    dataConnectorIntegrationRecordUpdateData: DataConnectorIntegrationRecordUpdateData,
 ) => {
      
      
      return axiosRequest<DataConnectorIntegrationRecordReadData>(
      {url: `/api/data-connector/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dataConnectorIntegrationRecordUpdateData
    },
      );
    }
  


export const getDataConnectorIntegrationUpdateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataConnectorIntegrationUpdate>>, TError,{id: string;data: DataConnectorIntegrationRecordUpdateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof dataConnectorIntegrationUpdate>>, TError,{id: string;data: DataConnectorIntegrationRecordUpdateData}, TContext> => {
    
const mutationKey = ['dataConnectorIntegrationUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dataConnectorIntegrationUpdate>>, {id: string;data: DataConnectorIntegrationRecordUpdateData}> = (props) => {
          const {id,data} = props ?? {};

          return  dataConnectorIntegrationUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DataConnectorIntegrationUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof dataConnectorIntegrationUpdate>>>
    export type DataConnectorIntegrationUpdateMutationBody = DataConnectorIntegrationRecordUpdateData
    export type DataConnectorIntegrationUpdateMutationError = HTTPValidationError

    /**
 * @summary Update Endpoint
 */
export const useDataConnectorIntegrationUpdate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataConnectorIntegrationUpdate>>, TError,{id: string;data: DataConnectorIntegrationRecordUpdateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof dataConnectorIntegrationUpdate>>,
        TError,
        {id: string;data: DataConnectorIntegrationRecordUpdateData},
        TContext
      > => {

      const mutationOptions = getDataConnectorIntegrationUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    