/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Rengo
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import { axiosRequest } from '../../shared/api/api';



/**
 * Simple health check endpoint.
Returns 200 OK if the server is running.
 * @summary Health Check
 */
export const healthCheckHealthElbGet = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<unknown>(
      {url: `/health/elb`, method: 'GET', signal
    },
      );
    }
  

export const getHealthCheckHealthElbGetQueryKey = () => {
    return [`/health/elb`] as const;
    }

    
export const getHealthCheckHealthElbGetQueryOptions = <TData = Awaited<ReturnType<typeof healthCheckHealthElbGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthElbGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckHealthElbGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheckHealthElbGet>>> = ({ signal }) => healthCheckHealthElbGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthElbGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthCheckHealthElbGetQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheckHealthElbGet>>>
export type HealthCheckHealthElbGetQueryError = unknown


export function useHealthCheckHealthElbGet<TData = Awaited<ReturnType<typeof healthCheckHealthElbGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthElbGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckHealthElbGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckHealthElbGet>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckHealthElbGet<TData = Awaited<ReturnType<typeof healthCheckHealthElbGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthElbGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckHealthElbGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckHealthElbGet>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckHealthElbGet<TData = Awaited<ReturnType<typeof healthCheckHealthElbGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthElbGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health Check
 */

export function useHealthCheckHealthElbGet<TData = Awaited<ReturnType<typeof healthCheckHealthElbGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthElbGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthCheckHealthElbGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getHealthCheckHealthElbGetSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof healthCheckHealthElbGet>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthElbGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckHealthElbGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheckHealthElbGet>>> = ({ signal }) => healthCheckHealthElbGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthElbGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthCheckHealthElbGetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheckHealthElbGet>>>
export type HealthCheckHealthElbGetSuspenseQueryError = unknown


export function useHealthCheckHealthElbGetSuspense<TData = Awaited<ReturnType<typeof healthCheckHealthElbGet>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthElbGet>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckHealthElbGetSuspense<TData = Awaited<ReturnType<typeof healthCheckHealthElbGet>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthElbGet>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckHealthElbGetSuspense<TData = Awaited<ReturnType<typeof healthCheckHealthElbGet>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthElbGet>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health Check
 */

export function useHealthCheckHealthElbGetSuspense<TData = Awaited<ReturnType<typeof healthCheckHealthElbGet>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthElbGet>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthCheckHealthElbGetSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



