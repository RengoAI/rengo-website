/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Rengo
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  ChatRequest
} from '../schemas/chatRequest'
import type {
  ChatResponse
} from '../schemas/chatResponse'
import type {
  HTTPValidationError
} from '../schemas/hTTPValidationError'
import { axiosRequest } from '../../shared/api/api';



/**
 * Chat with AI using AWS Bedrock models.

Supports multiple Bedrock models including Claude 3 variants and Titan.
Maintains conversation history for context-aware responses.
 * @summary Chat
 */
export const aiChat = (
    chatRequest: ChatRequest,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<ChatResponse>(
      {url: `/api/ai/chat`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: chatRequest, signal
    },
      );
    }
  


export const getAiChatMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof aiChat>>, TError,{data: ChatRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof aiChat>>, TError,{data: ChatRequest}, TContext> => {
    
const mutationKey = ['aiChat'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof aiChat>>, {data: ChatRequest}> = (props) => {
          const {data} = props ?? {};

          return  aiChat(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AiChatMutationResult = NonNullable<Awaited<ReturnType<typeof aiChat>>>
    export type AiChatMutationBody = ChatRequest
    export type AiChatMutationError = HTTPValidationError

    /**
 * @summary Chat
 */
export const useAiChat = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof aiChat>>, TError,{data: ChatRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof aiChat>>,
        TError,
        {data: ChatRequest},
        TContext
      > => {

      const mutationOptions = getAiChatMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Get list of available Bedrock models.
 * @summary Get Available Models
 */
export const aiModelsRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<string[]>(
      {url: `/api/ai/models`, method: 'GET', signal
    },
      );
    }
  

export const getAiModelsRetrieveQueryKey = () => {
    return [`/api/ai/models`] as const;
    }

    
export const getAiModelsRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof aiModelsRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof aiModelsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAiModelsRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof aiModelsRetrieve>>> = ({ signal }) => aiModelsRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof aiModelsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AiModelsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof aiModelsRetrieve>>>
export type AiModelsRetrieveQueryError = unknown


export function useAiModelsRetrieve<TData = Awaited<ReturnType<typeof aiModelsRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof aiModelsRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof aiModelsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof aiModelsRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAiModelsRetrieve<TData = Awaited<ReturnType<typeof aiModelsRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof aiModelsRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof aiModelsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof aiModelsRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAiModelsRetrieve<TData = Awaited<ReturnType<typeof aiModelsRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof aiModelsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Available Models
 */

export function useAiModelsRetrieve<TData = Awaited<ReturnType<typeof aiModelsRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof aiModelsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAiModelsRetrieveQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAiModelsRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof aiModelsRetrieve>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof aiModelsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAiModelsRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof aiModelsRetrieve>>> = ({ signal }) => aiModelsRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof aiModelsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AiModelsRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof aiModelsRetrieve>>>
export type AiModelsRetrieveSuspenseQueryError = unknown


export function useAiModelsRetrieveSuspense<TData = Awaited<ReturnType<typeof aiModelsRetrieve>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof aiModelsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAiModelsRetrieveSuspense<TData = Awaited<ReturnType<typeof aiModelsRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof aiModelsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAiModelsRetrieveSuspense<TData = Awaited<ReturnType<typeof aiModelsRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof aiModelsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Available Models
 */

export function useAiModelsRetrieveSuspense<TData = Awaited<ReturnType<typeof aiModelsRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof aiModelsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAiModelsRetrieveSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



