/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Rengo
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  HTTPValidationError
} from '../schemas/hTTPValidationError'
import type {
  TableData
} from '../schemas/tableData'
import type {
  TenantRecordCreateData
} from '../schemas/tenantRecordCreateData'
import type {
  TenantRecordReadData
} from '../schemas/tenantRecordReadData'
import type {
  TenantRecordUpdateData
} from '../schemas/tenantRecordUpdateData'
import { axiosRequest } from '../../shared/api/api';



/**
 * @summary Create Tenant Api
 */
export const tenantCreate = (
    tenantRecordCreateData: TenantRecordCreateData,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<TenantRecordReadData>(
      {url: `/api/tenants/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tenantRecordCreateData, signal
    },
      );
    }
  


export const getTenantCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tenantCreate>>, TError,{data: TenantRecordCreateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof tenantCreate>>, TError,{data: TenantRecordCreateData}, TContext> => {
    
const mutationKey = ['tenantCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tenantCreate>>, {data: TenantRecordCreateData}> = (props) => {
          const {data} = props ?? {};

          return  tenantCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TenantCreateMutationResult = NonNullable<Awaited<ReturnType<typeof tenantCreate>>>
    export type TenantCreateMutationBody = TenantRecordCreateData
    export type TenantCreateMutationError = HTTPValidationError

    /**
 * @summary Create Tenant Api
 */
export const useTenantCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tenantCreate>>, TError,{data: TenantRecordCreateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof tenantCreate>>,
        TError,
        {data: TenantRecordCreateData},
        TContext
      > => {

      const mutationOptions = getTenantCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Current Tenant Api
 */
export const currentTenantRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<TenantRecordReadData>(
      {url: `/api/tenants/current`, method: 'GET', signal
    },
      );
    }
  

export const getCurrentTenantRetrieveQueryKey = () => {
    return [`/api/tenants/current`] as const;
    }

    
export const getCurrentTenantRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof currentTenantRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof currentTenantRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCurrentTenantRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof currentTenantRetrieve>>> = ({ signal }) => currentTenantRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof currentTenantRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CurrentTenantRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof currentTenantRetrieve>>>
export type CurrentTenantRetrieveQueryError = unknown


export function useCurrentTenantRetrieve<TData = Awaited<ReturnType<typeof currentTenantRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof currentTenantRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof currentTenantRetrieve>>,
          TError,
          Awaited<ReturnType<typeof currentTenantRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCurrentTenantRetrieve<TData = Awaited<ReturnType<typeof currentTenantRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof currentTenantRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof currentTenantRetrieve>>,
          TError,
          Awaited<ReturnType<typeof currentTenantRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCurrentTenantRetrieve<TData = Awaited<ReturnType<typeof currentTenantRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof currentTenantRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Current Tenant Api
 */

export function useCurrentTenantRetrieve<TData = Awaited<ReturnType<typeof currentTenantRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof currentTenantRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCurrentTenantRetrieveQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getCurrentTenantRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof currentTenantRetrieve>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof currentTenantRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCurrentTenantRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof currentTenantRetrieve>>> = ({ signal }) => currentTenantRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof currentTenantRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CurrentTenantRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof currentTenantRetrieve>>>
export type CurrentTenantRetrieveSuspenseQueryError = unknown


export function useCurrentTenantRetrieveSuspense<TData = Awaited<ReturnType<typeof currentTenantRetrieve>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof currentTenantRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCurrentTenantRetrieveSuspense<TData = Awaited<ReturnType<typeof currentTenantRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof currentTenantRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCurrentTenantRetrieveSuspense<TData = Awaited<ReturnType<typeof currentTenantRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof currentTenantRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Current Tenant Api
 */

export function useCurrentTenantRetrieveSuspense<TData = Awaited<ReturnType<typeof currentTenantRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof currentTenantRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCurrentTenantRetrieveSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Tenants Table Data Api
 */
export const tenantsTableDataRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<TableData>(
      {url: `/api/tenants/tenant-table-data`, method: 'GET', signal
    },
      );
    }
  

export const getTenantsTableDataRetrieveQueryKey = () => {
    return [`/api/tenants/tenant-table-data`] as const;
    }

    
export const getTenantsTableDataRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof tenantsTableDataRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tenantsTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTenantsTableDataRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof tenantsTableDataRetrieve>>> = ({ signal }) => tenantsTableDataRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof tenantsTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TenantsTableDataRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof tenantsTableDataRetrieve>>>
export type TenantsTableDataRetrieveQueryError = unknown


export function useTenantsTableDataRetrieve<TData = Awaited<ReturnType<typeof tenantsTableDataRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof tenantsTableDataRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tenantsTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof tenantsTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTenantsTableDataRetrieve<TData = Awaited<ReturnType<typeof tenantsTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tenantsTableDataRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tenantsTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof tenantsTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTenantsTableDataRetrieve<TData = Awaited<ReturnType<typeof tenantsTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tenantsTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Tenants Table Data Api
 */

export function useTenantsTableDataRetrieve<TData = Awaited<ReturnType<typeof tenantsTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tenantsTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTenantsTableDataRetrieveQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getTenantsTableDataRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof tenantsTableDataRetrieve>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tenantsTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTenantsTableDataRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof tenantsTableDataRetrieve>>> = ({ signal }) => tenantsTableDataRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof tenantsTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TenantsTableDataRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof tenantsTableDataRetrieve>>>
export type TenantsTableDataRetrieveSuspenseQueryError = unknown


export function useTenantsTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof tenantsTableDataRetrieve>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tenantsTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTenantsTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof tenantsTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tenantsTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTenantsTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof tenantsTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tenantsTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Tenants Table Data Api
 */

export function useTenantsTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof tenantsTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tenantsTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTenantsTableDataRetrieveSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Tenant Api
 */
export const tenantRetrieve = (
    tenantId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<TenantRecordReadData>(
      {url: `/api/tenants/tenant/${tenantId}`, method: 'GET', signal
    },
      );
    }
  

export const getTenantRetrieveQueryKey = (tenantId: string,) => {
    return [`/api/tenants/tenant/${tenantId}`] as const;
    }

    
export const getTenantRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof tenantRetrieve>>, TError = HTTPValidationError>(tenantId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tenantRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTenantRetrieveQueryKey(tenantId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof tenantRetrieve>>> = ({ signal }) => tenantRetrieve(tenantId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(tenantId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof tenantRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TenantRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof tenantRetrieve>>>
export type TenantRetrieveQueryError = HTTPValidationError


export function useTenantRetrieve<TData = Awaited<ReturnType<typeof tenantRetrieve>>, TError = HTTPValidationError>(
 tenantId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof tenantRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tenantRetrieve>>,
          TError,
          Awaited<ReturnType<typeof tenantRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTenantRetrieve<TData = Awaited<ReturnType<typeof tenantRetrieve>>, TError = HTTPValidationError>(
 tenantId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tenantRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tenantRetrieve>>,
          TError,
          Awaited<ReturnType<typeof tenantRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTenantRetrieve<TData = Awaited<ReturnType<typeof tenantRetrieve>>, TError = HTTPValidationError>(
 tenantId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tenantRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Tenant Api
 */

export function useTenantRetrieve<TData = Awaited<ReturnType<typeof tenantRetrieve>>, TError = HTTPValidationError>(
 tenantId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tenantRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTenantRetrieveQueryOptions(tenantId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getTenantRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof tenantRetrieve>>, TError = HTTPValidationError>(tenantId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tenantRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTenantRetrieveQueryKey(tenantId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof tenantRetrieve>>> = ({ signal }) => tenantRetrieve(tenantId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof tenantRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TenantRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof tenantRetrieve>>>
export type TenantRetrieveSuspenseQueryError = HTTPValidationError


export function useTenantRetrieveSuspense<TData = Awaited<ReturnType<typeof tenantRetrieve>>, TError = HTTPValidationError>(
 tenantId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tenantRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTenantRetrieveSuspense<TData = Awaited<ReturnType<typeof tenantRetrieve>>, TError = HTTPValidationError>(
 tenantId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tenantRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTenantRetrieveSuspense<TData = Awaited<ReturnType<typeof tenantRetrieve>>, TError = HTTPValidationError>(
 tenantId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tenantRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Tenant Api
 */

export function useTenantRetrieveSuspense<TData = Awaited<ReturnType<typeof tenantRetrieve>>, TError = HTTPValidationError>(
 tenantId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tenantRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTenantRetrieveSuspenseQueryOptions(tenantId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Tenant Api
 */
export const tenantUpdate = (
    tenantId: string,
    tenantRecordUpdateData: TenantRecordUpdateData,
 ) => {
      
      
      return axiosRequest<TenantRecordReadData>(
      {url: `/api/tenants/tenant/${tenantId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: tenantRecordUpdateData
    },
      );
    }
  


export const getTenantUpdateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tenantUpdate>>, TError,{tenantId: string;data: TenantRecordUpdateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof tenantUpdate>>, TError,{tenantId: string;data: TenantRecordUpdateData}, TContext> => {
    
const mutationKey = ['tenantUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tenantUpdate>>, {tenantId: string;data: TenantRecordUpdateData}> = (props) => {
          const {tenantId,data} = props ?? {};

          return  tenantUpdate(tenantId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TenantUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof tenantUpdate>>>
    export type TenantUpdateMutationBody = TenantRecordUpdateData
    export type TenantUpdateMutationError = HTTPValidationError

    /**
 * @summary Update Tenant Api
 */
export const useTenantUpdate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tenantUpdate>>, TError,{tenantId: string;data: TenantRecordUpdateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof tenantUpdate>>,
        TError,
        {tenantId: string;data: TenantRecordUpdateData},
        TContext
      > => {

      const mutationOptions = getTenantUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Tenant Users Table Data Api
 */
export const tenantUsersTableDataRetrieve = (
    tenantId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<TableData>(
      {url: `/api/tenants/tenant/${tenantId}/user-table-data`, method: 'GET', signal
    },
      );
    }
  

export const getTenantUsersTableDataRetrieveQueryKey = (tenantId: string,) => {
    return [`/api/tenants/tenant/${tenantId}/user-table-data`] as const;
    }

    
export const getTenantUsersTableDataRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>, TError = HTTPValidationError>(tenantId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTenantUsersTableDataRetrieveQueryKey(tenantId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>> = ({ signal }) => tenantUsersTableDataRetrieve(tenantId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(tenantId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TenantUsersTableDataRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>>
export type TenantUsersTableDataRetrieveQueryError = HTTPValidationError


export function useTenantUsersTableDataRetrieve<TData = Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>, TError = HTTPValidationError>(
 tenantId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTenantUsersTableDataRetrieve<TData = Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>, TError = HTTPValidationError>(
 tenantId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTenantUsersTableDataRetrieve<TData = Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>, TError = HTTPValidationError>(
 tenantId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Tenant Users Table Data Api
 */

export function useTenantUsersTableDataRetrieve<TData = Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>, TError = HTTPValidationError>(
 tenantId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTenantUsersTableDataRetrieveQueryOptions(tenantId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getTenantUsersTableDataRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>, TError = HTTPValidationError>(tenantId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTenantUsersTableDataRetrieveQueryKey(tenantId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>> = ({ signal }) => tenantUsersTableDataRetrieve(tenantId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TenantUsersTableDataRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>>
export type TenantUsersTableDataRetrieveSuspenseQueryError = HTTPValidationError


export function useTenantUsersTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>, TError = HTTPValidationError>(
 tenantId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTenantUsersTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>, TError = HTTPValidationError>(
 tenantId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTenantUsersTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>, TError = HTTPValidationError>(
 tenantId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Tenant Users Table Data Api
 */

export function useTenantUsersTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>, TError = HTTPValidationError>(
 tenantId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tenantUsersTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTenantUsersTableDataRetrieveSuspenseQueryOptions(tenantId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



