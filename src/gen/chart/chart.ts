/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Rengo
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  HTTPValidationError
} from '../schemas/hTTPValidationError'
import type {
  TableInfo
} from '../schemas/tableInfo'
import { axiosRequest } from '../../shared/api/api';



/**
 * @summary Get Table Columns
 */
export const tableColumnsRetrieve = (
    tableName: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<TableInfo>(
      {url: `/api/chart/table/${tableName}/columns`, method: 'GET', signal
    },
      );
    }
  

export const getTableColumnsRetrieveQueryKey = (tableName: string,) => {
    return [`/api/chart/table/${tableName}/columns`] as const;
    }

    
export const getTableColumnsRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof tableColumnsRetrieve>>, TError = HTTPValidationError>(tableName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tableColumnsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTableColumnsRetrieveQueryKey(tableName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof tableColumnsRetrieve>>> = ({ signal }) => tableColumnsRetrieve(tableName, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(tableName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof tableColumnsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TableColumnsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof tableColumnsRetrieve>>>
export type TableColumnsRetrieveQueryError = HTTPValidationError


export function useTableColumnsRetrieve<TData = Awaited<ReturnType<typeof tableColumnsRetrieve>>, TError = HTTPValidationError>(
 tableName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof tableColumnsRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tableColumnsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof tableColumnsRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTableColumnsRetrieve<TData = Awaited<ReturnType<typeof tableColumnsRetrieve>>, TError = HTTPValidationError>(
 tableName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tableColumnsRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tableColumnsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof tableColumnsRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTableColumnsRetrieve<TData = Awaited<ReturnType<typeof tableColumnsRetrieve>>, TError = HTTPValidationError>(
 tableName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tableColumnsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Table Columns
 */

export function useTableColumnsRetrieve<TData = Awaited<ReturnType<typeof tableColumnsRetrieve>>, TError = HTTPValidationError>(
 tableName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tableColumnsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTableColumnsRetrieveQueryOptions(tableName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getTableColumnsRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof tableColumnsRetrieve>>, TError = HTTPValidationError>(tableName: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tableColumnsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTableColumnsRetrieveQueryKey(tableName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof tableColumnsRetrieve>>> = ({ signal }) => tableColumnsRetrieve(tableName, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof tableColumnsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TableColumnsRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof tableColumnsRetrieve>>>
export type TableColumnsRetrieveSuspenseQueryError = HTTPValidationError


export function useTableColumnsRetrieveSuspense<TData = Awaited<ReturnType<typeof tableColumnsRetrieve>>, TError = HTTPValidationError>(
 tableName: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tableColumnsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTableColumnsRetrieveSuspense<TData = Awaited<ReturnType<typeof tableColumnsRetrieve>>, TError = HTTPValidationError>(
 tableName: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tableColumnsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTableColumnsRetrieveSuspense<TData = Awaited<ReturnType<typeof tableColumnsRetrieve>>, TError = HTTPValidationError>(
 tableName: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tableColumnsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Table Columns
 */

export function useTableColumnsRetrieveSuspense<TData = Awaited<ReturnType<typeof tableColumnsRetrieve>>, TError = HTTPValidationError>(
 tableName: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tableColumnsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTableColumnsRetrieveSuspenseQueryOptions(tableName,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary List Tables
 */
export const tablesRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<TableInfo[]>(
      {url: `/api/chart/tables`, method: 'GET', signal
    },
      );
    }
  

export const getTablesRetrieveQueryKey = () => {
    return [`/api/chart/tables`] as const;
    }

    
export const getTablesRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof tablesRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tablesRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTablesRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof tablesRetrieve>>> = ({ signal }) => tablesRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof tablesRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TablesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof tablesRetrieve>>>
export type TablesRetrieveQueryError = unknown


export function useTablesRetrieve<TData = Awaited<ReturnType<typeof tablesRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof tablesRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tablesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof tablesRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTablesRetrieve<TData = Awaited<ReturnType<typeof tablesRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tablesRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tablesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof tablesRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTablesRetrieve<TData = Awaited<ReturnType<typeof tablesRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tablesRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Tables
 */

export function useTablesRetrieve<TData = Awaited<ReturnType<typeof tablesRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tablesRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTablesRetrieveQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getTablesRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof tablesRetrieve>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tablesRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTablesRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof tablesRetrieve>>> = ({ signal }) => tablesRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof tablesRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TablesRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof tablesRetrieve>>>
export type TablesRetrieveSuspenseQueryError = unknown


export function useTablesRetrieveSuspense<TData = Awaited<ReturnType<typeof tablesRetrieve>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tablesRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTablesRetrieveSuspense<TData = Awaited<ReturnType<typeof tablesRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tablesRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTablesRetrieveSuspense<TData = Awaited<ReturnType<typeof tablesRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tablesRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Tables
 */

export function useTablesRetrieveSuspense<TData = Awaited<ReturnType<typeof tablesRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof tablesRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTablesRetrieveSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



