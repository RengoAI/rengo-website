/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Rengo
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  AuthResponseData
} from '../schemas/authResponseData'
import type {
  BasicAuthRequestData
} from '../schemas/basicAuthRequestData'
import type {
  HTTPValidationError
} from '../schemas/hTTPValidationError'
import type {
  PingResponseData
} from '../schemas/pingResponseData'
import type {
  RefreshBasicAuthParams
} from '../schemas/refreshBasicAuthParams'
import type {
  StytchAuthenticateAuthRequestData
} from '../schemas/stytchAuthenticateAuthRequestData'
import { axiosRequest } from '../../shared/api/api';



/**
 * @summary Refresh Basic Auth
 */
export const refreshBasicAuth = (
    params: RefreshBasicAuthParams,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<AuthResponseData>(
      {url: `/api/auth/basic/refresh`, method: 'POST',
        params, signal
    },
      );
    }
  


export const getRefreshBasicAuthMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof refreshBasicAuth>>, TError,{params: RefreshBasicAuthParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof refreshBasicAuth>>, TError,{params: RefreshBasicAuthParams}, TContext> => {
    
const mutationKey = ['refreshBasicAuth'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof refreshBasicAuth>>, {params: RefreshBasicAuthParams}> = (props) => {
          const {params} = props ?? {};

          return  refreshBasicAuth(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RefreshBasicAuthMutationResult = NonNullable<Awaited<ReturnType<typeof refreshBasicAuth>>>
    
    export type RefreshBasicAuthMutationError = HTTPValidationError

    /**
 * @summary Refresh Basic Auth
 */
export const useRefreshBasicAuth = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof refreshBasicAuth>>, TError,{params: RefreshBasicAuthParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof refreshBasicAuth>>,
        TError,
        {params: RefreshBasicAuthParams},
        TContext
      > => {

      const mutationOptions = getRefreshBasicAuthMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Request Basic Auth
 */
export const requestBasicAuth = (
    basicAuthRequestData: BasicAuthRequestData,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<AuthResponseData>(
      {url: `/api/auth/basic/request`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: basicAuthRequestData, signal
    },
      );
    }
  


export const getRequestBasicAuthMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof requestBasicAuth>>, TError,{data: BasicAuthRequestData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof requestBasicAuth>>, TError,{data: BasicAuthRequestData}, TContext> => {
    
const mutationKey = ['requestBasicAuth'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof requestBasicAuth>>, {data: BasicAuthRequestData}> = (props) => {
          const {data} = props ?? {};

          return  requestBasicAuth(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RequestBasicAuthMutationResult = NonNullable<Awaited<ReturnType<typeof requestBasicAuth>>>
    export type RequestBasicAuthMutationBody = BasicAuthRequestData
    export type RequestBasicAuthMutationError = HTTPValidationError

    /**
 * @summary Request Basic Auth
 */
export const useRequestBasicAuth = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof requestBasicAuth>>, TError,{data: BasicAuthRequestData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof requestBasicAuth>>,
        TError,
        {data: BasicAuthRequestData},
        TContext
      > => {

      const mutationOptions = getRequestBasicAuthMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Ping
 */
export const ping = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PingResponseData>(
      {url: `/api/auth/ping`, method: 'GET', signal
    },
      );
    }
  

export const getPingQueryKey = () => {
    return [`/api/auth/ping`] as const;
    }

    
export const getPingQueryOptions = <TData = Awaited<ReturnType<typeof ping>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ping>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPingQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof ping>>> = ({ signal }) => ping(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof ping>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PingQueryResult = NonNullable<Awaited<ReturnType<typeof ping>>>
export type PingQueryError = unknown


export function usePing<TData = Awaited<ReturnType<typeof ping>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof ping>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ping>>,
          TError,
          Awaited<ReturnType<typeof ping>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePing<TData = Awaited<ReturnType<typeof ping>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ping>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ping>>,
          TError,
          Awaited<ReturnType<typeof ping>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePing<TData = Awaited<ReturnType<typeof ping>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ping>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Ping
 */

export function usePing<TData = Awaited<ReturnType<typeof ping>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ping>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPingQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPingSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof ping>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof ping>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPingQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof ping>>> = ({ signal }) => ping(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof ping>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PingSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof ping>>>
export type PingSuspenseQueryError = unknown


export function usePingSuspense<TData = Awaited<ReturnType<typeof ping>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof ping>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePingSuspense<TData = Awaited<ReturnType<typeof ping>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof ping>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePingSuspense<TData = Awaited<ReturnType<typeof ping>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof ping>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Ping
 */

export function usePingSuspense<TData = Awaited<ReturnType<typeof ping>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof ping>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPingSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Stytch Discovery Authenticate
 */
export const stytchSessionAuthenticate = (
    stytchAuthenticateAuthRequestData: StytchAuthenticateAuthRequestData,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<AuthResponseData>(
      {url: `/api/auth/stytch/session`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: stytchAuthenticateAuthRequestData, signal
    },
      );
    }
  


export const getStytchSessionAuthenticateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stytchSessionAuthenticate>>, TError,{data: StytchAuthenticateAuthRequestData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof stytchSessionAuthenticate>>, TError,{data: StytchAuthenticateAuthRequestData}, TContext> => {
    
const mutationKey = ['stytchSessionAuthenticate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof stytchSessionAuthenticate>>, {data: StytchAuthenticateAuthRequestData}> = (props) => {
          const {data} = props ?? {};

          return  stytchSessionAuthenticate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type StytchSessionAuthenticateMutationResult = NonNullable<Awaited<ReturnType<typeof stytchSessionAuthenticate>>>
    export type StytchSessionAuthenticateMutationBody = StytchAuthenticateAuthRequestData
    export type StytchSessionAuthenticateMutationError = HTTPValidationError

    /**
 * @summary Stytch Discovery Authenticate
 */
export const useStytchSessionAuthenticate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stytchSessionAuthenticate>>, TError,{data: StytchAuthenticateAuthRequestData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof stytchSessionAuthenticate>>,
        TError,
        {data: StytchAuthenticateAuthRequestData},
        TContext
      > => {

      const mutationOptions = getStytchSessionAuthenticateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    