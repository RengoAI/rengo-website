/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Rengo
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  DataStoreFieldEventCreateData
} from '../schemas/dataStoreFieldEventCreateData'
import type {
  DataStoreFieldEventReadData
} from '../schemas/dataStoreFieldEventReadData'
import type {
  DataStoreRecordCreateData
} from '../schemas/dataStoreRecordCreateData'
import type {
  DataStoreRecordReadData
} from '../schemas/dataStoreRecordReadData'
import type {
  DataStoreRecordRecordReadData
} from '../schemas/dataStoreRecordRecordReadData'
import type {
  DataStoreRecordUpdateData
} from '../schemas/dataStoreRecordUpdateData'
import type {
  DataStoreTableRecordCreateData
} from '../schemas/dataStoreTableRecordCreateData'
import type {
  DataStoreTableRecordReadData
} from '../schemas/dataStoreTableRecordReadData'
import type {
  DataStoreTableRecordUpdateData
} from '../schemas/dataStoreTableRecordUpdateData'
import type {
  DataStoreTableSchemaReadData
} from '../schemas/dataStoreTableSchemaReadData'
import type {
  DataStoreTableSearchData
} from '../schemas/dataStoreTableSearchData'
import type {
  DataStoreTableSearchResult
} from '../schemas/dataStoreTableSearchResult'
import type {
  DataStoreTableTableDataRetrieveParams
} from '../schemas/dataStoreTableTableDataRetrieveParams'
import type {
  HTTPValidationError
} from '../schemas/hTTPValidationError'
import type {
  TableData
} from '../schemas/tableData'
import { axiosRequest } from '../../shared/api/api';



/**
 * @summary Create Data Store Field Api
 */
export const dataStoreFieldCreate = (
    dataStoreFieldEventCreateData: DataStoreFieldEventCreateData,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<DataStoreFieldEventReadData>(
      {url: `/api/data-store/schema/field`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dataStoreFieldEventCreateData, signal
    },
      );
    }
  


export const getDataStoreFieldCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataStoreFieldCreate>>, TError,{data: DataStoreFieldEventCreateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof dataStoreFieldCreate>>, TError,{data: DataStoreFieldEventCreateData}, TContext> => {
    
const mutationKey = ['dataStoreFieldCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dataStoreFieldCreate>>, {data: DataStoreFieldEventCreateData}> = (props) => {
          const {data} = props ?? {};

          return  dataStoreFieldCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DataStoreFieldCreateMutationResult = NonNullable<Awaited<ReturnType<typeof dataStoreFieldCreate>>>
    export type DataStoreFieldCreateMutationBody = DataStoreFieldEventCreateData
    export type DataStoreFieldCreateMutationError = HTTPValidationError

    /**
 * @summary Create Data Store Field Api
 */
export const useDataStoreFieldCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataStoreFieldCreate>>, TError,{data: DataStoreFieldEventCreateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof dataStoreFieldCreate>>,
        TError,
        {data: DataStoreFieldEventCreateData},
        TContext
      > => {

      const mutationOptions = getDataStoreFieldCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Search Data Store Api
 */
export const dataStoreSearch = (
    dataStoreTableSearchData: DataStoreTableSearchData,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<DataStoreTableSearchResult>(
      {url: `/api/data-store/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dataStoreTableSearchData, signal
    },
      );
    }
  


export const getDataStoreSearchMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataStoreSearch>>, TError,{data: DataStoreTableSearchData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof dataStoreSearch>>, TError,{data: DataStoreTableSearchData}, TContext> => {
    
const mutationKey = ['dataStoreSearch'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dataStoreSearch>>, {data: DataStoreTableSearchData}> = (props) => {
          const {data} = props ?? {};

          return  dataStoreSearch(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DataStoreSearchMutationResult = NonNullable<Awaited<ReturnType<typeof dataStoreSearch>>>
    export type DataStoreSearchMutationBody = DataStoreTableSearchData
    export type DataStoreSearchMutationError = HTTPValidationError

    /**
 * @summary Search Data Store Api
 */
export const useDataStoreSearch = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataStoreSearch>>, TError,{data: DataStoreTableSearchData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof dataStoreSearch>>,
        TError,
        {data: DataStoreTableSearchData},
        TContext
      > => {

      const mutationOptions = getDataStoreSearchMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary List Data Store Tables Api
 */
export const dataStoreTablesList = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<DataStoreTableRecordReadData[]>(
      {url: `/api/data-store/table`, method: 'GET', signal
    },
      );
    }
  

export const getDataStoreTablesListQueryKey = () => {
    return [`/api/data-store/table`] as const;
    }

    
export const getDataStoreTablesListQueryOptions = <TData = Awaited<ReturnType<typeof dataStoreTablesList>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDataStoreTablesListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dataStoreTablesList>>> = ({ signal }) => dataStoreTablesList(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DataStoreTablesListQueryResult = NonNullable<Awaited<ReturnType<typeof dataStoreTablesList>>>
export type DataStoreTablesListQueryError = unknown


export function useDataStoreTablesList<TData = Awaited<ReturnType<typeof dataStoreTablesList>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dataStoreTablesList>>,
          TError,
          Awaited<ReturnType<typeof dataStoreTablesList>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTablesList<TData = Awaited<ReturnType<typeof dataStoreTablesList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dataStoreTablesList>>,
          TError,
          Awaited<ReturnType<typeof dataStoreTablesList>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTablesList<TData = Awaited<ReturnType<typeof dataStoreTablesList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesList>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Data Store Tables Api
 */

export function useDataStoreTablesList<TData = Awaited<ReturnType<typeof dataStoreTablesList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesList>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDataStoreTablesListQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getDataStoreTablesListSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof dataStoreTablesList>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDataStoreTablesListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dataStoreTablesList>>> = ({ signal }) => dataStoreTablesList(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DataStoreTablesListSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof dataStoreTablesList>>>
export type DataStoreTablesListSuspenseQueryError = unknown


export function useDataStoreTablesListSuspense<TData = Awaited<ReturnType<typeof dataStoreTablesList>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTablesListSuspense<TData = Awaited<ReturnType<typeof dataStoreTablesList>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTablesListSuspense<TData = Awaited<ReturnType<typeof dataStoreTablesList>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Data Store Tables Api
 */

export function useDataStoreTablesListSuspense<TData = Awaited<ReturnType<typeof dataStoreTablesList>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDataStoreTablesListSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new data store table.
 * @summary Create Data Store Table Api
 */
export const dataStoreTableCreate = (
    dataStoreTableRecordCreateData: DataStoreTableRecordCreateData,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<DataStoreTableRecordReadData>(
      {url: `/api/data-store/table`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dataStoreTableRecordCreateData, signal
    },
      );
    }
  


export const getDataStoreTableCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataStoreTableCreate>>, TError,{data: DataStoreTableRecordCreateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof dataStoreTableCreate>>, TError,{data: DataStoreTableRecordCreateData}, TContext> => {
    
const mutationKey = ['dataStoreTableCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dataStoreTableCreate>>, {data: DataStoreTableRecordCreateData}> = (props) => {
          const {data} = props ?? {};

          return  dataStoreTableCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DataStoreTableCreateMutationResult = NonNullable<Awaited<ReturnType<typeof dataStoreTableCreate>>>
    export type DataStoreTableCreateMutationBody = DataStoreTableRecordCreateData
    export type DataStoreTableCreateMutationError = HTTPValidationError

    /**
 * @summary Create Data Store Table Api
 */
export const useDataStoreTableCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataStoreTableCreate>>, TError,{data: DataStoreTableRecordCreateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof dataStoreTableCreate>>,
        TError,
        {data: DataStoreTableRecordCreateData},
        TContext
      > => {

      const mutationOptions = getDataStoreTableCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Update an existing data store table.
 * @summary Update Data Store Table Api
 */
export const dataStoreTableUpdate = (
    dataStoreTableId: string,
    dataStoreTableRecordUpdateData: DataStoreTableRecordUpdateData,
 ) => {
      
      
      return axiosRequest<DataStoreTableRecordReadData>(
      {url: `/api/data-store/table/${dataStoreTableId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dataStoreTableRecordUpdateData
    },
      );
    }
  


export const getDataStoreTableUpdateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataStoreTableUpdate>>, TError,{dataStoreTableId: string;data: DataStoreTableRecordUpdateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof dataStoreTableUpdate>>, TError,{dataStoreTableId: string;data: DataStoreTableRecordUpdateData}, TContext> => {
    
const mutationKey = ['dataStoreTableUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dataStoreTableUpdate>>, {dataStoreTableId: string;data: DataStoreTableRecordUpdateData}> = (props) => {
          const {dataStoreTableId,data} = props ?? {};

          return  dataStoreTableUpdate(dataStoreTableId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DataStoreTableUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof dataStoreTableUpdate>>>
    export type DataStoreTableUpdateMutationBody = DataStoreTableRecordUpdateData
    export type DataStoreTableUpdateMutationError = HTTPValidationError

    /**
 * @summary Update Data Store Table Api
 */
export const useDataStoreTableUpdate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataStoreTableUpdate>>, TError,{dataStoreTableId: string;data: DataStoreTableRecordUpdateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof dataStoreTableUpdate>>,
        TError,
        {dataStoreTableId: string;data: DataStoreTableRecordUpdateData},
        TContext
      > => {

      const mutationOptions = getDataStoreTableUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Data Store Table Api
 */
export const dataStoreTableRetrieve = (
    dataStoreTableId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<DataStoreTableRecordReadData>(
      {url: `/api/data-store/table/${dataStoreTableId}/`, method: 'GET', signal
    },
      );
    }
  

export const getDataStoreTableRetrieveQueryKey = (dataStoreTableId: string,) => {
    return [`/api/data-store/table/${dataStoreTableId}/`] as const;
    }

    
export const getDataStoreTableRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof dataStoreTableRetrieve>>, TError = HTTPValidationError>(dataStoreTableId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDataStoreTableRetrieveQueryKey(dataStoreTableId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dataStoreTableRetrieve>>> = ({ signal }) => dataStoreTableRetrieve(dataStoreTableId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(dataStoreTableId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DataStoreTableRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof dataStoreTableRetrieve>>>
export type DataStoreTableRetrieveQueryError = HTTPValidationError


export function useDataStoreTableRetrieve<TData = Awaited<ReturnType<typeof dataStoreTableRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dataStoreTableRetrieve>>,
          TError,
          Awaited<ReturnType<typeof dataStoreTableRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTableRetrieve<TData = Awaited<ReturnType<typeof dataStoreTableRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dataStoreTableRetrieve>>,
          TError,
          Awaited<ReturnType<typeof dataStoreTableRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTableRetrieve<TData = Awaited<ReturnType<typeof dataStoreTableRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Data Store Table Api
 */

export function useDataStoreTableRetrieve<TData = Awaited<ReturnType<typeof dataStoreTableRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDataStoreTableRetrieveQueryOptions(dataStoreTableId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getDataStoreTableRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof dataStoreTableRetrieve>>, TError = HTTPValidationError>(dataStoreTableId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDataStoreTableRetrieveQueryKey(dataStoreTableId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dataStoreTableRetrieve>>> = ({ signal }) => dataStoreTableRetrieve(dataStoreTableId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DataStoreTableRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof dataStoreTableRetrieve>>>
export type DataStoreTableRetrieveSuspenseQueryError = HTTPValidationError


export function useDataStoreTableRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreTableRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTableRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreTableRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTableRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreTableRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Data Store Table Api
 */

export function useDataStoreTableRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreTableRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDataStoreTableRetrieveSuspenseQueryOptions(dataStoreTableId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Data Store Record Api
 */
export const dataStoreRecordCreate = (
    dataStoreTableId: string,
    dataStoreRecordCreateData: DataStoreRecordCreateData,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<DataStoreRecordRecordReadData>(
      {url: `/api/data-store/table/${dataStoreTableId}/record/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dataStoreRecordCreateData, signal
    },
      );
    }
  


export const getDataStoreRecordCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataStoreRecordCreate>>, TError,{dataStoreTableId: string;data: DataStoreRecordCreateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof dataStoreRecordCreate>>, TError,{dataStoreTableId: string;data: DataStoreRecordCreateData}, TContext> => {
    
const mutationKey = ['dataStoreRecordCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dataStoreRecordCreate>>, {dataStoreTableId: string;data: DataStoreRecordCreateData}> = (props) => {
          const {dataStoreTableId,data} = props ?? {};

          return  dataStoreRecordCreate(dataStoreTableId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DataStoreRecordCreateMutationResult = NonNullable<Awaited<ReturnType<typeof dataStoreRecordCreate>>>
    export type DataStoreRecordCreateMutationBody = DataStoreRecordCreateData
    export type DataStoreRecordCreateMutationError = HTTPValidationError

    /**
 * @summary Create Data Store Record Api
 */
export const useDataStoreRecordCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataStoreRecordCreate>>, TError,{dataStoreTableId: string;data: DataStoreRecordCreateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof dataStoreRecordCreate>>,
        TError,
        {dataStoreTableId: string;data: DataStoreRecordCreateData},
        TContext
      > => {

      const mutationOptions = getDataStoreRecordCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Bulk Create Data Store Records Api
 */
export const dataStoreRecordsBulkCreate = (
    dataStoreTableId: string,
    dataStoreRecordCreateData: DataStoreRecordCreateData[],
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<DataStoreRecordRecordReadData[]>(
      {url: `/api/data-store/table/${dataStoreTableId}/record/bulk`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dataStoreRecordCreateData, signal
    },
      );
    }
  


export const getDataStoreRecordsBulkCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataStoreRecordsBulkCreate>>, TError,{dataStoreTableId: string;data: DataStoreRecordCreateData[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof dataStoreRecordsBulkCreate>>, TError,{dataStoreTableId: string;data: DataStoreRecordCreateData[]}, TContext> => {
    
const mutationKey = ['dataStoreRecordsBulkCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dataStoreRecordsBulkCreate>>, {dataStoreTableId: string;data: DataStoreRecordCreateData[]}> = (props) => {
          const {dataStoreTableId,data} = props ?? {};

          return  dataStoreRecordsBulkCreate(dataStoreTableId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DataStoreRecordsBulkCreateMutationResult = NonNullable<Awaited<ReturnType<typeof dataStoreRecordsBulkCreate>>>
    export type DataStoreRecordsBulkCreateMutationBody = DataStoreRecordCreateData[]
    export type DataStoreRecordsBulkCreateMutationError = HTTPValidationError

    /**
 * @summary Bulk Create Data Store Records Api
 */
export const useDataStoreRecordsBulkCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataStoreRecordsBulkCreate>>, TError,{dataStoreTableId: string;data: DataStoreRecordCreateData[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof dataStoreRecordsBulkCreate>>,
        TError,
        {dataStoreTableId: string;data: DataStoreRecordCreateData[]},
        TContext
      > => {

      const mutationOptions = getDataStoreRecordsBulkCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Data Store Table Record Api
 */
export const dataStoreRecordRetrieve = (
    dataStoreTableId: string,
    dataStoreRecordId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<DataStoreRecordReadData>(
      {url: `/api/data-store/table/${dataStoreTableId}/record/${dataStoreRecordId}/`, method: 'GET', signal
    },
      );
    }
  

export const getDataStoreRecordRetrieveQueryKey = (dataStoreTableId: string,
    dataStoreRecordId: string,) => {
    return [`/api/data-store/table/${dataStoreTableId}/record/${dataStoreRecordId}/`] as const;
    }

    
export const getDataStoreRecordRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof dataStoreRecordRetrieve>>, TError = HTTPValidationError>(dataStoreTableId: string,
    dataStoreRecordId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreRecordRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDataStoreRecordRetrieveQueryKey(dataStoreTableId,dataStoreRecordId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dataStoreRecordRetrieve>>> = ({ signal }) => dataStoreRecordRetrieve(dataStoreTableId,dataStoreRecordId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(dataStoreTableId && dataStoreRecordId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof dataStoreRecordRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DataStoreRecordRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof dataStoreRecordRetrieve>>>
export type DataStoreRecordRetrieveQueryError = HTTPValidationError


export function useDataStoreRecordRetrieve<TData = Awaited<ReturnType<typeof dataStoreRecordRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string,
    dataStoreRecordId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreRecordRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dataStoreRecordRetrieve>>,
          TError,
          Awaited<ReturnType<typeof dataStoreRecordRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreRecordRetrieve<TData = Awaited<ReturnType<typeof dataStoreRecordRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string,
    dataStoreRecordId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreRecordRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dataStoreRecordRetrieve>>,
          TError,
          Awaited<ReturnType<typeof dataStoreRecordRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreRecordRetrieve<TData = Awaited<ReturnType<typeof dataStoreRecordRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string,
    dataStoreRecordId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreRecordRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Data Store Table Record Api
 */

export function useDataStoreRecordRetrieve<TData = Awaited<ReturnType<typeof dataStoreRecordRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string,
    dataStoreRecordId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreRecordRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDataStoreRecordRetrieveQueryOptions(dataStoreTableId,dataStoreRecordId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getDataStoreRecordRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof dataStoreRecordRetrieve>>, TError = HTTPValidationError>(dataStoreTableId: string,
    dataStoreRecordId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreRecordRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDataStoreRecordRetrieveQueryKey(dataStoreTableId,dataStoreRecordId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dataStoreRecordRetrieve>>> = ({ signal }) => dataStoreRecordRetrieve(dataStoreTableId,dataStoreRecordId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreRecordRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DataStoreRecordRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof dataStoreRecordRetrieve>>>
export type DataStoreRecordRetrieveSuspenseQueryError = HTTPValidationError


export function useDataStoreRecordRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreRecordRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string,
    dataStoreRecordId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreRecordRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreRecordRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreRecordRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string,
    dataStoreRecordId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreRecordRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreRecordRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreRecordRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string,
    dataStoreRecordId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreRecordRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Data Store Table Record Api
 */

export function useDataStoreRecordRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreRecordRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string,
    dataStoreRecordId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreRecordRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDataStoreRecordRetrieveSuspenseQueryOptions(dataStoreTableId,dataStoreRecordId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Data Store Table Record Api
 */
export const dataStoreRecordUpdate = (
    dataStoreTableId: string,
    dataStoreRecordId: string,
    dataStoreRecordUpdateData: DataStoreRecordUpdateData,
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/data-store/table/${dataStoreTableId}/record/${dataStoreRecordId}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dataStoreRecordUpdateData
    },
      );
    }
  


export const getDataStoreRecordUpdateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataStoreRecordUpdate>>, TError,{dataStoreTableId: string;dataStoreRecordId: string;data: DataStoreRecordUpdateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof dataStoreRecordUpdate>>, TError,{dataStoreTableId: string;dataStoreRecordId: string;data: DataStoreRecordUpdateData}, TContext> => {
    
const mutationKey = ['dataStoreRecordUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dataStoreRecordUpdate>>, {dataStoreTableId: string;dataStoreRecordId: string;data: DataStoreRecordUpdateData}> = (props) => {
          const {dataStoreTableId,dataStoreRecordId,data} = props ?? {};

          return  dataStoreRecordUpdate(dataStoreTableId,dataStoreRecordId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DataStoreRecordUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof dataStoreRecordUpdate>>>
    export type DataStoreRecordUpdateMutationBody = DataStoreRecordUpdateData
    export type DataStoreRecordUpdateMutationError = HTTPValidationError

    /**
 * @summary Update Data Store Table Record Api
 */
export const useDataStoreRecordUpdate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataStoreRecordUpdate>>, TError,{dataStoreTableId: string;dataStoreRecordId: string;data: DataStoreRecordUpdateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof dataStoreRecordUpdate>>,
        TError,
        {dataStoreTableId: string;dataStoreRecordId: string;data: DataStoreRecordUpdateData},
        TContext
      > => {

      const mutationOptions = getDataStoreRecordUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Bulk Update Data Store Records Api
 */
export const dataStoreRecordsBulkUpdate = (
    dataStoreTableId: string,
    tableData: TableData,
 ) => {
      
      
      return axiosRequest<DataStoreRecordRecordReadData[]>(
      {url: `/api/data-store/table/${dataStoreTableId}/records/bulk-update/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: tableData
    },
      );
    }
  


export const getDataStoreRecordsBulkUpdateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataStoreRecordsBulkUpdate>>, TError,{dataStoreTableId: string;data: TableData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof dataStoreRecordsBulkUpdate>>, TError,{dataStoreTableId: string;data: TableData}, TContext> => {
    
const mutationKey = ['dataStoreRecordsBulkUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dataStoreRecordsBulkUpdate>>, {dataStoreTableId: string;data: TableData}> = (props) => {
          const {dataStoreTableId,data} = props ?? {};

          return  dataStoreRecordsBulkUpdate(dataStoreTableId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DataStoreRecordsBulkUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof dataStoreRecordsBulkUpdate>>>
    export type DataStoreRecordsBulkUpdateMutationBody = TableData
    export type DataStoreRecordsBulkUpdateMutationError = HTTPValidationError

    /**
 * @summary Bulk Update Data Store Records Api
 */
export const useDataStoreRecordsBulkUpdate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dataStoreRecordsBulkUpdate>>, TError,{dataStoreTableId: string;data: TableData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof dataStoreRecordsBulkUpdate>>,
        TError,
        {dataStoreTableId: string;data: TableData},
        TContext
      > => {

      const mutationOptions = getDataStoreRecordsBulkUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Data Store Table Schema Api
 */
export const dataStoreTableSchemaRetrieve = (
    dataStoreTableId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<DataStoreTableSchemaReadData>(
      {url: `/api/data-store/table/${dataStoreTableId}/schema`, method: 'GET', signal
    },
      );
    }
  

export const getDataStoreTableSchemaRetrieveQueryKey = (dataStoreTableId: string,) => {
    return [`/api/data-store/table/${dataStoreTableId}/schema`] as const;
    }

    
export const getDataStoreTableSchemaRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>, TError = HTTPValidationError>(dataStoreTableId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDataStoreTableSchemaRetrieveQueryKey(dataStoreTableId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>> = ({ signal }) => dataStoreTableSchemaRetrieve(dataStoreTableId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(dataStoreTableId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DataStoreTableSchemaRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>>
export type DataStoreTableSchemaRetrieveQueryError = HTTPValidationError


export function useDataStoreTableSchemaRetrieve<TData = Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>,
          TError,
          Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTableSchemaRetrieve<TData = Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>,
          TError,
          Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTableSchemaRetrieve<TData = Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Data Store Table Schema Api
 */

export function useDataStoreTableSchemaRetrieve<TData = Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDataStoreTableSchemaRetrieveQueryOptions(dataStoreTableId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getDataStoreTableSchemaRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>, TError = HTTPValidationError>(dataStoreTableId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDataStoreTableSchemaRetrieveQueryKey(dataStoreTableId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>> = ({ signal }) => dataStoreTableSchemaRetrieve(dataStoreTableId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DataStoreTableSchemaRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>>
export type DataStoreTableSchemaRetrieveSuspenseQueryError = HTTPValidationError


export function useDataStoreTableSchemaRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTableSchemaRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTableSchemaRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Data Store Table Schema Api
 */

export function useDataStoreTableSchemaRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDataStoreTableSchemaRetrieveSuspenseQueryOptions(dataStoreTableId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Data Store Table Schema Table Data Api
 */
export const dataStoreTableSchemaTableDataRetrieve = (
    dataStoreTableId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<TableData>(
      {url: `/api/data-store/table/${dataStoreTableId}/schema/table-data`, method: 'GET', signal
    },
      );
    }
  

export const getDataStoreTableSchemaTableDataRetrieveQueryKey = (dataStoreTableId: string,) => {
    return [`/api/data-store/table/${dataStoreTableId}/schema/table-data`] as const;
    }

    
export const getDataStoreTableSchemaTableDataRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>, TError = HTTPValidationError>(dataStoreTableId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDataStoreTableSchemaTableDataRetrieveQueryKey(dataStoreTableId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>> = ({ signal }) => dataStoreTableSchemaTableDataRetrieve(dataStoreTableId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(dataStoreTableId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DataStoreTableSchemaTableDataRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>>
export type DataStoreTableSchemaTableDataRetrieveQueryError = HTTPValidationError


export function useDataStoreTableSchemaTableDataRetrieve<TData = Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTableSchemaTableDataRetrieve<TData = Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTableSchemaTableDataRetrieve<TData = Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Data Store Table Schema Table Data Api
 */

export function useDataStoreTableSchemaTableDataRetrieve<TData = Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDataStoreTableSchemaTableDataRetrieveQueryOptions(dataStoreTableId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getDataStoreTableSchemaTableDataRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>, TError = HTTPValidationError>(dataStoreTableId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDataStoreTableSchemaTableDataRetrieveQueryKey(dataStoreTableId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>> = ({ signal }) => dataStoreTableSchemaTableDataRetrieve(dataStoreTableId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DataStoreTableSchemaTableDataRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>>
export type DataStoreTableSchemaTableDataRetrieveSuspenseQueryError = HTTPValidationError


export function useDataStoreTableSchemaTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTableSchemaTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTableSchemaTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Data Store Table Schema Table Data Api
 */

export function useDataStoreTableSchemaTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableSchemaTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDataStoreTableSchemaTableDataRetrieveSuspenseQueryOptions(dataStoreTableId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Data Store Table Table Data Api
 */
export const dataStoreTableTableDataRetrieve = (
    dataStoreTableId: string,
    params?: DataStoreTableTableDataRetrieveParams,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<TableData>(
      {url: `/api/data-store/table/${dataStoreTableId}/table-data`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getDataStoreTableTableDataRetrieveQueryKey = (dataStoreTableId: string,
    params?: DataStoreTableTableDataRetrieveParams,) => {
    return [`/api/data-store/table/${dataStoreTableId}/table-data`, ...(params ? [params]: [])] as const;
    }

    
export const getDataStoreTableTableDataRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>, TError = HTTPValidationError>(dataStoreTableId: string,
    params?: DataStoreTableTableDataRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDataStoreTableTableDataRetrieveQueryKey(dataStoreTableId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>> = ({ signal }) => dataStoreTableTableDataRetrieve(dataStoreTableId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(dataStoreTableId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DataStoreTableTableDataRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>>
export type DataStoreTableTableDataRetrieveQueryError = HTTPValidationError


export function useDataStoreTableTableDataRetrieve<TData = Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string,
    params: undefined |  DataStoreTableTableDataRetrieveParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTableTableDataRetrieve<TData = Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string,
    params?: DataStoreTableTableDataRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTableTableDataRetrieve<TData = Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string,
    params?: DataStoreTableTableDataRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Data Store Table Table Data Api
 */

export function useDataStoreTableTableDataRetrieve<TData = Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string,
    params?: DataStoreTableTableDataRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDataStoreTableTableDataRetrieveQueryOptions(dataStoreTableId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getDataStoreTableTableDataRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>, TError = HTTPValidationError>(dataStoreTableId: string,
    params?: DataStoreTableTableDataRetrieveParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDataStoreTableTableDataRetrieveQueryKey(dataStoreTableId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>> = ({ signal }) => dataStoreTableTableDataRetrieve(dataStoreTableId,params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DataStoreTableTableDataRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>>
export type DataStoreTableTableDataRetrieveSuspenseQueryError = HTTPValidationError


export function useDataStoreTableTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string,
    params: undefined |  DataStoreTableTableDataRetrieveParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTableTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string,
    params?: DataStoreTableTableDataRetrieveParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTableTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string,
    params?: DataStoreTableTableDataRetrieveParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Data Store Table Table Data Api
 */

export function useDataStoreTableTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>, TError = HTTPValidationError>(
 dataStoreTableId: string,
    params?: DataStoreTableTableDataRetrieveParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTableTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDataStoreTableTableDataRetrieveSuspenseQueryOptions(dataStoreTableId,params,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Data Store Tables Table Data Api
 */
export const dataStoreTablesTableDataRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<TableData>(
      {url: `/api/data-store/tables-table-data`, method: 'GET', signal
    },
      );
    }
  

export const getDataStoreTablesTableDataRetrieveQueryKey = () => {
    return [`/api/data-store/tables-table-data`] as const;
    }

    
export const getDataStoreTablesTableDataRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDataStoreTablesTableDataRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>> = ({ signal }) => dataStoreTablesTableDataRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DataStoreTablesTableDataRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>>
export type DataStoreTablesTableDataRetrieveQueryError = unknown


export function useDataStoreTablesTableDataRetrieve<TData = Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTablesTableDataRetrieve<TData = Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTablesTableDataRetrieve<TData = Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Data Store Tables Table Data Api
 */

export function useDataStoreTablesTableDataRetrieve<TData = Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDataStoreTablesTableDataRetrieveQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getDataStoreTablesTableDataRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDataStoreTablesTableDataRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>> = ({ signal }) => dataStoreTablesTableDataRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DataStoreTablesTableDataRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>>
export type DataStoreTablesTableDataRetrieveSuspenseQueryError = unknown


export function useDataStoreTablesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTablesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDataStoreTablesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Data Store Tables Table Data Api
 */

export function useDataStoreTablesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dataStoreTablesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDataStoreTablesTableDataRetrieveSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



