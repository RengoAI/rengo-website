/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Rengo
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  HTTPValidationError
} from '../schemas/hTTPValidationError'
import type {
  PortfolioCompanyConnectionRequestCreateData
} from '../schemas/portfolioCompanyConnectionRequestCreateData'
import type {
  PortfolioCompanyDataRequestCreateData
} from '../schemas/portfolioCompanyDataRequestCreateData'
import type {
  PortfolioCompanyDataRequestFromDocumentCreateData
} from '../schemas/portfolioCompanyDataRequestFromDocumentCreateData'
import type {
  PortfolioCompanyDataRequestFromDocumentResponseData
} from '../schemas/portfolioCompanyDataRequestFromDocumentResponseData'
import type {
  PortfolioCompanyDataRequestRecordReadData
} from '../schemas/portfolioCompanyDataRequestRecordReadData'
import type {
  PortfolioCompanyDataRequestScheduleCompanyRecordCreateData
} from '../schemas/portfolioCompanyDataRequestScheduleCompanyRecordCreateData'
import type {
  PortfolioCompanyDataRequestScheduleCompanyRecordReadData
} from '../schemas/portfolioCompanyDataRequestScheduleCompanyRecordReadData'
import type {
  PortfolioCompanyDataRequestScheduleCompanyRecordUpdateData
} from '../schemas/portfolioCompanyDataRequestScheduleCompanyRecordUpdateData'
import type {
  PortfolioCompanyDataRequestScheduleRecordCreateData
} from '../schemas/portfolioCompanyDataRequestScheduleRecordCreateData'
import type {
  PortfolioCompanyDataRequestScheduleRecordReadData
} from '../schemas/portfolioCompanyDataRequestScheduleRecordReadData'
import type {
  PortfolioCompanyDataRequestScheduleRecordUpdateData
} from '../schemas/portfolioCompanyDataRequestScheduleRecordUpdateData'
import type {
  PortfolioCompanyDataRequestScheduleWithRunDataReadData
} from '../schemas/portfolioCompanyDataRequestScheduleWithRunDataReadData'
import type {
  PortfolioCompanyDataTemplateRecordCreateData
} from '../schemas/portfolioCompanyDataTemplateRecordCreateData'
import type {
  PortfolioCompanyDataTemplateRecordReadData
} from '../schemas/portfolioCompanyDataTemplateRecordReadData'
import type {
  PortfolioCompanyDataTemplateRecordUpdateData
} from '../schemas/portfolioCompanyDataTemplateRecordUpdateData'
import type {
  PortfolioCompanyDataTemplateTableCreateData
} from '../schemas/portfolioCompanyDataTemplateTableCreateData'
import type {
  PortfolioCompanyDataTemplateTableRecordReadData
} from '../schemas/portfolioCompanyDataTemplateTableRecordReadData'
import type {
  PortfolioCompanyDataTemplateTableRecordUpdateData
} from '../schemas/portfolioCompanyDataTemplateTableRecordUpdateData'
import type {
  PortfolioCompanyDataTemplateTablesListParams
} from '../schemas/portfolioCompanyDataTemplateTablesListParams'
import type {
  PortfolioCompanyRequestReadData
} from '../schemas/portfolioCompanyRequestReadData'
import type {
  PortfolioCompanyRequestRecordCreateData
} from '../schemas/portfolioCompanyRequestRecordCreateData'
import type {
  PortfolioCompanyRequestRecordReadData
} from '../schemas/portfolioCompanyRequestRecordReadData'
import type {
  PortfolioCompanyRequestRecordUpdateData
} from '../schemas/portfolioCompanyRequestRecordUpdateData'
import type {
  PortfolioCompanyRequestTransitionParams
} from '../schemas/portfolioCompanyRequestTransitionParams'
import type {
  PortfolioCompanyRequestsListParams
} from '../schemas/portfolioCompanyRequestsListParams'
import type {
  PortfolioCompanyRequestsTableDataRetrieveParams
} from '../schemas/portfolioCompanyRequestsTableDataRetrieveParams'
import type {
  TableData
} from '../schemas/tableData'
import type {
  VersionReadDataPortfolioCompanyDataRequestScheduleRecordReadData
} from '../schemas/versionReadDataPortfolioCompanyDataRequestScheduleRecordReadData'
import type {
  VersionReadDataPortfolioCompanyDataTemplateRecordReadData
} from '../schemas/versionReadDataPortfolioCompanyDataTemplateRecordReadData'
import { axiosRequest } from '../../shared/api/api';



/**
 * @summary Get Portfolio Company Connections Api
 */
export const portfolioCompanyRequestsList = (
    params?: PortfolioCompanyRequestsListParams,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyRequestRecordReadData[]>(
      {url: `/api/portfolio-company/requests/`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getPortfolioCompanyRequestsListQueryKey = (params?: PortfolioCompanyRequestsListParams,) => {
    return [`/api/portfolio-company/requests/`, ...(params ? [params]: [])] as const;
    }

    
export const getPortfolioCompanyRequestsListQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyRequestsList>>, TError = HTTPValidationError>(params?: PortfolioCompanyRequestsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyRequestsListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyRequestsList>>> = ({ signal }) => portfolioCompanyRequestsList(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyRequestsListQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyRequestsList>>>
export type PortfolioCompanyRequestsListQueryError = HTTPValidationError


export function usePortfolioCompanyRequestsList<TData = Awaited<ReturnType<typeof portfolioCompanyRequestsList>>, TError = HTTPValidationError>(
 params: undefined |  PortfolioCompanyRequestsListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyRequestsList>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyRequestsList>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyRequestsList<TData = Awaited<ReturnType<typeof portfolioCompanyRequestsList>>, TError = HTTPValidationError>(
 params?: PortfolioCompanyRequestsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyRequestsList>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyRequestsList>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyRequestsList<TData = Awaited<ReturnType<typeof portfolioCompanyRequestsList>>, TError = HTTPValidationError>(
 params?: PortfolioCompanyRequestsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsList>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Portfolio Company Connections Api
 */

export function usePortfolioCompanyRequestsList<TData = Awaited<ReturnType<typeof portfolioCompanyRequestsList>>, TError = HTTPValidationError>(
 params?: PortfolioCompanyRequestsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsList>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyRequestsListQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPortfolioCompanyRequestsListSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyRequestsList>>, TError = HTTPValidationError>(params?: PortfolioCompanyRequestsListParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyRequestsListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyRequestsList>>> = ({ signal }) => portfolioCompanyRequestsList(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyRequestsListSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyRequestsList>>>
export type PortfolioCompanyRequestsListSuspenseQueryError = HTTPValidationError


export function usePortfolioCompanyRequestsListSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyRequestsList>>, TError = HTTPValidationError>(
 params: undefined |  PortfolioCompanyRequestsListParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyRequestsListSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyRequestsList>>, TError = HTTPValidationError>(
 params?: PortfolioCompanyRequestsListParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyRequestsListSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyRequestsList>>, TError = HTTPValidationError>(
 params?: PortfolioCompanyRequestsListParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Portfolio Company Connections Api
 */

export function usePortfolioCompanyRequestsListSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyRequestsList>>, TError = HTTPValidationError>(
 params?: PortfolioCompanyRequestsListParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyRequestsListSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Endpoint
 */
export const portfolioCompanyRequestCreate = (
    portfolioCompanyRequestRecordCreateData: PortfolioCompanyRequestRecordCreateData,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyRequestRecordReadData>(
      {url: `/api/portfolio-company/requests/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: portfolioCompanyRequestRecordCreateData, signal
    },
      );
    }
  


export const getPortfolioCompanyRequestCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyRequestCreate>>, TError,{data: PortfolioCompanyRequestRecordCreateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyRequestCreate>>, TError,{data: PortfolioCompanyRequestRecordCreateData}, TContext> => {
    
const mutationKey = ['portfolioCompanyRequestCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyRequestCreate>>, {data: PortfolioCompanyRequestRecordCreateData}> = (props) => {
          const {data} = props ?? {};

          return  portfolioCompanyRequestCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyRequestCreateMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyRequestCreate>>>
    export type PortfolioCompanyRequestCreateMutationBody = PortfolioCompanyRequestRecordCreateData
    export type PortfolioCompanyRequestCreateMutationError = HTTPValidationError

    /**
 * @summary Create Endpoint
 */
export const usePortfolioCompanyRequestCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyRequestCreate>>, TError,{data: PortfolioCompanyRequestRecordCreateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyRequestCreate>>,
        TError,
        {data: PortfolioCompanyRequestRecordCreateData},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyRequestCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete Many Endpoint
 */
export const portfolioCompanyRequestsDelete = (
    portfolioCompanyRequestsDeleteBody: string[],
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/portfolio-company/requests/bulk`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: portfolioCompanyRequestsDeleteBody
    },
      );
    }
  


export const getPortfolioCompanyRequestsDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsDelete>>, TError,{data: string[]}, TContext> => {
    
const mutationKey = ['portfolioCompanyRequestsDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyRequestsDelete>>, {data: string[]}> = (props) => {
          const {data} = props ?? {};

          return  portfolioCompanyRequestsDelete(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyRequestsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyRequestsDelete>>>
    export type PortfolioCompanyRequestsDeleteMutationBody = string[]
    export type PortfolioCompanyRequestsDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Many Endpoint
 */
export const usePortfolioCompanyRequestsDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyRequestsDelete>>,
        TError,
        {data: string[]},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyRequestsDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create Many Endpoint
 */
export const portfolioCompanyRequestsBulkCreate = (
    portfolioCompanyRequestRecordCreateData: PortfolioCompanyRequestRecordCreateData[],
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyRequestRecordReadData[]>(
      {url: `/api/portfolio-company/requests/bulk`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: portfolioCompanyRequestRecordCreateData, signal
    },
      );
    }
  


export const getPortfolioCompanyRequestsBulkCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsBulkCreate>>, TError,{data: PortfolioCompanyRequestRecordCreateData[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsBulkCreate>>, TError,{data: PortfolioCompanyRequestRecordCreateData[]}, TContext> => {
    
const mutationKey = ['portfolioCompanyRequestsBulkCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyRequestsBulkCreate>>, {data: PortfolioCompanyRequestRecordCreateData[]}> = (props) => {
          const {data} = props ?? {};

          return  portfolioCompanyRequestsBulkCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyRequestsBulkCreateMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyRequestsBulkCreate>>>
    export type PortfolioCompanyRequestsBulkCreateMutationBody = PortfolioCompanyRequestRecordCreateData[]
    export type PortfolioCompanyRequestsBulkCreateMutationError = HTTPValidationError

    /**
 * @summary Create Many Endpoint
 */
export const usePortfolioCompanyRequestsBulkCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsBulkCreate>>, TError,{data: PortfolioCompanyRequestRecordCreateData[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyRequestsBulkCreate>>,
        TError,
        {data: PortfolioCompanyRequestRecordCreateData[]},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyRequestsBulkCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create Portfolio Company Connection Api
 */
export const portfolioCompanyConnectionRequestCreate = (
    portfolioCompanyConnectionRequestCreateData: PortfolioCompanyConnectionRequestCreateData,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyRequestRecordReadData>(
      {url: `/api/portfolio-company/requests/connections/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: portfolioCompanyConnectionRequestCreateData, signal
    },
      );
    }
  


export const getPortfolioCompanyConnectionRequestCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyConnectionRequestCreate>>, TError,{data: PortfolioCompanyConnectionRequestCreateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyConnectionRequestCreate>>, TError,{data: PortfolioCompanyConnectionRequestCreateData}, TContext> => {
    
const mutationKey = ['portfolioCompanyConnectionRequestCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyConnectionRequestCreate>>, {data: PortfolioCompanyConnectionRequestCreateData}> = (props) => {
          const {data} = props ?? {};

          return  portfolioCompanyConnectionRequestCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyConnectionRequestCreateMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyConnectionRequestCreate>>>
    export type PortfolioCompanyConnectionRequestCreateMutationBody = PortfolioCompanyConnectionRequestCreateData
    export type PortfolioCompanyConnectionRequestCreateMutationError = HTTPValidationError

    /**
 * @summary Create Portfolio Company Connection Api
 */
export const usePortfolioCompanyConnectionRequestCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyConnectionRequestCreate>>, TError,{data: PortfolioCompanyConnectionRequestCreateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyConnectionRequestCreate>>,
        TError,
        {data: PortfolioCompanyConnectionRequestCreateData},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyConnectionRequestCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create Endpoint
 */
export const portfolioCompanyDataRequestScheduleCompanyAssociationCreate = (
    portfolioCompanyDataRequestScheduleCompanyRecordCreateData: PortfolioCompanyDataRequestScheduleCompanyRecordCreateData,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyDataRequestScheduleCompanyRecordReadData>(
      {url: `/api/portfolio-company/requests/data-request-schedule-company-associations/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: portfolioCompanyDataRequestScheduleCompanyRecordCreateData, signal
    },
      );
    }
  


export const getPortfolioCompanyDataRequestScheduleCompanyAssociationCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationCreate>>, TError,{data: PortfolioCompanyDataRequestScheduleCompanyRecordCreateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationCreate>>, TError,{data: PortfolioCompanyDataRequestScheduleCompanyRecordCreateData}, TContext> => {
    
const mutationKey = ['portfolioCompanyDataRequestScheduleCompanyAssociationCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationCreate>>, {data: PortfolioCompanyDataRequestScheduleCompanyRecordCreateData}> = (props) => {
          const {data} = props ?? {};

          return  portfolioCompanyDataRequestScheduleCompanyAssociationCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyDataRequestScheduleCompanyAssociationCreateMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationCreate>>>
    export type PortfolioCompanyDataRequestScheduleCompanyAssociationCreateMutationBody = PortfolioCompanyDataRequestScheduleCompanyRecordCreateData
    export type PortfolioCompanyDataRequestScheduleCompanyAssociationCreateMutationError = HTTPValidationError

    /**
 * @summary Create Endpoint
 */
export const usePortfolioCompanyDataRequestScheduleCompanyAssociationCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationCreate>>, TError,{data: PortfolioCompanyDataRequestScheduleCompanyRecordCreateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationCreate>>,
        TError,
        {data: PortfolioCompanyDataRequestScheduleCompanyRecordCreateData},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyDataRequestScheduleCompanyAssociationCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete Many Endpoint
 */
export const portfolioCompanyDataRequestScheduleCompanyAssociationsDelete = (
    portfolioCompanyDataRequestScheduleCompanyAssociationsDeleteBody: string[],
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/portfolio-company/requests/data-request-schedule-company-associations/bulk`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: portfolioCompanyDataRequestScheduleCompanyAssociationsDeleteBody
    },
      );
    }
  


export const getPortfolioCompanyDataRequestScheduleCompanyAssociationsDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationsDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationsDelete>>, TError,{data: string[]}, TContext> => {
    
const mutationKey = ['portfolioCompanyDataRequestScheduleCompanyAssociationsDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationsDelete>>, {data: string[]}> = (props) => {
          const {data} = props ?? {};

          return  portfolioCompanyDataRequestScheduleCompanyAssociationsDelete(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyDataRequestScheduleCompanyAssociationsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationsDelete>>>
    export type PortfolioCompanyDataRequestScheduleCompanyAssociationsDeleteMutationBody = string[]
    export type PortfolioCompanyDataRequestScheduleCompanyAssociationsDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Many Endpoint
 */
export const usePortfolioCompanyDataRequestScheduleCompanyAssociationsDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationsDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationsDelete>>,
        TError,
        {data: string[]},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyDataRequestScheduleCompanyAssociationsDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create Many Endpoint
 */
export const portfolioCompanyDataRequestScheduleCompanyAssociationsBulkCreate = (
    portfolioCompanyDataRequestScheduleCompanyRecordCreateData: PortfolioCompanyDataRequestScheduleCompanyRecordCreateData[],
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyDataRequestScheduleCompanyRecordReadData[]>(
      {url: `/api/portfolio-company/requests/data-request-schedule-company-associations/bulk`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: portfolioCompanyDataRequestScheduleCompanyRecordCreateData, signal
    },
      );
    }
  


export const getPortfolioCompanyDataRequestScheduleCompanyAssociationsBulkCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationsBulkCreate>>, TError,{data: PortfolioCompanyDataRequestScheduleCompanyRecordCreateData[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationsBulkCreate>>, TError,{data: PortfolioCompanyDataRequestScheduleCompanyRecordCreateData[]}, TContext> => {
    
const mutationKey = ['portfolioCompanyDataRequestScheduleCompanyAssociationsBulkCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationsBulkCreate>>, {data: PortfolioCompanyDataRequestScheduleCompanyRecordCreateData[]}> = (props) => {
          const {data} = props ?? {};

          return  portfolioCompanyDataRequestScheduleCompanyAssociationsBulkCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyDataRequestScheduleCompanyAssociationsBulkCreateMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationsBulkCreate>>>
    export type PortfolioCompanyDataRequestScheduleCompanyAssociationsBulkCreateMutationBody = PortfolioCompanyDataRequestScheduleCompanyRecordCreateData[]
    export type PortfolioCompanyDataRequestScheduleCompanyAssociationsBulkCreateMutationError = HTTPValidationError

    /**
 * @summary Create Many Endpoint
 */
export const usePortfolioCompanyDataRequestScheduleCompanyAssociationsBulkCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationsBulkCreate>>, TError,{data: PortfolioCompanyDataRequestScheduleCompanyRecordCreateData[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationsBulkCreate>>,
        TError,
        {data: PortfolioCompanyDataRequestScheduleCompanyRecordCreateData[]},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyDataRequestScheduleCompanyAssociationsBulkCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary List Portfolio Company Data Request Schedule Companies Api
 */
export const portfolioCompanyDataRequestScheduleCompaniesList = (
    scheduleId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyDataRequestScheduleCompanyRecordReadData[]>(
      {url: `/api/portfolio-company/requests/data-request-schedule-company-associations/schedule/${scheduleId}/associations`, method: 'GET', signal
    },
      );
    }
  

export const getPortfolioCompanyDataRequestScheduleCompaniesListQueryKey = (scheduleId: string,) => {
    return [`/api/portfolio-company/requests/data-request-schedule-company-associations/schedule/${scheduleId}/associations`] as const;
    }

    
export const getPortfolioCompanyDataRequestScheduleCompaniesListQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>, TError = HTTPValidationError>(scheduleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataRequestScheduleCompaniesListQueryKey(scheduleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>> = ({ signal }) => portfolioCompanyDataRequestScheduleCompaniesList(scheduleId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(scheduleId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataRequestScheduleCompaniesListQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>>
export type PortfolioCompanyDataRequestScheduleCompaniesListQueryError = HTTPValidationError


export function usePortfolioCompanyDataRequestScheduleCompaniesList<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>, TError = HTTPValidationError>(
 scheduleId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleCompaniesList<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleCompaniesList<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Portfolio Company Data Request Schedule Companies Api
 */

export function usePortfolioCompanyDataRequestScheduleCompaniesList<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataRequestScheduleCompaniesListQueryOptions(scheduleId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPortfolioCompanyDataRequestScheduleCompaniesListSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>, TError = HTTPValidationError>(scheduleId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataRequestScheduleCompaniesListQueryKey(scheduleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>> = ({ signal }) => portfolioCompanyDataRequestScheduleCompaniesList(scheduleId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataRequestScheduleCompaniesListSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>>
export type PortfolioCompanyDataRequestScheduleCompaniesListSuspenseQueryError = HTTPValidationError


export function usePortfolioCompanyDataRequestScheduleCompaniesListSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>, TError = HTTPValidationError>(
 scheduleId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleCompaniesListSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleCompaniesListSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Portfolio Company Data Request Schedule Companies Api
 */

export function usePortfolioCompanyDataRequestScheduleCompaniesListSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataRequestScheduleCompaniesListSuspenseQueryOptions(scheduleId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Portfolio Company Data Request Schedule Companies Table Data Api
 */
export const portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve = (
    scheduleId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<TableData>(
      {url: `/api/portfolio-company/requests/data-request-schedule-company-associations/schedule/${scheduleId}/associations/table-data`, method: 'GET', signal
    },
      );
    }
  

export const getPortfolioCompanyDataRequestScheduleCompaniesTableDataRetrieveQueryKey = (scheduleId: string,) => {
    return [`/api/portfolio-company/requests/data-request-schedule-company-associations/schedule/${scheduleId}/associations/table-data`] as const;
    }

    
export const getPortfolioCompanyDataRequestScheduleCompaniesTableDataRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>, TError = HTTPValidationError>(scheduleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataRequestScheduleCompaniesTableDataRetrieveQueryKey(scheduleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>> = ({ signal }) => portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve(scheduleId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(scheduleId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataRequestScheduleCompaniesTableDataRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>>
export type PortfolioCompanyDataRequestScheduleCompaniesTableDataRetrieveQueryError = HTTPValidationError


export function usePortfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Portfolio Company Data Request Schedule Companies Table Data Api
 */

export function usePortfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataRequestScheduleCompaniesTableDataRetrieveQueryOptions(scheduleId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPortfolioCompanyDataRequestScheduleCompaniesTableDataRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>, TError = HTTPValidationError>(scheduleId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataRequestScheduleCompaniesTableDataRetrieveQueryKey(scheduleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>> = ({ signal }) => portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve(scheduleId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataRequestScheduleCompaniesTableDataRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>>
export type PortfolioCompanyDataRequestScheduleCompaniesTableDataRetrieveSuspenseQueryError = HTTPValidationError


export function usePortfolioCompanyDataRequestScheduleCompaniesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleCompaniesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleCompaniesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Portfolio Company Data Request Schedule Companies Table Data Api
 */

export function usePortfolioCompanyDataRequestScheduleCompaniesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompaniesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataRequestScheduleCompaniesTableDataRetrieveSuspenseQueryOptions(scheduleId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete Endpoint
 */
export const portfolioCompanyDataRequestScheduleCompanyAssociationDelete = (
    id: string,
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/portfolio-company/requests/data-request-schedule-company-associations/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getPortfolioCompanyDataRequestScheduleCompanyAssociationDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationDelete>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationDelete>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['portfolioCompanyDataRequestScheduleCompanyAssociationDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationDelete>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  portfolioCompanyDataRequestScheduleCompanyAssociationDelete(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyDataRequestScheduleCompanyAssociationDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationDelete>>>
    
    export type PortfolioCompanyDataRequestScheduleCompanyAssociationDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Endpoint
 */
export const usePortfolioCompanyDataRequestScheduleCompanyAssociationDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationDelete>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationDelete>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyDataRequestScheduleCompanyAssociationDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Endpoint
 */
export const portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyDataRequestScheduleCompanyRecordReadData>(
      {url: `/api/portfolio-company/requests/data-request-schedule-company-associations/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getPortfolioCompanyDataRequestScheduleCompanyAssociationRetrieveQueryKey = (id: string,) => {
    return [`/api/portfolio-company/requests/data-request-schedule-company-associations/${id}`] as const;
    }

    
export const getPortfolioCompanyDataRequestScheduleCompanyAssociationRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataRequestScheduleCompanyAssociationRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>> = ({ signal }) => portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataRequestScheduleCompanyAssociationRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>>
export type PortfolioCompanyDataRequestScheduleCompanyAssociationRetrieveQueryError = HTTPValidationError


export function usePortfolioCompanyDataRequestScheduleCompanyAssociationRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleCompanyAssociationRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleCompanyAssociationRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function usePortfolioCompanyDataRequestScheduleCompanyAssociationRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataRequestScheduleCompanyAssociationRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPortfolioCompanyDataRequestScheduleCompanyAssociationRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataRequestScheduleCompanyAssociationRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>> = ({ signal }) => portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataRequestScheduleCompanyAssociationRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>>
export type PortfolioCompanyDataRequestScheduleCompanyAssociationRetrieveSuspenseQueryError = HTTPValidationError


export function usePortfolioCompanyDataRequestScheduleCompanyAssociationRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleCompanyAssociationRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleCompanyAssociationRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function usePortfolioCompanyDataRequestScheduleCompanyAssociationRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataRequestScheduleCompanyAssociationRetrieveSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Endpoint
 */
export const portfolioCompanyDataRequestScheduleCompanyAssociationUpdate = (
    id: string,
    portfolioCompanyDataRequestScheduleCompanyRecordUpdateData: PortfolioCompanyDataRequestScheduleCompanyRecordUpdateData,
 ) => {
      
      
      return axiosRequest<PortfolioCompanyDataRequestScheduleCompanyRecordReadData>(
      {url: `/api/portfolio-company/requests/data-request-schedule-company-associations/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: portfolioCompanyDataRequestScheduleCompanyRecordUpdateData
    },
      );
    }
  


export const getPortfolioCompanyDataRequestScheduleCompanyAssociationUpdateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationUpdate>>, TError,{id: string;data: PortfolioCompanyDataRequestScheduleCompanyRecordUpdateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationUpdate>>, TError,{id: string;data: PortfolioCompanyDataRequestScheduleCompanyRecordUpdateData}, TContext> => {
    
const mutationKey = ['portfolioCompanyDataRequestScheduleCompanyAssociationUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationUpdate>>, {id: string;data: PortfolioCompanyDataRequestScheduleCompanyRecordUpdateData}> = (props) => {
          const {id,data} = props ?? {};

          return  portfolioCompanyDataRequestScheduleCompanyAssociationUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyDataRequestScheduleCompanyAssociationUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationUpdate>>>
    export type PortfolioCompanyDataRequestScheduleCompanyAssociationUpdateMutationBody = PortfolioCompanyDataRequestScheduleCompanyRecordUpdateData
    export type PortfolioCompanyDataRequestScheduleCompanyAssociationUpdateMutationError = HTTPValidationError

    /**
 * @summary Update Endpoint
 */
export const usePortfolioCompanyDataRequestScheduleCompanyAssociationUpdate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationUpdate>>, TError,{id: string;data: PortfolioCompanyDataRequestScheduleCompanyRecordUpdateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCompanyAssociationUpdate>>,
        TError,
        {id: string;data: PortfolioCompanyDataRequestScheduleCompanyRecordUpdateData},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyDataRequestScheduleCompanyAssociationUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary List Portfolio Company Data Request Schedules Api
 */
export const portfolioCompanyDataRequestSchedulesList = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyDataRequestScheduleRecordReadData[]>(
      {url: `/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/`, method: 'GET', signal
    },
      );
    }
  

export const getPortfolioCompanyDataRequestSchedulesListQueryKey = () => {
    return [`/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/`] as const;
    }

    
export const getPortfolioCompanyDataRequestSchedulesListQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataRequestSchedulesListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>> = ({ signal }) => portfolioCompanyDataRequestSchedulesList(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataRequestSchedulesListQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>>
export type PortfolioCompanyDataRequestSchedulesListQueryError = unknown


export function usePortfolioCompanyDataRequestSchedulesList<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestSchedulesList<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestSchedulesList<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Portfolio Company Data Request Schedules Api
 */

export function usePortfolioCompanyDataRequestSchedulesList<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataRequestSchedulesListQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPortfolioCompanyDataRequestSchedulesListSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataRequestSchedulesListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>> = ({ signal }) => portfolioCompanyDataRequestSchedulesList(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataRequestSchedulesListSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>>
export type PortfolioCompanyDataRequestSchedulesListSuspenseQueryError = unknown


export function usePortfolioCompanyDataRequestSchedulesListSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestSchedulesListSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestSchedulesListSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Portfolio Company Data Request Schedules Api
 */

export function usePortfolioCompanyDataRequestSchedulesListSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataRequestSchedulesListSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Endpoint
 */
export const portfolioCompanyDataRequestScheduleCreate = (
    portfolioCompanyDataRequestScheduleRecordCreateData: PortfolioCompanyDataRequestScheduleRecordCreateData,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyDataRequestScheduleRecordReadData>(
      {url: `/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: portfolioCompanyDataRequestScheduleRecordCreateData, signal
    },
      );
    }
  


export const getPortfolioCompanyDataRequestScheduleCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCreate>>, TError,{data: PortfolioCompanyDataRequestScheduleRecordCreateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCreate>>, TError,{data: PortfolioCompanyDataRequestScheduleRecordCreateData}, TContext> => {
    
const mutationKey = ['portfolioCompanyDataRequestScheduleCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCreate>>, {data: PortfolioCompanyDataRequestScheduleRecordCreateData}> = (props) => {
          const {data} = props ?? {};

          return  portfolioCompanyDataRequestScheduleCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyDataRequestScheduleCreateMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCreate>>>
    export type PortfolioCompanyDataRequestScheduleCreateMutationBody = PortfolioCompanyDataRequestScheduleRecordCreateData
    export type PortfolioCompanyDataRequestScheduleCreateMutationError = HTTPValidationError

    /**
 * @summary Create Endpoint
 */
export const usePortfolioCompanyDataRequestScheduleCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCreate>>, TError,{data: PortfolioCompanyDataRequestScheduleRecordCreateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleCreate>>,
        TError,
        {data: PortfolioCompanyDataRequestScheduleRecordCreateData},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyDataRequestScheduleCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete Many Endpoint
 */
export const portfolioCompanyDataRequestSchedulesDelete = (
    portfolioCompanyDataRequestSchedulesDeleteBody: string[],
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/bulk`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: portfolioCompanyDataRequestSchedulesDeleteBody
    },
      );
    }
  


export const getPortfolioCompanyDataRequestSchedulesDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesDelete>>, TError,{data: string[]}, TContext> => {
    
const mutationKey = ['portfolioCompanyDataRequestSchedulesDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesDelete>>, {data: string[]}> = (props) => {
          const {data} = props ?? {};

          return  portfolioCompanyDataRequestSchedulesDelete(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyDataRequestSchedulesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesDelete>>>
    export type PortfolioCompanyDataRequestSchedulesDeleteMutationBody = string[]
    export type PortfolioCompanyDataRequestSchedulesDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Many Endpoint
 */
export const usePortfolioCompanyDataRequestSchedulesDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesDelete>>,
        TError,
        {data: string[]},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyDataRequestSchedulesDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create Many Endpoint
 */
export const portfolioCompanyDataRequestSchedulesBulkCreate = (
    portfolioCompanyDataRequestScheduleRecordCreateData: PortfolioCompanyDataRequestScheduleRecordCreateData[],
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyDataRequestScheduleRecordReadData[]>(
      {url: `/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/bulk`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: portfolioCompanyDataRequestScheduleRecordCreateData, signal
    },
      );
    }
  


export const getPortfolioCompanyDataRequestSchedulesBulkCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesBulkCreate>>, TError,{data: PortfolioCompanyDataRequestScheduleRecordCreateData[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesBulkCreate>>, TError,{data: PortfolioCompanyDataRequestScheduleRecordCreateData[]}, TContext> => {
    
const mutationKey = ['portfolioCompanyDataRequestSchedulesBulkCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesBulkCreate>>, {data: PortfolioCompanyDataRequestScheduleRecordCreateData[]}> = (props) => {
          const {data} = props ?? {};

          return  portfolioCompanyDataRequestSchedulesBulkCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyDataRequestSchedulesBulkCreateMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesBulkCreate>>>
    export type PortfolioCompanyDataRequestSchedulesBulkCreateMutationBody = PortfolioCompanyDataRequestScheduleRecordCreateData[]
    export type PortfolioCompanyDataRequestSchedulesBulkCreateMutationError = HTTPValidationError

    /**
 * @summary Create Many Endpoint
 */
export const usePortfolioCompanyDataRequestSchedulesBulkCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesBulkCreate>>, TError,{data: PortfolioCompanyDataRequestScheduleRecordCreateData[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesBulkCreate>>,
        TError,
        {data: PortfolioCompanyDataRequestScheduleRecordCreateData[]},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyDataRequestSchedulesBulkCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Portfolio Company Data Request Schedules Table Data Api
 */
export const portfolioCompanyDataRequestSchedulesTableDataRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<TableData>(
      {url: `/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/table-data`, method: 'GET', signal
    },
      );
    }
  

export const getPortfolioCompanyDataRequestSchedulesTableDataRetrieveQueryKey = () => {
    return [`/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/table-data`] as const;
    }

    
export const getPortfolioCompanyDataRequestSchedulesTableDataRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataRequestSchedulesTableDataRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>> = ({ signal }) => portfolioCompanyDataRequestSchedulesTableDataRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataRequestSchedulesTableDataRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>>
export type PortfolioCompanyDataRequestSchedulesTableDataRetrieveQueryError = unknown


export function usePortfolioCompanyDataRequestSchedulesTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestSchedulesTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestSchedulesTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Portfolio Company Data Request Schedules Table Data Api
 */

export function usePortfolioCompanyDataRequestSchedulesTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataRequestSchedulesTableDataRetrieveQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPortfolioCompanyDataRequestSchedulesTableDataRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataRequestSchedulesTableDataRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>> = ({ signal }) => portfolioCompanyDataRequestSchedulesTableDataRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataRequestSchedulesTableDataRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>>
export type PortfolioCompanyDataRequestSchedulesTableDataRetrieveSuspenseQueryError = unknown


export function usePortfolioCompanyDataRequestSchedulesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestSchedulesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestSchedulesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Portfolio Company Data Request Schedules Table Data Api
 */

export function usePortfolioCompanyDataRequestSchedulesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestSchedulesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataRequestSchedulesTableDataRetrieveSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete Endpoint
 */
export const portfolioCompanyDataRequestScheduleDelete = (
    id: string,
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getPortfolioCompanyDataRequestScheduleDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleDelete>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleDelete>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['portfolioCompanyDataRequestScheduleDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleDelete>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  portfolioCompanyDataRequestScheduleDelete(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyDataRequestScheduleDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleDelete>>>
    
    export type PortfolioCompanyDataRequestScheduleDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Endpoint
 */
export const usePortfolioCompanyDataRequestScheduleDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleDelete>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleDelete>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyDataRequestScheduleDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Endpoint
 */
export const portfolioCompanyDataRequestScheduleRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyDataRequestScheduleRecordReadData>(
      {url: `/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getPortfolioCompanyDataRequestScheduleRetrieveQueryKey = (id: string,) => {
    return [`/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/${id}`] as const;
    }

    
export const getPortfolioCompanyDataRequestScheduleRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataRequestScheduleRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>> = ({ signal }) => portfolioCompanyDataRequestScheduleRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataRequestScheduleRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>>
export type PortfolioCompanyDataRequestScheduleRetrieveQueryError = HTTPValidationError


export function usePortfolioCompanyDataRequestScheduleRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function usePortfolioCompanyDataRequestScheduleRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataRequestScheduleRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPortfolioCompanyDataRequestScheduleRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataRequestScheduleRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>> = ({ signal }) => portfolioCompanyDataRequestScheduleRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataRequestScheduleRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>>
export type PortfolioCompanyDataRequestScheduleRetrieveSuspenseQueryError = HTTPValidationError


export function usePortfolioCompanyDataRequestScheduleRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function usePortfolioCompanyDataRequestScheduleRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataRequestScheduleRetrieveSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Endpoint
 */
export const portfolioCompanyDataRequestScheduleUpdate = (
    id: string,
    portfolioCompanyDataRequestScheduleRecordUpdateData: PortfolioCompanyDataRequestScheduleRecordUpdateData,
 ) => {
      
      
      return axiosRequest<PortfolioCompanyDataRequestScheduleRecordReadData>(
      {url: `/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: portfolioCompanyDataRequestScheduleRecordUpdateData
    },
      );
    }
  


export const getPortfolioCompanyDataRequestScheduleUpdateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleUpdate>>, TError,{id: string;data: PortfolioCompanyDataRequestScheduleRecordUpdateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleUpdate>>, TError,{id: string;data: PortfolioCompanyDataRequestScheduleRecordUpdateData}, TContext> => {
    
const mutationKey = ['portfolioCompanyDataRequestScheduleUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleUpdate>>, {id: string;data: PortfolioCompanyDataRequestScheduleRecordUpdateData}> = (props) => {
          const {id,data} = props ?? {};

          return  portfolioCompanyDataRequestScheduleUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyDataRequestScheduleUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleUpdate>>>
    export type PortfolioCompanyDataRequestScheduleUpdateMutationBody = PortfolioCompanyDataRequestScheduleRecordUpdateData
    export type PortfolioCompanyDataRequestScheduleUpdateMutationError = HTTPValidationError

    /**
 * @summary Update Endpoint
 */
export const usePortfolioCompanyDataRequestScheduleUpdate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleUpdate>>, TError,{id: string;data: PortfolioCompanyDataRequestScheduleRecordUpdateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleUpdate>>,
        TError,
        {id: string;data: PortfolioCompanyDataRequestScheduleRecordUpdateData},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyDataRequestScheduleUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Versions Endpoint
 */
export const portfolioCompanyDataRequestScheduleVersionsRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<VersionReadDataPortfolioCompanyDataRequestScheduleRecordReadData[]>(
      {url: `/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/${id}/versions`, method: 'GET', signal
    },
      );
    }
  

export const getPortfolioCompanyDataRequestScheduleVersionsRetrieveQueryKey = (id: string,) => {
    return [`/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/${id}/versions`] as const;
    }

    
export const getPortfolioCompanyDataRequestScheduleVersionsRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataRequestScheduleVersionsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>> = ({ signal }) => portfolioCompanyDataRequestScheduleVersionsRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataRequestScheduleVersionsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>>
export type PortfolioCompanyDataRequestScheduleVersionsRetrieveQueryError = HTTPValidationError


export function usePortfolioCompanyDataRequestScheduleVersionsRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleVersionsRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleVersionsRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Versions Endpoint
 */

export function usePortfolioCompanyDataRequestScheduleVersionsRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataRequestScheduleVersionsRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPortfolioCompanyDataRequestScheduleVersionsRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataRequestScheduleVersionsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>> = ({ signal }) => portfolioCompanyDataRequestScheduleVersionsRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataRequestScheduleVersionsRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>>
export type PortfolioCompanyDataRequestScheduleVersionsRetrieveSuspenseQueryError = HTTPValidationError


export function usePortfolioCompanyDataRequestScheduleVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Versions Endpoint
 */

export function usePortfolioCompanyDataRequestScheduleVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataRequestScheduleVersionsRetrieveSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Portfolio Company Data Request Schedule Runs Table Data Api
 */
export const portfolioCompanyDataRequestScheduleRunsTableDataRetrieve = (
    scheduleId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<TableData>(
      {url: `/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/${scheduleId}/runs/table-data`, method: 'GET', signal
    },
      );
    }
  

export const getPortfolioCompanyDataRequestScheduleRunsTableDataRetrieveQueryKey = (scheduleId: string,) => {
    return [`/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/${scheduleId}/runs/table-data`] as const;
    }

    
export const getPortfolioCompanyDataRequestScheduleRunsTableDataRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>, TError = HTTPValidationError>(scheduleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataRequestScheduleRunsTableDataRetrieveQueryKey(scheduleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>> = ({ signal }) => portfolioCompanyDataRequestScheduleRunsTableDataRetrieve(scheduleId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(scheduleId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataRequestScheduleRunsTableDataRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>>
export type PortfolioCompanyDataRequestScheduleRunsTableDataRetrieveQueryError = HTTPValidationError


export function usePortfolioCompanyDataRequestScheduleRunsTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleRunsTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleRunsTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Portfolio Company Data Request Schedule Runs Table Data Api
 */

export function usePortfolioCompanyDataRequestScheduleRunsTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataRequestScheduleRunsTableDataRetrieveQueryOptions(scheduleId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPortfolioCompanyDataRequestScheduleRunsTableDataRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>, TError = HTTPValidationError>(scheduleId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataRequestScheduleRunsTableDataRetrieveQueryKey(scheduleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>> = ({ signal }) => portfolioCompanyDataRequestScheduleRunsTableDataRetrieve(scheduleId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataRequestScheduleRunsTableDataRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>>
export type PortfolioCompanyDataRequestScheduleRunsTableDataRetrieveSuspenseQueryError = HTTPValidationError


export function usePortfolioCompanyDataRequestScheduleRunsTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleRunsTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleRunsTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Portfolio Company Data Request Schedule Runs Table Data Api
 */

export function usePortfolioCompanyDataRequestScheduleRunsTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleRunsTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataRequestScheduleRunsTableDataRetrieveSuspenseQueryOptions(scheduleId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Portfolio Company Data Request Schedule With Run Data Api
 */
export const portfolioCompanyDataRequestScheduleWithRunDataRetrieve = (
    scheduleId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyDataRequestScheduleWithRunDataReadData>(
      {url: `/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/${scheduleId}/with-run-data`, method: 'GET', signal
    },
      );
    }
  

export const getPortfolioCompanyDataRequestScheduleWithRunDataRetrieveQueryKey = (scheduleId: string,) => {
    return [`/api/portfolio-company/requests/data-request-schedules/portfolio-company-data-request-schedules/${scheduleId}/with-run-data`] as const;
    }

    
export const getPortfolioCompanyDataRequestScheduleWithRunDataRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>, TError = HTTPValidationError>(scheduleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataRequestScheduleWithRunDataRetrieveQueryKey(scheduleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>> = ({ signal }) => portfolioCompanyDataRequestScheduleWithRunDataRetrieve(scheduleId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(scheduleId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataRequestScheduleWithRunDataRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>>
export type PortfolioCompanyDataRequestScheduleWithRunDataRetrieveQueryError = HTTPValidationError


export function usePortfolioCompanyDataRequestScheduleWithRunDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleWithRunDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleWithRunDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Portfolio Company Data Request Schedule With Run Data Api
 */

export function usePortfolioCompanyDataRequestScheduleWithRunDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataRequestScheduleWithRunDataRetrieveQueryOptions(scheduleId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPortfolioCompanyDataRequestScheduleWithRunDataRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>, TError = HTTPValidationError>(scheduleId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataRequestScheduleWithRunDataRetrieveQueryKey(scheduleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>> = ({ signal }) => portfolioCompanyDataRequestScheduleWithRunDataRetrieve(scheduleId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataRequestScheduleWithRunDataRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>>
export type PortfolioCompanyDataRequestScheduleWithRunDataRetrieveSuspenseQueryError = HTTPValidationError


export function usePortfolioCompanyDataRequestScheduleWithRunDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleWithRunDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestScheduleWithRunDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Portfolio Company Data Request Schedule With Run Data Api
 */

export function usePortfolioCompanyDataRequestScheduleWithRunDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>, TError = HTTPValidationError>(
 scheduleId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestScheduleWithRunDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataRequestScheduleWithRunDataRetrieveSuspenseQueryOptions(scheduleId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Portfolio Company Data Request Api
 */
export const portfolioCompanyDataRequestCreate = (
    portfolioCompanyDataRequestCreateData: PortfolioCompanyDataRequestCreateData,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyDataRequestRecordReadData[]>(
      {url: `/api/portfolio-company/requests/data-requests/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: portfolioCompanyDataRequestCreateData, signal
    },
      );
    }
  


export const getPortfolioCompanyDataRequestCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestCreate>>, TError,{data: PortfolioCompanyDataRequestCreateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestCreate>>, TError,{data: PortfolioCompanyDataRequestCreateData}, TContext> => {
    
const mutationKey = ['portfolioCompanyDataRequestCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestCreate>>, {data: PortfolioCompanyDataRequestCreateData}> = (props) => {
          const {data} = props ?? {};

          return  portfolioCompanyDataRequestCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyDataRequestCreateMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestCreate>>>
    export type PortfolioCompanyDataRequestCreateMutationBody = PortfolioCompanyDataRequestCreateData
    export type PortfolioCompanyDataRequestCreateMutationError = HTTPValidationError

    /**
 * @summary Create Portfolio Company Data Request Api
 */
export const usePortfolioCompanyDataRequestCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestCreate>>, TError,{data: PortfolioCompanyDataRequestCreateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyDataRequestCreate>>,
        TError,
        {data: PortfolioCompanyDataRequestCreateData},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyDataRequestCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create Portfolio Request Table Data From Document Api
 */
export const portfolioCompanyDataRequestFromDocument = (
    portfolioCompanyDataRequestFromDocumentCreateData: PortfolioCompanyDataRequestFromDocumentCreateData,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyDataRequestFromDocumentResponseData>(
      {url: `/api/portfolio-company/requests/data-requests/request/from-document`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: portfolioCompanyDataRequestFromDocumentCreateData, signal
    },
      );
    }
  


export const getPortfolioCompanyDataRequestFromDocumentMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestFromDocument>>, TError,{data: PortfolioCompanyDataRequestFromDocumentCreateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestFromDocument>>, TError,{data: PortfolioCompanyDataRequestFromDocumentCreateData}, TContext> => {
    
const mutationKey = ['portfolioCompanyDataRequestFromDocument'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestFromDocument>>, {data: PortfolioCompanyDataRequestFromDocumentCreateData}> = (props) => {
          const {data} = props ?? {};

          return  portfolioCompanyDataRequestFromDocument(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyDataRequestFromDocumentMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestFromDocument>>>
    export type PortfolioCompanyDataRequestFromDocumentMutationBody = PortfolioCompanyDataRequestFromDocumentCreateData
    export type PortfolioCompanyDataRequestFromDocumentMutationError = HTTPValidationError

    /**
 * @summary Create Portfolio Request Table Data From Document Api
 */
export const usePortfolioCompanyDataRequestFromDocument = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestFromDocument>>, TError,{data: PortfolioCompanyDataRequestFromDocumentCreateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyDataRequestFromDocument>>,
        TError,
        {data: PortfolioCompanyDataRequestFromDocumentCreateData},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyDataRequestFromDocumentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Portfolio Company Data Request Api
 */
export const portfolioCompanyDataRequestRetrieve = (
    requestId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyDataRequestRecordReadData>(
      {url: `/api/portfolio-company/requests/data-requests/request/${requestId}/data-request`, method: 'GET', signal
    },
      );
    }
  

export const getPortfolioCompanyDataRequestRetrieveQueryKey = (requestId: string,) => {
    return [`/api/portfolio-company/requests/data-requests/request/${requestId}/data-request`] as const;
    }

    
export const getPortfolioCompanyDataRequestRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>, TError = HTTPValidationError>(requestId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataRequestRetrieveQueryKey(requestId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>> = ({ signal }) => portfolioCompanyDataRequestRetrieve(requestId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(requestId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataRequestRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>>
export type PortfolioCompanyDataRequestRetrieveQueryError = HTTPValidationError


export function usePortfolioCompanyDataRequestRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>, TError = HTTPValidationError>(
 requestId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>, TError = HTTPValidationError>(
 requestId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>, TError = HTTPValidationError>(
 requestId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Portfolio Company Data Request Api
 */

export function usePortfolioCompanyDataRequestRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>, TError = HTTPValidationError>(
 requestId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataRequestRetrieveQueryOptions(requestId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPortfolioCompanyDataRequestRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>, TError = HTTPValidationError>(requestId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataRequestRetrieveQueryKey(requestId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>> = ({ signal }) => portfolioCompanyDataRequestRetrieve(requestId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataRequestRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>>
export type PortfolioCompanyDataRequestRetrieveSuspenseQueryError = HTTPValidationError


export function usePortfolioCompanyDataRequestRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>, TError = HTTPValidationError>(
 requestId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>, TError = HTTPValidationError>(
 requestId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataRequestRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>, TError = HTTPValidationError>(
 requestId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Portfolio Company Data Request Api
 */

export function usePortfolioCompanyDataRequestRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>, TError = HTTPValidationError>(
 requestId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataRequestRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataRequestRetrieveSuspenseQueryOptions(requestId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary List Portfolio Company Data Template Tables Api
 */
export const portfolioCompanyDataTemplateTablesList = (
    params?: PortfolioCompanyDataTemplateTablesListParams,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyDataTemplateTableRecordReadData[]>(
      {url: `/api/portfolio-company/requests/data-template-tables/`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getPortfolioCompanyDataTemplateTablesListQueryKey = (params?: PortfolioCompanyDataTemplateTablesListParams,) => {
    return [`/api/portfolio-company/requests/data-template-tables/`, ...(params ? [params]: [])] as const;
    }

    
export const getPortfolioCompanyDataTemplateTablesListQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>, TError = HTTPValidationError>(params?: PortfolioCompanyDataTemplateTablesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataTemplateTablesListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>> = ({ signal }) => portfolioCompanyDataTemplateTablesList(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataTemplateTablesListQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>>
export type PortfolioCompanyDataTemplateTablesListQueryError = HTTPValidationError


export function usePortfolioCompanyDataTemplateTablesList<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>, TError = HTTPValidationError>(
 params: undefined |  PortfolioCompanyDataTemplateTablesListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplateTablesList<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>, TError = HTTPValidationError>(
 params?: PortfolioCompanyDataTemplateTablesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplateTablesList<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>, TError = HTTPValidationError>(
 params?: PortfolioCompanyDataTemplateTablesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Portfolio Company Data Template Tables Api
 */

export function usePortfolioCompanyDataTemplateTablesList<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>, TError = HTTPValidationError>(
 params?: PortfolioCompanyDataTemplateTablesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataTemplateTablesListQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPortfolioCompanyDataTemplateTablesListSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>, TError = HTTPValidationError>(params?: PortfolioCompanyDataTemplateTablesListParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataTemplateTablesListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>> = ({ signal }) => portfolioCompanyDataTemplateTablesList(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataTemplateTablesListSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>>
export type PortfolioCompanyDataTemplateTablesListSuspenseQueryError = HTTPValidationError


export function usePortfolioCompanyDataTemplateTablesListSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>, TError = HTTPValidationError>(
 params: undefined |  PortfolioCompanyDataTemplateTablesListParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplateTablesListSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>, TError = HTTPValidationError>(
 params?: PortfolioCompanyDataTemplateTablesListParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplateTablesListSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>, TError = HTTPValidationError>(
 params?: PortfolioCompanyDataTemplateTablesListParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Portfolio Company Data Template Tables Api
 */

export function usePortfolioCompanyDataTemplateTablesListSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>, TError = HTTPValidationError>(
 params?: PortfolioCompanyDataTemplateTablesListParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataTemplateTablesListSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Endpoint
 */
export const portfolioCompanyDataTemplateTableCreate = (
    portfolioCompanyDataTemplateTableCreateData: PortfolioCompanyDataTemplateTableCreateData,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyDataTemplateTableRecordReadData>(
      {url: `/api/portfolio-company/requests/data-template-tables/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: portfolioCompanyDataTemplateTableCreateData, signal
    },
      );
    }
  


export const getPortfolioCompanyDataTemplateTableCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableCreate>>, TError,{data: PortfolioCompanyDataTemplateTableCreateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableCreate>>, TError,{data: PortfolioCompanyDataTemplateTableCreateData}, TContext> => {
    
const mutationKey = ['portfolioCompanyDataTemplateTableCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableCreate>>, {data: PortfolioCompanyDataTemplateTableCreateData}> = (props) => {
          const {data} = props ?? {};

          return  portfolioCompanyDataTemplateTableCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyDataTemplateTableCreateMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableCreate>>>
    export type PortfolioCompanyDataTemplateTableCreateMutationBody = PortfolioCompanyDataTemplateTableCreateData
    export type PortfolioCompanyDataTemplateTableCreateMutationError = HTTPValidationError

    /**
 * @summary Create Endpoint
 */
export const usePortfolioCompanyDataTemplateTableCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableCreate>>, TError,{data: PortfolioCompanyDataTemplateTableCreateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableCreate>>,
        TError,
        {data: PortfolioCompanyDataTemplateTableCreateData},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyDataTemplateTableCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete Many Endpoint
 */
export const portfolioCompanyDataTemplateTablesDelete = (
    portfolioCompanyDataTemplateTablesDeleteBody: string[],
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/portfolio-company/requests/data-template-tables/bulk`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: portfolioCompanyDataTemplateTablesDeleteBody
    },
      );
    }
  


export const getPortfolioCompanyDataTemplateTablesDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesDelete>>, TError,{data: string[]}, TContext> => {
    
const mutationKey = ['portfolioCompanyDataTemplateTablesDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesDelete>>, {data: string[]}> = (props) => {
          const {data} = props ?? {};

          return  portfolioCompanyDataTemplateTablesDelete(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyDataTemplateTablesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesDelete>>>
    export type PortfolioCompanyDataTemplateTablesDeleteMutationBody = string[]
    export type PortfolioCompanyDataTemplateTablesDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Many Endpoint
 */
export const usePortfolioCompanyDataTemplateTablesDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesDelete>>,
        TError,
        {data: string[]},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyDataTemplateTablesDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create Many Endpoint
 */
export const portfolioCompanyDataTemplateTablesBulkCreate = (
    portfolioCompanyDataTemplateTableCreateData: PortfolioCompanyDataTemplateTableCreateData[],
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyDataTemplateTableRecordReadData[]>(
      {url: `/api/portfolio-company/requests/data-template-tables/bulk`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: portfolioCompanyDataTemplateTableCreateData, signal
    },
      );
    }
  


export const getPortfolioCompanyDataTemplateTablesBulkCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesBulkCreate>>, TError,{data: PortfolioCompanyDataTemplateTableCreateData[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesBulkCreate>>, TError,{data: PortfolioCompanyDataTemplateTableCreateData[]}, TContext> => {
    
const mutationKey = ['portfolioCompanyDataTemplateTablesBulkCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesBulkCreate>>, {data: PortfolioCompanyDataTemplateTableCreateData[]}> = (props) => {
          const {data} = props ?? {};

          return  portfolioCompanyDataTemplateTablesBulkCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyDataTemplateTablesBulkCreateMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesBulkCreate>>>
    export type PortfolioCompanyDataTemplateTablesBulkCreateMutationBody = PortfolioCompanyDataTemplateTableCreateData[]
    export type PortfolioCompanyDataTemplateTablesBulkCreateMutationError = HTTPValidationError

    /**
 * @summary Create Many Endpoint
 */
export const usePortfolioCompanyDataTemplateTablesBulkCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesBulkCreate>>, TError,{data: PortfolioCompanyDataTemplateTableCreateData[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesBulkCreate>>,
        TError,
        {data: PortfolioCompanyDataTemplateTableCreateData[]},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyDataTemplateTablesBulkCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Portfolio Company Data Template Tables Table Data Api
 */
export const portfolioCompanyDataTemplateTablesTableDataRetrieve = (
    templateId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<TableData>(
      {url: `/api/portfolio-company/requests/data-template-tables/template/${templateId}/table-data`, method: 'GET', signal
    },
      );
    }
  

export const getPortfolioCompanyDataTemplateTablesTableDataRetrieveQueryKey = (templateId: string,) => {
    return [`/api/portfolio-company/requests/data-template-tables/template/${templateId}/table-data`] as const;
    }

    
export const getPortfolioCompanyDataTemplateTablesTableDataRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>, TError = HTTPValidationError>(templateId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataTemplateTablesTableDataRetrieveQueryKey(templateId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>> = ({ signal }) => portfolioCompanyDataTemplateTablesTableDataRetrieve(templateId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(templateId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataTemplateTablesTableDataRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>>
export type PortfolioCompanyDataTemplateTablesTableDataRetrieveQueryError = HTTPValidationError


export function usePortfolioCompanyDataTemplateTablesTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>, TError = HTTPValidationError>(
 templateId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplateTablesTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>, TError = HTTPValidationError>(
 templateId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplateTablesTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>, TError = HTTPValidationError>(
 templateId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Portfolio Company Data Template Tables Table Data Api
 */

export function usePortfolioCompanyDataTemplateTablesTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>, TError = HTTPValidationError>(
 templateId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataTemplateTablesTableDataRetrieveQueryOptions(templateId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPortfolioCompanyDataTemplateTablesTableDataRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>, TError = HTTPValidationError>(templateId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataTemplateTablesTableDataRetrieveQueryKey(templateId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>> = ({ signal }) => portfolioCompanyDataTemplateTablesTableDataRetrieve(templateId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataTemplateTablesTableDataRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>>
export type PortfolioCompanyDataTemplateTablesTableDataRetrieveSuspenseQueryError = HTTPValidationError


export function usePortfolioCompanyDataTemplateTablesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>, TError = HTTPValidationError>(
 templateId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplateTablesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>, TError = HTTPValidationError>(
 templateId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplateTablesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>, TError = HTTPValidationError>(
 templateId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Portfolio Company Data Template Tables Table Data Api
 */

export function usePortfolioCompanyDataTemplateTablesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>, TError = HTTPValidationError>(
 templateId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTablesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataTemplateTablesTableDataRetrieveSuspenseQueryOptions(templateId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete Endpoint
 */
export const portfolioCompanyDataTemplateTableDelete = (
    id: string,
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/portfolio-company/requests/data-template-tables/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getPortfolioCompanyDataTemplateTableDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableDelete>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableDelete>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['portfolioCompanyDataTemplateTableDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableDelete>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  portfolioCompanyDataTemplateTableDelete(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyDataTemplateTableDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableDelete>>>
    
    export type PortfolioCompanyDataTemplateTableDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Endpoint
 */
export const usePortfolioCompanyDataTemplateTableDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableDelete>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableDelete>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyDataTemplateTableDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Endpoint
 */
export const portfolioCompanyDataTemplateTableRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyDataTemplateTableRecordReadData>(
      {url: `/api/portfolio-company/requests/data-template-tables/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getPortfolioCompanyDataTemplateTableRetrieveQueryKey = (id: string,) => {
    return [`/api/portfolio-company/requests/data-template-tables/${id}`] as const;
    }

    
export const getPortfolioCompanyDataTemplateTableRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataTemplateTableRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>> = ({ signal }) => portfolioCompanyDataTemplateTableRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataTemplateTableRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>>
export type PortfolioCompanyDataTemplateTableRetrieveQueryError = HTTPValidationError


export function usePortfolioCompanyDataTemplateTableRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplateTableRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplateTableRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function usePortfolioCompanyDataTemplateTableRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataTemplateTableRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPortfolioCompanyDataTemplateTableRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataTemplateTableRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>> = ({ signal }) => portfolioCompanyDataTemplateTableRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataTemplateTableRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>>
export type PortfolioCompanyDataTemplateTableRetrieveSuspenseQueryError = HTTPValidationError


export function usePortfolioCompanyDataTemplateTableRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplateTableRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplateTableRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function usePortfolioCompanyDataTemplateTableRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataTemplateTableRetrieveSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Endpoint
 */
export const portfolioCompanyDataTemplateTableUpdate = (
    id: string,
    portfolioCompanyDataTemplateTableRecordUpdateData: PortfolioCompanyDataTemplateTableRecordUpdateData,
 ) => {
      
      
      return axiosRequest<PortfolioCompanyDataTemplateTableRecordReadData>(
      {url: `/api/portfolio-company/requests/data-template-tables/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: portfolioCompanyDataTemplateTableRecordUpdateData
    },
      );
    }
  


export const getPortfolioCompanyDataTemplateTableUpdateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableUpdate>>, TError,{id: string;data: PortfolioCompanyDataTemplateTableRecordUpdateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableUpdate>>, TError,{id: string;data: PortfolioCompanyDataTemplateTableRecordUpdateData}, TContext> => {
    
const mutationKey = ['portfolioCompanyDataTemplateTableUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableUpdate>>, {id: string;data: PortfolioCompanyDataTemplateTableRecordUpdateData}> = (props) => {
          const {id,data} = props ?? {};

          return  portfolioCompanyDataTemplateTableUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyDataTemplateTableUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableUpdate>>>
    export type PortfolioCompanyDataTemplateTableUpdateMutationBody = PortfolioCompanyDataTemplateTableRecordUpdateData
    export type PortfolioCompanyDataTemplateTableUpdateMutationError = HTTPValidationError

    /**
 * @summary Update Endpoint
 */
export const usePortfolioCompanyDataTemplateTableUpdate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableUpdate>>, TError,{id: string;data: PortfolioCompanyDataTemplateTableRecordUpdateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyDataTemplateTableUpdate>>,
        TError,
        {id: string;data: PortfolioCompanyDataTemplateTableRecordUpdateData},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyDataTemplateTableUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary List Portfolio Company Data Templates Api
 */
export const portfolioCompanyDataTemplatesList = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyDataTemplateRecordReadData[]>(
      {url: `/api/portfolio-company/requests/data-templates/`, method: 'GET', signal
    },
      );
    }
  

export const getPortfolioCompanyDataTemplatesListQueryKey = () => {
    return [`/api/portfolio-company/requests/data-templates/`] as const;
    }

    
export const getPortfolioCompanyDataTemplatesListQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataTemplatesListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>> = ({ signal }) => portfolioCompanyDataTemplatesList(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataTemplatesListQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>>
export type PortfolioCompanyDataTemplatesListQueryError = unknown


export function usePortfolioCompanyDataTemplatesList<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplatesList<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplatesList<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Portfolio Company Data Templates Api
 */

export function usePortfolioCompanyDataTemplatesList<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataTemplatesListQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPortfolioCompanyDataTemplatesListSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataTemplatesListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>> = ({ signal }) => portfolioCompanyDataTemplatesList(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataTemplatesListSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>>
export type PortfolioCompanyDataTemplatesListSuspenseQueryError = unknown


export function usePortfolioCompanyDataTemplatesListSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplatesListSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplatesListSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Portfolio Company Data Templates Api
 */

export function usePortfolioCompanyDataTemplatesListSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesList>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataTemplatesListSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Endpoint
 */
export const portfolioCompanyDataTemplateCreate = (
    portfolioCompanyDataTemplateRecordCreateData: PortfolioCompanyDataTemplateRecordCreateData,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyDataTemplateRecordReadData>(
      {url: `/api/portfolio-company/requests/data-templates/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: portfolioCompanyDataTemplateRecordCreateData, signal
    },
      );
    }
  


export const getPortfolioCompanyDataTemplateCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateCreate>>, TError,{data: PortfolioCompanyDataTemplateRecordCreateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateCreate>>, TError,{data: PortfolioCompanyDataTemplateRecordCreateData}, TContext> => {
    
const mutationKey = ['portfolioCompanyDataTemplateCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplateCreate>>, {data: PortfolioCompanyDataTemplateRecordCreateData}> = (props) => {
          const {data} = props ?? {};

          return  portfolioCompanyDataTemplateCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyDataTemplateCreateMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplateCreate>>>
    export type PortfolioCompanyDataTemplateCreateMutationBody = PortfolioCompanyDataTemplateRecordCreateData
    export type PortfolioCompanyDataTemplateCreateMutationError = HTTPValidationError

    /**
 * @summary Create Endpoint
 */
export const usePortfolioCompanyDataTemplateCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateCreate>>, TError,{data: PortfolioCompanyDataTemplateRecordCreateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyDataTemplateCreate>>,
        TError,
        {data: PortfolioCompanyDataTemplateRecordCreateData},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyDataTemplateCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete Many Endpoint
 */
export const portfolioCompanyDataTemplatesDelete = (
    portfolioCompanyDataTemplatesDeleteBody: string[],
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/portfolio-company/requests/data-templates/bulk`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: portfolioCompanyDataTemplatesDeleteBody
    },
      );
    }
  


export const getPortfolioCompanyDataTemplatesDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesDelete>>, TError,{data: string[]}, TContext> => {
    
const mutationKey = ['portfolioCompanyDataTemplatesDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesDelete>>, {data: string[]}> = (props) => {
          const {data} = props ?? {};

          return  portfolioCompanyDataTemplatesDelete(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyDataTemplatesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesDelete>>>
    export type PortfolioCompanyDataTemplatesDeleteMutationBody = string[]
    export type PortfolioCompanyDataTemplatesDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Many Endpoint
 */
export const usePortfolioCompanyDataTemplatesDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesDelete>>, TError,{data: string[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyDataTemplatesDelete>>,
        TError,
        {data: string[]},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyDataTemplatesDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create Many Endpoint
 */
export const portfolioCompanyDataTemplatesBulkCreate = (
    portfolioCompanyDataTemplateRecordCreateData: PortfolioCompanyDataTemplateRecordCreateData[],
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyDataTemplateRecordReadData[]>(
      {url: `/api/portfolio-company/requests/data-templates/bulk`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: portfolioCompanyDataTemplateRecordCreateData, signal
    },
      );
    }
  


export const getPortfolioCompanyDataTemplatesBulkCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesBulkCreate>>, TError,{data: PortfolioCompanyDataTemplateRecordCreateData[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesBulkCreate>>, TError,{data: PortfolioCompanyDataTemplateRecordCreateData[]}, TContext> => {
    
const mutationKey = ['portfolioCompanyDataTemplatesBulkCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesBulkCreate>>, {data: PortfolioCompanyDataTemplateRecordCreateData[]}> = (props) => {
          const {data} = props ?? {};

          return  portfolioCompanyDataTemplatesBulkCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyDataTemplatesBulkCreateMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesBulkCreate>>>
    export type PortfolioCompanyDataTemplatesBulkCreateMutationBody = PortfolioCompanyDataTemplateRecordCreateData[]
    export type PortfolioCompanyDataTemplatesBulkCreateMutationError = HTTPValidationError

    /**
 * @summary Create Many Endpoint
 */
export const usePortfolioCompanyDataTemplatesBulkCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesBulkCreate>>, TError,{data: PortfolioCompanyDataTemplateRecordCreateData[]}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyDataTemplatesBulkCreate>>,
        TError,
        {data: PortfolioCompanyDataTemplateRecordCreateData[]},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyDataTemplatesBulkCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Portfolio Company Data Templates Table Data Api
 */
export const portfolioCompanyDataTemplatesTableDataRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<TableData>(
      {url: `/api/portfolio-company/requests/data-templates/table-data`, method: 'GET', signal
    },
      );
    }
  

export const getPortfolioCompanyDataTemplatesTableDataRetrieveQueryKey = () => {
    return [`/api/portfolio-company/requests/data-templates/table-data`] as const;
    }

    
export const getPortfolioCompanyDataTemplatesTableDataRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataTemplatesTableDataRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>> = ({ signal }) => portfolioCompanyDataTemplatesTableDataRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataTemplatesTableDataRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>>
export type PortfolioCompanyDataTemplatesTableDataRetrieveQueryError = unknown


export function usePortfolioCompanyDataTemplatesTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplatesTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplatesTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Portfolio Company Data Templates Table Data Api
 */

export function usePortfolioCompanyDataTemplatesTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataTemplatesTableDataRetrieveQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPortfolioCompanyDataTemplatesTableDataRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataTemplatesTableDataRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>> = ({ signal }) => portfolioCompanyDataTemplatesTableDataRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataTemplatesTableDataRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>>
export type PortfolioCompanyDataTemplatesTableDataRetrieveSuspenseQueryError = unknown


export function usePortfolioCompanyDataTemplatesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplatesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplatesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Portfolio Company Data Templates Table Data Api
 */

export function usePortfolioCompanyDataTemplatesTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplatesTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataTemplatesTableDataRetrieveSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete Endpoint
 */
export const portfolioCompanyDataTemplateDelete = (
    id: string,
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/portfolio-company/requests/data-templates/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getPortfolioCompanyDataTemplateDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateDelete>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateDelete>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['portfolioCompanyDataTemplateDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplateDelete>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  portfolioCompanyDataTemplateDelete(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyDataTemplateDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplateDelete>>>
    
    export type PortfolioCompanyDataTemplateDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Endpoint
 */
export const usePortfolioCompanyDataTemplateDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateDelete>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyDataTemplateDelete>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyDataTemplateDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Endpoint
 */
export const portfolioCompanyDataTemplateRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyDataTemplateRecordReadData>(
      {url: `/api/portfolio-company/requests/data-templates/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getPortfolioCompanyDataTemplateRetrieveQueryKey = (id: string,) => {
    return [`/api/portfolio-company/requests/data-templates/${id}`] as const;
    }

    
export const getPortfolioCompanyDataTemplateRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataTemplateRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>> = ({ signal }) => portfolioCompanyDataTemplateRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataTemplateRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>>
export type PortfolioCompanyDataTemplateRetrieveQueryError = HTTPValidationError


export function usePortfolioCompanyDataTemplateRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplateRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplateRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function usePortfolioCompanyDataTemplateRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataTemplateRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPortfolioCompanyDataTemplateRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataTemplateRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>> = ({ signal }) => portfolioCompanyDataTemplateRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataTemplateRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>>
export type PortfolioCompanyDataTemplateRetrieveSuspenseQueryError = HTTPValidationError


export function usePortfolioCompanyDataTemplateRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplateRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplateRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function usePortfolioCompanyDataTemplateRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataTemplateRetrieveSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Endpoint
 */
export const portfolioCompanyDataTemplateUpdate = (
    id: string,
    portfolioCompanyDataTemplateRecordUpdateData: PortfolioCompanyDataTemplateRecordUpdateData,
 ) => {
      
      
      return axiosRequest<PortfolioCompanyDataTemplateRecordReadData>(
      {url: `/api/portfolio-company/requests/data-templates/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: portfolioCompanyDataTemplateRecordUpdateData
    },
      );
    }
  


export const getPortfolioCompanyDataTemplateUpdateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateUpdate>>, TError,{id: string;data: PortfolioCompanyDataTemplateRecordUpdateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateUpdate>>, TError,{id: string;data: PortfolioCompanyDataTemplateRecordUpdateData}, TContext> => {
    
const mutationKey = ['portfolioCompanyDataTemplateUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplateUpdate>>, {id: string;data: PortfolioCompanyDataTemplateRecordUpdateData}> = (props) => {
          const {id,data} = props ?? {};

          return  portfolioCompanyDataTemplateUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyDataTemplateUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplateUpdate>>>
    export type PortfolioCompanyDataTemplateUpdateMutationBody = PortfolioCompanyDataTemplateRecordUpdateData
    export type PortfolioCompanyDataTemplateUpdateMutationError = HTTPValidationError

    /**
 * @summary Update Endpoint
 */
export const usePortfolioCompanyDataTemplateUpdate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateUpdate>>, TError,{id: string;data: PortfolioCompanyDataTemplateRecordUpdateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyDataTemplateUpdate>>,
        TError,
        {id: string;data: PortfolioCompanyDataTemplateRecordUpdateData},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyDataTemplateUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Versions Endpoint
 */
export const portfolioCompanyDataTemplateVersionsRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<VersionReadDataPortfolioCompanyDataTemplateRecordReadData[]>(
      {url: `/api/portfolio-company/requests/data-templates/${id}/versions`, method: 'GET', signal
    },
      );
    }
  

export const getPortfolioCompanyDataTemplateVersionsRetrieveQueryKey = (id: string,) => {
    return [`/api/portfolio-company/requests/data-templates/${id}/versions`] as const;
    }

    
export const getPortfolioCompanyDataTemplateVersionsRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataTemplateVersionsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>> = ({ signal }) => portfolioCompanyDataTemplateVersionsRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataTemplateVersionsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>>
export type PortfolioCompanyDataTemplateVersionsRetrieveQueryError = HTTPValidationError


export function usePortfolioCompanyDataTemplateVersionsRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplateVersionsRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplateVersionsRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Versions Endpoint
 */

export function usePortfolioCompanyDataTemplateVersionsRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataTemplateVersionsRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPortfolioCompanyDataTemplateVersionsRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyDataTemplateVersionsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>> = ({ signal }) => portfolioCompanyDataTemplateVersionsRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyDataTemplateVersionsRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>>
export type PortfolioCompanyDataTemplateVersionsRetrieveSuspenseQueryError = HTTPValidationError


export function usePortfolioCompanyDataTemplateVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplateVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyDataTemplateVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Versions Endpoint
 */

export function usePortfolioCompanyDataTemplateVersionsRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyDataTemplateVersionsRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyDataTemplateVersionsRetrieveSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Portfolio Company Data Request Api
 */
export const portfolioCompanyRequestWithMetadataRetrieve = (
    requestId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyRequestReadData>(
      {url: `/api/portfolio-company/requests/request-with-metadata/${requestId}`, method: 'GET', signal
    },
      );
    }
  

export const getPortfolioCompanyRequestWithMetadataRetrieveQueryKey = (requestId: string,) => {
    return [`/api/portfolio-company/requests/request-with-metadata/${requestId}`] as const;
    }

    
export const getPortfolioCompanyRequestWithMetadataRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>, TError = HTTPValidationError>(requestId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyRequestWithMetadataRetrieveQueryKey(requestId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>> = ({ signal }) => portfolioCompanyRequestWithMetadataRetrieve(requestId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(requestId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyRequestWithMetadataRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>>
export type PortfolioCompanyRequestWithMetadataRetrieveQueryError = HTTPValidationError


export function usePortfolioCompanyRequestWithMetadataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>, TError = HTTPValidationError>(
 requestId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyRequestWithMetadataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>, TError = HTTPValidationError>(
 requestId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyRequestWithMetadataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>, TError = HTTPValidationError>(
 requestId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Portfolio Company Data Request Api
 */

export function usePortfolioCompanyRequestWithMetadataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>, TError = HTTPValidationError>(
 requestId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyRequestWithMetadataRetrieveQueryOptions(requestId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPortfolioCompanyRequestWithMetadataRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>, TError = HTTPValidationError>(requestId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyRequestWithMetadataRetrieveQueryKey(requestId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>> = ({ signal }) => portfolioCompanyRequestWithMetadataRetrieve(requestId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyRequestWithMetadataRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>>
export type PortfolioCompanyRequestWithMetadataRetrieveSuspenseQueryError = HTTPValidationError


export function usePortfolioCompanyRequestWithMetadataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>, TError = HTTPValidationError>(
 requestId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyRequestWithMetadataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>, TError = HTTPValidationError>(
 requestId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyRequestWithMetadataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>, TError = HTTPValidationError>(
 requestId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Portfolio Company Data Request Api
 */

export function usePortfolioCompanyRequestWithMetadataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>, TError = HTTPValidationError>(
 requestId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestWithMetadataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyRequestWithMetadataRetrieveSuspenseQueryOptions(requestId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Transition Portfolio Company Request Api
 */
export const portfolioCompanyRequestTransition = (
    requestId: string,
    params: PortfolioCompanyRequestTransitionParams,
 ) => {
      
      
      return axiosRequest<PortfolioCompanyRequestRecordReadData>(
      {url: `/api/portfolio-company/requests/request/${requestId}/transition`, method: 'PATCH',
        params
    },
      );
    }
  


export const getPortfolioCompanyRequestTransitionMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyRequestTransition>>, TError,{requestId: string;params: PortfolioCompanyRequestTransitionParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyRequestTransition>>, TError,{requestId: string;params: PortfolioCompanyRequestTransitionParams}, TContext> => {
    
const mutationKey = ['portfolioCompanyRequestTransition'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyRequestTransition>>, {requestId: string;params: PortfolioCompanyRequestTransitionParams}> = (props) => {
          const {requestId,params} = props ?? {};

          return  portfolioCompanyRequestTransition(requestId,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyRequestTransitionMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyRequestTransition>>>
    
    export type PortfolioCompanyRequestTransitionMutationError = HTTPValidationError

    /**
 * @summary Transition Portfolio Company Request Api
 */
export const usePortfolioCompanyRequestTransition = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyRequestTransition>>, TError,{requestId: string;params: PortfolioCompanyRequestTransitionParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyRequestTransition>>,
        TError,
        {requestId: string;params: PortfolioCompanyRequestTransitionParams},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyRequestTransitionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Portfolio Company Requests Table Data Api
 */
export const portfolioCompanyRequestsTableDataRetrieve = (
    params?: PortfolioCompanyRequestsTableDataRetrieveParams,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<TableData>(
      {url: `/api/portfolio-company/requests/requests-table-data`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getPortfolioCompanyRequestsTableDataRetrieveQueryKey = (params?: PortfolioCompanyRequestsTableDataRetrieveParams,) => {
    return [`/api/portfolio-company/requests/requests-table-data`, ...(params ? [params]: [])] as const;
    }

    
export const getPortfolioCompanyRequestsTableDataRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>, TError = HTTPValidationError>(params?: PortfolioCompanyRequestsTableDataRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyRequestsTableDataRetrieveQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>> = ({ signal }) => portfolioCompanyRequestsTableDataRetrieve(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyRequestsTableDataRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>>
export type PortfolioCompanyRequestsTableDataRetrieveQueryError = HTTPValidationError


export function usePortfolioCompanyRequestsTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>, TError = HTTPValidationError>(
 params: undefined |  PortfolioCompanyRequestsTableDataRetrieveParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyRequestsTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>, TError = HTTPValidationError>(
 params?: PortfolioCompanyRequestsTableDataRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyRequestsTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>, TError = HTTPValidationError>(
 params?: PortfolioCompanyRequestsTableDataRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Portfolio Company Requests Table Data Api
 */

export function usePortfolioCompanyRequestsTableDataRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>, TError = HTTPValidationError>(
 params?: PortfolioCompanyRequestsTableDataRetrieveParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyRequestsTableDataRetrieveQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPortfolioCompanyRequestsTableDataRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>, TError = HTTPValidationError>(params?: PortfolioCompanyRequestsTableDataRetrieveParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyRequestsTableDataRetrieveQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>> = ({ signal }) => portfolioCompanyRequestsTableDataRetrieve(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyRequestsTableDataRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>>
export type PortfolioCompanyRequestsTableDataRetrieveSuspenseQueryError = HTTPValidationError


export function usePortfolioCompanyRequestsTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>, TError = HTTPValidationError>(
 params: undefined |  PortfolioCompanyRequestsTableDataRetrieveParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyRequestsTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>, TError = HTTPValidationError>(
 params?: PortfolioCompanyRequestsTableDataRetrieveParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyRequestsTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>, TError = HTTPValidationError>(
 params?: PortfolioCompanyRequestsTableDataRetrieveParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Portfolio Company Requests Table Data Api
 */

export function usePortfolioCompanyRequestsTableDataRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>, TError = HTTPValidationError>(
 params?: PortfolioCompanyRequestsTableDataRetrieveParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestsTableDataRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyRequestsTableDataRetrieveSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete Endpoint
 */
export const portfolioCompanyRequestDelete = (
    id: string,
 ) => {
      
      
      return axiosRequest<unknown>(
      {url: `/api/portfolio-company/requests/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getPortfolioCompanyRequestDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyRequestDelete>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyRequestDelete>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['portfolioCompanyRequestDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyRequestDelete>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  portfolioCompanyRequestDelete(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyRequestDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyRequestDelete>>>
    
    export type PortfolioCompanyRequestDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Endpoint
 */
export const usePortfolioCompanyRequestDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyRequestDelete>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyRequestDelete>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyRequestDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Endpoint
 */
export const portfolioCompanyRequestRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return axiosRequest<PortfolioCompanyRequestRecordReadData>(
      {url: `/api/portfolio-company/requests/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getPortfolioCompanyRequestRetrieveQueryKey = (id: string,) => {
    return [`/api/portfolio-company/requests/${id}`] as const;
    }

    
export const getPortfolioCompanyRequestRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyRequestRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>> = ({ signal }) => portfolioCompanyRequestRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyRequestRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>>
export type PortfolioCompanyRequestRetrieveQueryError = HTTPValidationError


export function usePortfolioCompanyRequestRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyRequestRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>,
          TError,
          Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyRequestRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function usePortfolioCompanyRequestRetrieve<TData = Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyRequestRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPortfolioCompanyRequestRetrieveSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>, TError = HTTPValidationError>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPortfolioCompanyRequestRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>> = ({ signal }) => portfolioCompanyRequestRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PortfolioCompanyRequestRetrieveSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>>
export type PortfolioCompanyRequestRetrieveSuspenseQueryError = HTTPValidationError


export function usePortfolioCompanyRequestRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>, TError = HTTPValidationError>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyRequestRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePortfolioCompanyRequestRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Endpoint
 */

export function usePortfolioCompanyRequestRetrieveSuspense<TData = Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>, TError = HTTPValidationError>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof portfolioCompanyRequestRetrieve>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPortfolioCompanyRequestRetrieveSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Endpoint
 */
export const portfolioCompanyRequestUpdate = (
    id: string,
    portfolioCompanyRequestRecordUpdateData: PortfolioCompanyRequestRecordUpdateData,
 ) => {
      
      
      return axiosRequest<PortfolioCompanyRequestRecordReadData>(
      {url: `/api/portfolio-company/requests/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: portfolioCompanyRequestRecordUpdateData
    },
      );
    }
  


export const getPortfolioCompanyRequestUpdateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyRequestUpdate>>, TError,{id: string;data: PortfolioCompanyRequestRecordUpdateData}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyRequestUpdate>>, TError,{id: string;data: PortfolioCompanyRequestRecordUpdateData}, TContext> => {
    
const mutationKey = ['portfolioCompanyRequestUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof portfolioCompanyRequestUpdate>>, {id: string;data: PortfolioCompanyRequestRecordUpdateData}> = (props) => {
          const {id,data} = props ?? {};

          return  portfolioCompanyRequestUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PortfolioCompanyRequestUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof portfolioCompanyRequestUpdate>>>
    export type PortfolioCompanyRequestUpdateMutationBody = PortfolioCompanyRequestRecordUpdateData
    export type PortfolioCompanyRequestUpdateMutationError = HTTPValidationError

    /**
 * @summary Update Endpoint
 */
export const usePortfolioCompanyRequestUpdate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof portfolioCompanyRequestUpdate>>, TError,{id: string;data: PortfolioCompanyRequestRecordUpdateData}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof portfolioCompanyRequestUpdate>>,
        TError,
        {id: string;data: PortfolioCompanyRequestRecordUpdateData},
        TContext
      > => {

      const mutationOptions = getPortfolioCompanyRequestUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    