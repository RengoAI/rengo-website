{"version":3,"file":"changelog-page-DpFSma7K.js","sources":["../../src/features/blog/changelog/change-log-content.tsx","../../src/features/blog/changelog/change-log-header.tsx","../../src/features/blog/changelog/changelog-page.tsx"],"sourcesContent":["import { rootRoute } from \"@/app/app-routes\";\nimport {\n  ChangelogEntryData,\n  ChangelogEntryType,\n} from \"@/features/blog/changelog/types\";\nimport { Accordion, Badge, Box, HStack, Text, VStack } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst ChangeMonthSection: React.FC<{\n  isOpen: boolean;\n  entries: Record<string, ChangelogEntryData>;\n  year: string;\n  month: string;\n}> = ({ isOpen, entries, year, month }) => {\n  const navigate = useNavigate();\n  const getTypeColor = (type: ChangelogEntryType) => {\n    switch (type) {\n      case \"Release\":\n        return \"primary\";\n      case \"Improvement\":\n        return \"green\";\n      case \"Fix\":\n        return \"orange\";\n      default:\n        return \"gray\";\n    }\n  };\n\n  return (\n    <Accordion.Root\n      collapsible\n      defaultValue={isOpen ? [month + year] : undefined}\n    >\n      <Accordion.Item value={month + year}>\n        <Accordion.ItemTrigger>\n          <Text fontSize=\"2xl\" fontWeight=\"bold\" color=\"gray.900\">\n            {month} {year}\n          </Text>\n          <Accordion.ItemIndicator />\n        </Accordion.ItemTrigger>\n        <Accordion.ItemContent>\n          <Accordion.ItemBody p={0}>\n            {/* Changelog Entries */}\n            <VStack gap={0} align=\"stretch\">\n              {Object.entries(entries).map(([id, entry], index) => (\n                <Box\n                  key={id}\n                  onClick={() => {\n                    navigate(\n                      rootRoute({})\n                        .blog({})\n                        .changelog({})\n                        .entry({ year, month, id: entry.id }).$,\n                    );\n                  }}\n                  _hover={{\n                    bg: \"white\",\n                    cursor: \"pointer\",\n                    borderBottom: \"1px solid\",\n                    borderColor: \"primary.200\",\n                  }}\n                  transition=\"background 0.2s\"\n                  borderBottom={\n                    index === Object.entries(entries).length - 1\n                      ? \"none\"\n                      : \"1px solid\"\n                  }\n                  borderColor=\"gray.200\"\n                  p={4}\n                >\n                  <HStack gap={4} align=\"flex-start\" mb={3}>\n                    <Text\n                      fontSize=\"sm\"\n                      fontWeight=\"medium\"\n                      color=\"gray.600\"\n                      minW=\"50px\"\n                    >\n                      {entry.date.day} {entry.date.month} {entry.date.year}\n                    </Text>\n                    <Badge\n                      colorScheme={getTypeColor(entry.type)}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      fontSize=\"xs\"\n                      fontWeight=\"normal\"\n                      px={2}\n                      py={1}\n                    >\n                      {entry.type}\n                    </Badge>\n                  </HStack>\n\n                  <Box ml=\"66px\">\n                    <Text\n                      fontSize=\"lg\"\n                      fontWeight=\"medium\"\n                      color=\"gray.900\"\n                      display=\"block\"\n                      mb={3}\n                      lineHeight=\"1.4\"\n                    >\n                      {entry.title}\n                    </Text>\n\n                    <HStack gap={2} flexWrap=\"wrap\">\n                      {entry.tags.map((tag) => (\n                        <Badge\n                          key={tag}\n                          variant=\"outline\"\n                          colorScheme=\"gray\"\n                          size=\"xs\"\n                          fontSize=\"xxs\"\n                          fontWeight=\"normal\"\n                        >\n                          {tag}\n                        </Badge>\n                      ))}\n                    </HStack>\n                  </Box>\n                </Box>\n              ))}\n            </VStack>\n          </Accordion.ItemBody>\n        </Accordion.ItemContent>\n      </Accordion.Item>\n    </Accordion.Root>\n  );\n};\n\nexport const ChangelogContent: React.FC<{\n  changelogEntriesByYearByMonthById: Record<\n    string,\n    Record<string, Record<string, ChangelogEntryData>>\n  >;\n  selectedYear: string;\n}> = ({ changelogEntriesByYearByMonthById, selectedYear }) => {\n  const selectedYearEntries = changelogEntriesByYearByMonthById[selectedYear];\n\n  return (\n    <VStack gap={8} align=\"stretch\">\n      {Object.entries(selectedYearEntries)\n        .sort(([monthA], [monthB]) => {\n          // Sort months in reverse chronological order\n          // Try to parse as number, fallback to string comparison\n          const numA = Number(monthA);\n          const numB = Number(monthB);\n          if (!isNaN(numA) && !isNaN(numB)) {\n            return numB - numA;\n          }\n          // If not numbers, try to use Date.parse for month names\n          const dateA = Date.parse(`${monthA} 1, 2000`);\n          const dateB = Date.parse(`${monthB} 1, 2000`);\n          if (!isNaN(dateA) && !isNaN(dateB)) {\n            return dateB - dateA;\n          }\n          // Fallback to string comparison\n          return monthB.localeCompare(monthA);\n        })\n        .map(([month, entriesById]) => (\n          <ChangeMonthSection\n            key={`${selectedYear}-${month}`}\n            isOpen={Object.entries(selectedYearEntries)[0][0] === month}\n            entries={entriesById}\n            year={selectedYear}\n            month={month}\n          />\n        ))}\n    </VStack>\n  );\n};\n","import { ChangelogEntryType } from \"@/features/blog/changelog/types\";\nimport {\n  Box,\n  Button,\n  ButtonProps,\n  Container,\n  Flex,\n  HStack,\n  Text,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { BookPlus, Globe, Sparkle, TriangleAlert } from \"lucide-react\";\nimport React from \"react\";\n\nconst FilterSection: React.FC<{\n  selectedType: ChangelogEntryType | null;\n  setSelectedType: (type: ChangelogEntryType | null) => void;\n}> = ({ selectedType, setSelectedType }) => {\n  const getFilterButtonStyle = (\n    filterType: ChangelogEntryType | null,\n  ): ButtonProps & React.RefAttributes<HTMLButtonElement> => {\n    const isActive = selectedType === filterType;\n    return {\n      variant: isActive ? \"solid\" : (\"ghost\" as const),\n      color: \"gray.600\",\n      bg: isActive ? \"white\" : \"gray.50\",\n      _hover: {\n        bg: \"white\",\n        border: \"1px solid\",\n        borderColor: \"primary.700\",\n      },\n    };\n  };\n\n  return (\n    <Flex justify=\"space-between\" align=\"center\" flexWrap=\"wrap\" gap={4}>\n      <HStack gap={2}>\n        <Button\n          size=\"sm\"\n          onClick={() => setSelectedType(null)}\n          {...getFilterButtonStyle(null)}\n        >\n          <HStack gap={2}>\n            <Globe size={16} />\n            <Text fontSize=\"sm\" fontWeight=\"medium\">\n              All\n            </Text>\n          </HStack>\n        </Button>\n        <Button\n          size=\"sm\"\n          onClick={() => setSelectedType(\"Release\")}\n          {...getFilterButtonStyle(\"Release\")}\n        >\n          <HStack gap={2}>\n            <Sparkle size={16} color=\"green\" />\n            <Text fontSize=\"sm\" fontWeight=\"medium\">\n              New Releases\n            </Text>\n          </HStack>\n        </Button>\n        <Button\n          size=\"sm\"\n          onClick={() => setSelectedType(\"Improvement\")}\n          {...getFilterButtonStyle(\"Improvement\")}\n        >\n          <HStack gap={2}>\n            <BookPlus size={16} color=\"blue\" />\n            <Text fontSize=\"sm\" fontWeight=\"medium\">\n              Improvements\n            </Text>\n          </HStack>\n        </Button>\n        <Button\n          size=\"sm\"\n          onClick={() => setSelectedType(\"Fix\")}\n          {...getFilterButtonStyle(\"Fix\")}\n        >\n          <HStack gap={2}>\n            <TriangleAlert size={16} color=\"orange\" />\n            <Text fontSize=\"sm\" fontWeight=\"medium\">\n              Fixes\n            </Text>\n          </HStack>\n        </Button>\n      </HStack>\n    </Flex>\n  );\n};\n\nexport const ChangeLogHeader: React.FC<{\n  selectedType: ChangelogEntryType | null;\n  setSelectedType: (type: ChangelogEntryType | null) => void;\n}> = ({ selectedType, setSelectedType }) => (\n  <Box px={8} py={4} borderColor=\"gray.200\">\n    <Container maxW=\"6xl\" px={8} py={8}>\n      <VStack gap={8} align=\"stretch\">\n        <HStack\n          justify=\"space-between\"\n          align=\"flex-start\"\n          borderBottom=\"1px solid\"\n          borderColor=\"gray.200\"\n          pb={8}\n        >\n          <Text\n            fontSize={{ base: \"3xl\", md: \"4xl\" }}\n            fontWeight=\"bold\"\n            color=\"gray.900\"\n          >\n            Changelog\n          </Text>\n        </HStack>\n\n        <FilterSection\n          selectedType={selectedType}\n          setSelectedType={setSelectedType}\n        />\n      </VStack>\n    </Container>\n  </Box>\n);\n","import { Page } from \"@/components/layout/page\";\nimport { ChangelogContent } from \"@/features/blog/changelog/change-log-content\";\nimport { ChangeLogHeader } from \"@/features/blog/changelog/change-log-header\";\nimport { ChangelogEntryType } from \"@/features/blog/changelog/types\";\nimport { getChangelogEntriesByYearAndMonthAndId } from \"@/features/blog/changelog/utils\";\nimport { Button, Container, Flex, HStack } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\n\nexport const ChangelogPage: React.FC = () => {\n  const [selectedType, setSelectedType] = useState<ChangelogEntryType | null>(\n    null,\n  );\n  const [selectedYear, setSelectedYear] = useState<string>(\"2025\");\n\n  const changelogEntriesByYearByMonthById =\n    getChangelogEntriesByYearAndMonthAndId({\n      type: selectedType,\n      year: selectedYear,\n    });\n\n  return (\n    <Page sizeProps={{ fullHeight: true }}>\n      <ChangeLogHeader\n        selectedType={selectedType}\n        setSelectedType={setSelectedType}\n      />\n      <Container maxW=\"6xl\" py={8} px={8}>\n        <ChangelogContent\n          changelogEntriesByYearByMonthById={changelogEntriesByYearByMonthById}\n          selectedYear={selectedYear}\n        />\n        <Flex justify=\"center\" py={8}>\n          <HStack gap={4}>\n            <Button variant=\"outline\" size=\"sm\" disabled>\n              Prev\n            </Button>\n            <HStack gap={2}>\n              {Object.keys(changelogEntriesByYearByMonthById).map((year) => (\n                <Button\n                  key={year}\n                  variant=\"solid\"\n                  colorScheme=\"primary\"\n                  size=\"sm\"\n                  onClick={() => setSelectedYear(year)}\n                >\n                  {year}\n                </Button>\n              ))}\n            </HStack>\n            <Button variant=\"outline\" size=\"sm\">\n              Next\n            </Button>\n          </HStack>\n        </Flex>\n      </Container>\n    </Page>\n  );\n};\n"],"names":["ChangeMonthSection","isOpen","entries","year","month","navigate","useNavigate","getTypeColor","type","jsx","Accordion.Root","Accordion.Item","jsxs","Accordion.ItemTrigger","Text","Accordion.ItemIndicator","Accordion.ItemContent","Accordion.ItemBody","VStack","id","entry","index","Box","rootRoute","HStack","Badge","tag","ChangelogContent","changelogEntriesByYearByMonthById","selectedYear","selectedYearEntries","monthA","monthB","numA","numB","dateA","dateB","entriesById","FilterSection","selectedType","setSelectedType","getFilterButtonStyle","filterType","isActive","Flex","Button","Globe","Sparkle","BookPlus","TriangleAlert","ChangeLogHeader","Container","ChangelogPage","useState","setSelectedYear","getChangelogEntriesByYearAndMonthAndId","Page"],"mappings":"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"}